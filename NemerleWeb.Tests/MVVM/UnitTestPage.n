using NemerleWeb;
using Nemerle.Extensions;
using System;
using System.Collections.Generic;
using System.Linq;

namespace NemerleWeb.Tests
{
  [Page]
  public class UnitTestPage
  {
    Results : List[(string * bool)] { get; set; }
    
    [Unit]
    class SomeDisposable : IDisposable
    {
      public Dispose() : void
      {
        _ = "Do something";
      }
    }
    
    [Unit, Record]
    class TestCast
    {
      public I : int { get; set; }
      
      public static @:(i : int) : TestCast
      {
        TestCast(i)
      }
      
      public static @:>(i : long) : TestCast
      {
        TestCast(i :> int)
      }
    }
    
    /*
    [Unit]
    class SomeException : Exception
    {
      public override Message : string
      {
        get
        {
          "Some message"
        }
      }
    }
    */
    public this()
    {
      def test(description, res)
      {
        Results.Add((description, res()));
      }
      Results = [].ToList();
      
      test("simple", () =>
      {
        true
      });
      
      test("simple negative", () =>
      {
        !false
      });
      
      test("simple double negative", () =>
      {
        ! !true
      });
      
      test("simple triple negative", () =>
      {
        ! ! !false
      });
      
      test("if(true) p else f", () =>
      {
        if(true)
          true
        else
          false
      });
      
      test("if(false) f else p", () =>
      {
        if(false)
          false
        else
          true
      });
      
      test("ctor().field", () =>
      {
        _ = Dummy().DummyField;
        true
      });
      
      test("ctor().prop with if/else inside", () =>
      {
        _ = Dummy().DummyProp;
        true
      });
      
      test("tuple expansion def (a, b, c) = tuple", () =>
      {
        def tuple = ("Failed", true, 0);
        def (_a, b, _c) = tuple;
        b;
      });
      
      test("dummy.prop++", () =>
      {
        def d = Dummy();
        d.DummyInt++;
        
        d.DummyInt == 1
      });
      
      test("when", () =>
      {
        when(true)
          _ = ();
        
        true
      });
      
      test("for when", () =>
      {
        for(mutable i = 0; i != 1; i++)
          when(true)
            _ = ();
        
        true
      });
      
      test("for when variable", () =>
      {
        mutable res = false;
        
        for(mutable i = 0; i != 1; i++)
          when(true)
            res = true;
        
        res
      });
      
      test("nested if else", () =>
      {
        mutable i = 0;
        
        if(i == 0)
        {
          i++;
          
          if(i == 2)
            false
          else
            if(i == 1)
              true
            else
              false
        }
        else
          if(i != 10)
            false
          else
            true
      });
      
      test("casting", () =>
      {
        def x = 1;
        
        def y : TestCast = x;
        def z = 1l :> TestCast;
        
        y.I == z.I
      });
      
      test("list initialization", () =>
      {
        def l1 = List([1, 2, 3]);
        def l2 = [1, 2, 3].ToList();        
        def l3 = List() <- [1, 2, 3];
        
        mutable count = 0;
                
        for(mutable i = 0; i < l1.Count; i++)
          when(l1[i] == l2[i] && l1[i] == l3[i])
            count++;
            
        count == l1.Count
      });
      
      test("string concat 1", () =>
      {
        "ab" == string.Concat("a", "b")
      });
      
      test("string concat 2", () =>
      {
        def a = "a";
        def b = "b";
        "ab" == a + b
      });
      
      test("string concat 3", () =>
      {
        def a = "a";
        def b = "b";
        def c = "c";
        "abc" == a + b + c
      });
      
      test("string concat 4", () =>
      {
        def a = "a";
        def b = "b";
        def c = "c";
        def d = "d";
        "abcd" == a + b + c + d
      });
      
      test("string concat 5", () =>
      {
        def a = "a";
        def b = "b";
        def c = "c";
        def d = "d";
        "abcdabcdabcd" == a + b + c + d + a + b + c + d + a + b + c + d
      });
      
      test("string concat 6", () =>
      {
        "abc" == string.Concat("a", string.Concat("b", string.Concat("c")))
      });
      
      test("string concat 7", () =>
      {
        def l = ["a", "b", "c"].ToList();
        "abc" == string.Concat(l);
      });
      
      test("string concat 8", () =>
      {
        def l = [1, 2, 3].ToList();
        "123" == string.Concat(l);
      });
      
      test("string concat 9", () =>
      {
        "12" == string.Concat(1, string.Concat(2))
      });
      
      test("string concat 10", () =>
      {
        "1" == string.Concat(1)
      });
      
      test("string concat 11", () =>
      {
        "123" == string.Concat(1, 2, 3)
      });
      
      
      test("using", () =>
      {
        using (s = SomeDisposable())
        {
          _ = "Do something";
        }
        
        true
      });
      
      test("try finally", () =>
      {
        try
        {
          true
        }
        finally
        {
        }
      });
      
      test("variant", () =>
      {
        def v = DummyVariant.Case3(false) : DummyVariant;
        match(v)
        {
        | Case1 => false
        | Case2 => false
        | Case3(val) => val == false
        }
      });
      
      test("multiple assign", () =>
      {
        def (a, b) = (1, 2);
        
        a < b
      });
      
      test("foreach", () =>
      {
        def l = [1, 2, 3].ToList();
        
        mutable count = 0;
        mutable i = 0;
        foreach (e in l)
        {
          when (e == i + 1)
            count++;
          i++;
        }
        
        count == l.Count
      });
      
      test("foreach with", () =>
      {
        def l = [1, 2, 3].ToList();
        
        mutable count = 0;
        foreach (e in l with i)
          when (e == i + 1)
            count++;
        
        count == l.Count;
      });
            
      test("linq select", () =>
      {
        def l = [1, 2, 3].ToList();
        
        mutable count = 0;
        def seq = l.Select(x => x);
        foreach (e in seq with i)
          when (e == i + 1)
            count++;
        
        count == l.Count
      });
      
      test("linq where", () =>
      {
        def l = [1, 2, 3].ToList();
        
        mutable count = 0;
        def seq = l.Where(_ > 2);
        foreach (_ in seq with i)
          when (i == 0)
            count++;
        
        count == 1
      });
      
      test("linq all", () =>
      {
        def l = [1, 3, 5].ToList();
        
        l.All(x => x % 2 == 1);
      });
      
      test("linq take skip", () =>
      {
        def l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].ToList();
        
        mutable count = 0;
        def seq1 = l.Take(5);
        foreach (e in seq1)
          when (e <= 5)
            count++;
        
        def seq2 = l.Skip(9);
        foreach (e in seq2)
          when (e == 10)
            count++;
        
        count == 6
      });
      
      test("linq concat", () =>
      {
        def l1 = [1, 2, 3, 4].ToList();
        def l2 = [5, 6, 7, 8, 9, 10].ToList();
        
        mutable count = 0;
        def seq = l1.Concat(l2);
        foreach (e in seq)
        {
          count++;
          when (e == 10)
            count++;
        }
        
        count == 11
      });
      
      test("linq intersect first last", () =>
      {
        def l1 = [1, 2, 3, 4].ToList();
        def l2 = [5, 6, 1, 2].ToList();
        
        mutable count = 0;
        
        def intersect = l2.Skip(2).Take(2).Intersect(l1.Take(2));
        when (intersect.Count() == 2) count++;
        when (intersect.First() == 1) count++;
        when (intersect.Last() == 2) count++;
        
        count == 3;
      });
      
      test("linq firstOrDefault lastOrDefault empty", () =>
      {
        List([]).FirstOrDefault() == null && List([]).LastOrDefault() == null;
      });
      
      test("linq firstOrDefault lastOrDefault full", () =>
      {
        List([1]).FirstOrDefault() == 1 && List([1]).LastOrDefault() == 1;
      });
      
      test("linq first last", () =>
      {
        mutable res = true;
        def empty = [].ToList();
        try
        {
          _ = empty.First();
          res = false;
        }
        catch
        {
          | _ => ()
        }
        
        try
        {
          _ = empty.Last();
          res = false;
        }
        catch
        {
          | _ => ()
        }
        
        res
      });
      
      test("array index", () =>
      {
        def a = array[1, 2, 3];
        a[0] == 1
      });
      
      //test("regexp exec 1", () =>
      //{
      //  def res = re("pattern").exec("pattern");
      //  res[0] == "pattern"
      //});
      
      //test("regexp exec 2", () =>
      //{
      //  def res = re("pattern", "i").exec("pattern");
      //  res[0] == "pattern"
      //});
      
      test("regexp test", () =>
      {
        re("pattern").test("pattern")
      });
      
      test("regexp compile 1", () =>
      {
        def pat = re("pattern");
        pat.compile();
        pat.test("pattern")
      });
      
      test("regexp compile 2", () =>
      {
        def pat = re("something");
        pat.compile("pattern");
        pat.test("pattern")
      });
      
      test("regexp compile 3", () =>
      {
        def pat = re("something");
        pat.compile("pattern", "i");
        pat.test("PATTERN")
      });
    }
    
    [Html]
    public View() : string
    {
      <#
        <table class="jsast-tests">
          <tbody>
            <tr $foreach(r in Results) css-failed='$(r[1] == false)'>
              <td>$(r[0])</td>
              <td>$(r[1])</td>
            </tr>
          </tbody>
        </table>
      #>
    }
    
    class Dummy 
    {
      public DummyInt : int { get; set; }
      public mutable DummyField : string = "Passed"; 
      public DummyProp : string
      {
        get
        {
          if(true)
            "Passed"
          else 
            "Failed"
        }
      }
    }
    
    [Unit]
    variant DummyVariant
    {
      | Case1 { A : string }
      | Case2 { B : int }
      | Case3 { C : bool }
      
      public D : bool = true;
    }
  }
}
