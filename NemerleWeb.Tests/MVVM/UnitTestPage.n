using NemerleWeb;
using Nemerle.Extensions;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Globalization;
using Nemerle;
using Nemerle.Utility;

using Nemerle.Peg;
using NemerleWeb.Tests.Macro;

namespace NemerleWeb.Tests
{
  [Unit]
  public class UnitTestPage
  {
    Results : List[(string * bool)] { get; set; }
    
    [Unit]
    class SomeDisposable : IDisposable
    {
      public Dispose() : void
      {
        _ = "Do something";
      }
    }
    
    [Unit, Record]
    class TestCast
    {
      public I : int { get; set; }
      
      public static @:(i : int) : TestCast
      {
        TestCast(i)
      }
      
      public static @:>(i : long) : TestCast
      {
        TestCast(i :> int)
      }
    }
    
    [Unit, AddSomeMembers]
    class MembersFromMacro
    {
      public this()
      {
        this._intVariable = 10;
      }
    }
    
    [Unit]
    class SimpleGenericClass[T]
    {
      public F() : bool { true }
    }
    
    // TODO: #38
    //[Unit]
    //class GenericClass
    //{
    //  public F() : bool { true }
      
    //  public G[U]() : bool { true }
    //}
    
    //[Unit]
    //class GenericClass[T] 
    //{
    //  public F() : bool { true }
      
    //  public G[U]() : bool { true }
    //}
    
    //[Unit]
    //class GenericClass[T1, T2] 
    //{
    //  public F() : bool { true }
      
    //  public G[U]() : bool { true }
    //}
    
    [Unit]
    class BaseClass : Exception
    {
      public S : string;
      
      public this(s : string)
      {
        base(""); // This should not be translated to JS
        this.S = s;
      }
    }
    
    [Unit]
    class DerivedClass : BaseClass 
    {
      public this(s : string)
      {
        base(s);
      }
    }
    
    [Unit]
    class ClassWithConstructors
    {
      public this() { }
      // TODO: #37  
      //public this(_ : int) { }
    }
    
    /*
    [Unit]
    class SomeException : Exception
    {
      public override Message : string
      {
        get
        {
          "Some message"
        }
      }
    }
    */
    
    enum SampleEnum
    {
    | _A = 1
    | B = 2
    }
    
    enum SampleEnumWithType : byte
    {
    | A = 1
    | _B = 2
    }
    
    [Unit]
    class Dummy
    {
      public InstancePropGetSet : int { get; set; }      
      private mutable fieldInstancePropGetSetBody : int;
      public InstancePropGetSetBody : int { get { fieldInstancePropGetSetBody } set { fieldInstancePropGetSetBody = value + 1 } }
      public mutable InstanceField : string;
      public mutable InstanceFieldWithInit : string = "Passed"; 
      public InstancePropGet : string
      {
        get
        {
          if(true)
            "Passed"
          else 
            "Failed"
        }
      }
      public InstancePropGetOnly : string { get; }
      
      public static StaticPropGetSet : int { get; set; }
      private static mutable fieldStaticPropGetSetBody : int;
      public static StaticPropGetSetBody : int { get { fieldStaticPropGetSetBody } set { fieldStaticPropGetSetBody = value + 1 } }
      public static mutable StaticField : string;
      public static mutable StaticFieldWithInit : string = "Passed"; 
      public static StaticPropGet : string
      {
        get
        {
          if(true)
            "Passed"
          else 
            "Failed"
        }
      }
      
      public this()
      {
        InstancePropGetOnly = "Instance";
      }
    }
    
    [Unit]
    class InitializerTest
    {
      public ListInit : list[int] = [1, 2, 3];
      public TupleInit : int * string * double = (1, "a", 2.0);
      
      public IntInit : int = 10;
      public DoubleInit : double = 20.0;
      public StringInit : string = "x";
    }
    
    [Unit]
    variant DummyVariant
    {
      | Case1 { A : string }
      | Case2 { B : int }
      | Case3 { C : bool }
      
      public D : bool = true;
    }
    
    [Unit]
    class TestRefOut
    {
      public InstanceRef(s : ref string) : string
      {
        InstanceDoRef(ref s);
        s + "b"
      }
      
      public InstanceRef2(s : ref string, s2 : ref string) : string
      {
        InstanceDoRef(ref s);
        InstanceDoRef(ref s2);
        s + "b"
      }
      
      private InstanceDoRef(s : ref string) : void
      {
        s = "a";
      }
      
      public InstanceOut(x : out int) : int
      {
        InstanceDoOut(out x);
        x + 1
      }
      
      private InstanceDoOut(x : out int) : void
      {
        x = 1;
      }
  
      public static StaticRef(s : ref string) : string
      {
        StaticDoRef(ref s);
        s + "b"
      }
      
      private static StaticDoRef(s : ref string) : void
      {
        s = "a";
      }
      
      public static StaticOut(x : out int) : int
      {
        StaticDoOut(out x);
        x + 1
      }
      
      private static StaticDoOut(x : out int) : void
      {
        x = 1;
      }
    }

    [Unit]
    class TestToString
    {
      public override ToString() : string
      {
        "X"
      }
    }
    
    [Unit]
    variant VariantWithListTuple
    {
      | A { X : list[B * string]; }
      | B { Y : int; }
    }
    
    [Unit]
    module StringBuilderTest
    {
      public F(sb : StringBuilder) : void
      {
        _ = sb.Append("abc");
      }
    }
    
    [Unit]
    class MethodOverloadTest
    {      
      public F(_ : int, _ : string) : int { 2 }
      public F() : int { F(1, "") - 2 }
      public F(_ : int) : int { F(1, "") - 1 }
      
      public static G(_ : string) : int { 1 }
      public static G() : int { G("") - 1 }
      public static G(_ : string, _ : double) : int { G("") + 1 }
      
      public H(_ : int, _ : string) : int { 2 }
      
      public static Call(m : MethodOverloadTest) : int
      {
        m.F()
      }
    }
    
    // TODO: #53
    [Unit]
    abstract class AbstractBase
    {
      public this()
      {
        X = F() + G() + I + J;
      }
            
      F() : int { 1 }      
      static G() : int { 2 }
      
      I : int = 10;
      J : int = 20;
      
      public X : int;
    }
    
    [Unit]
    class NonAbstractDerived : AbstractBase
    {
      public this()
      {
        base();
        Y = Q() + W() + U + V;
      }
            
      Q() : int { 2 }      
      static W() : int { 4 }
      
      U : int = 20;
      V : int = 40;
      
      public Y : int;
    }
    
    [Unit]
    class ConstructorsOverload
    {
      public A : string;
      public B : int;
      
      public this()
      {
        this("a", 1)
      }
      
      public this(a : int)
      {
        this("int", a)
      }
      
      public this(a : string)
      {
        this(a, 10)
      }
      
      public this(a : string, b : int)
      {
        A = a;
        B = b;
      }
    }
    
    [Unit]
    class Located
    {
      [Accessor] location : int;
      
      public this()
      {
        this(0)
      }
      
      public this(location : int)
      {
        this.location = location;
      }
    }
    
    [Unit]
    [Record]
    variant RecordVariant
    {
      | A
      | B
      
      [Accessor] token : string;
    }
    
    public this()
    {
      def test(description, res)
      {
        Results.Add((description, res()));
      }
      Results = [].ToList();
      
      test("simple", () =>
      {
        true
      });
      
      test("simple negative", () =>
      {
        !false
      });
      
      test("simple double negative", () =>
      {
        ! !true
      });
      
      test("simple triple negative", () =>
      {
        ! ! !false
      });
      
      test("if(true) p else f", () =>
      {
        if(true)
          true
        else
          false
      });
      
      test("if(false) f else p", () =>
      {
        if(false)
          false
        else
          true
      });
      
      test("ctor().field", () =>
      {
        _ = Dummy().InstanceField;
        true
      });
      
      test("ctor().prop with if/else inside", () =>
      {
        _ = Dummy().InstancePropGet;
        true
      });
      
      test("tuple expansion def (a, b, c) = tuple", () =>
      {
        def tuple = ("Failed", true, 0);
        def (_a, b, _c) = tuple;
        b;
      });
      
      test("property++", () =>
      {
        def d = Dummy();
        d.InstancePropGetSet++;
        
        d.InstancePropGetSet == 1
      });
      
      test("field without initialization", () =>
      {
        def d = Dummy();
        d.InstanceField == null && Dummy.StaticField == null
      });
      
      test("field with initialization", () =>
      {
        def d = Dummy();
        d.InstanceFieldWithInit == "Passed" && Dummy.StaticFieldWithInit == "Passed"
      });
      
      test("property get/set", () =>
      {
        def d = Dummy();
        def f()
        {
          d.InstancePropGetSet = 1;
          Dummy.StaticPropGetSet = 2;
          
          d.InstancePropGetSet -1 == 0 && Dummy.StaticPropGetSet - 2 == 0
        }
        
        d.InstancePropGetSet == 0 && Dummy.StaticPropGetSet == 0 && f()
      });
      
      test("property get/set body", () =>
      {
        def d = Dummy();
        def f()
        {
          d.InstancePropGetSetBody = 1;
          Dummy.StaticPropGetSetBody = 2;
          
          d.InstancePropGetSetBody - 2 == 0 && Dummy.StaticPropGetSetBody - 3 == 0
        }
        
        d.InstancePropGetSetBody == 0 && Dummy.StaticPropGetSetBody == 0 && f()
      });
      
      test("property get only", () =>
      {
        def d = Dummy();
        d.InstancePropGetOnly == "Instance"
      });
      
      test("when", () =>
      {
        when(true)
          _ = ();
        
        true
      });
      
      test("for when", () =>
      {
        for(mutable i = 0; i != 1; i++)
          when(true)
            _ = ();
        
        true
      });
      
      test("for when variable", () =>
      {
        mutable res = false;
        
        for(mutable i = 0; i != 1; i++)
          when(true)
            res = true;
        
        res
      });
      
      test("nested if else", () =>
      {
        mutable i = 0;
        
        if(i == 0)
        {
          i++;
          
          if(i == 2)
            false
          else
            if(i == 1)
              true
            else
              false
        }
        else
          if(i != 10)
            false
          else
            true
      });
      
      test("casting", () =>
      {
        def x = 1;
        
        def y : TestCast = x;
        def z = 1l :> TestCast;
        
        y.I == z.I
      });
      
      test("list initialization", () =>
      {
        def l1 = List([1, 2, 3]);
        def l2 = [1, 2, 3].ToList();        
        def l3 = List() <- [1, 2, 3];
        
        mutable count = 0;
                
        for(mutable i = 0; i < l1.Count; i++)
          when(l1[i] == l2[i] && l1[i] == l3[i])
            count++;
            
        count == l1.Count
      });
      
      test("string concat 1", () =>
      {
        "ab" == string.Concat("a", "b")
      });
      
      test("string concat 2", () =>
      {
        def a = "a";
        def b = "b";
        "ab" == a + b
      });
      
      test("string concat 3", () =>
      {
        def a = "a";
        def b = "b";
        def c = "c";
        "abc" == a + b + c
      });
      
      test("string concat 4", () =>
      {
        def a = "a";
        def b = "b";
        def c = "c";
        def d = "d";
        "abcd" == a + b + c + d
      });
      
      test("string concat 5", () =>
      {
        def a = "a";
        def b = "b";
        def c = "c";
        def d = "d";
        "abcdabcdabcd" == a + b + c + d + a + b + c + d + a + b + c + d
      });
      
      test("string concat 6", () =>
      {
        "abc" == string.Concat("a", string.Concat("b", string.Concat("c")))
      });
      
      test("string concat 7", () =>
      {
        def l = ["a", "b", "c"].ToList();
        "abc" == string.Concat(l);
      });
      
      test("string concat 8", () =>
      {
        def l = [1, 2, 3].ToList();
        "123" == string.Concat(l);
      });
      
      test("string concat 9", () =>
      {
        "12" == string.Concat(1, string.Concat(2))
      });
      
      test("string concat 10", () =>
      {
        "1" == string.Concat(1)
      });
      
      test("string concat 11", () =>
      {
        "123" == string.Concat(1, 2, 3)
      });
      
      test("using", () =>
      {
        using (s = SomeDisposable())
        {
          _ = "Do something";
        }
        
        true
      });
      
      test("try finally", () =>
      {
        try
        {
          true
        }
        finally
        {
        }
      });
      
      test("variant", () =>
      {
        def v = DummyVariant.Case3(false) : DummyVariant;
        match(v)
        {
        | Case1 => false
        | Case2 => false
        | Case3(val) => val == false
        }
      });
      
      test("variable in variant", () =>
      {
        def v = DummyVariant.Case1("");
        v.D
      });
      
      test("multiple assign", () =>
      {
        def (a, b) = (1, 2);
        
        a < b
      });
      
      test("foreach", () =>
      {
        def l = [1, 2, 3].ToList();
        
        mutable count = 0;
        mutable i = 0;
        foreach (e in l)
        {
          when (e == i + 1)
            count++;
          i++;
        }
        
        count == l.Count
      });
      
      test("foreach with", () =>
      {
        def l = [1, 2, 3].ToList();
        
        mutable count = 0;
        foreach (e in l with i)
          when (e == i + 1)
            count++;
        
        count == l.Count;
      });
            
      test("linq select", () =>
      {
        def l = [1, 2, 3].ToList();
        
        mutable count = 0;
        def seq = l.Select(x => x);
        foreach (e in seq with i)
          when (e == i + 1)
            count++;
        
        count == l.Count
      });
      
      test("linq where", () =>
      {
        def l = [1, 2, 3].ToList();
        
        mutable count = 0;
        def seq = l.Where(_ > 2);
        foreach (_ in seq with i)
          when (i == 0)
            count++;
        
        count == 1
      });
      
      test("linq all", () =>
      {
        def l = [1, 3, 5].ToList();
        
        l.All(x => x % 2 == 1);
      });
      
      test("linq take skip", () =>
      {
        def l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].ToList();
        
        mutable count = 0;
        def seq1 = l.Take(5);
        foreach (e in seq1)
          when (e <= 5)
            count++;
        
        def seq2 = l.Skip(9);
        foreach (e in seq2)
          when (e == 10)
            count++;
        
        count == 6
      });
      
      test("linq concat", () =>
      {
        def l1 = [1, 2, 3, 4].ToList();
        def l2 = [5, 6, 7, 8, 9, 10].ToList();
        
        mutable count = 0;
        def seq = l1.Concat(l2);
        foreach (e in seq)
        {
          count++;
          when (e == 10)
            count++;
        }
        
        count == 11
      });
      
      test("linq intersect first last", () =>
      {
        def l1 = [1, 2, 3, 4].ToList();
        def l2 = [5, 6, 1, 2].ToList();
        
        mutable count = 0;
        
        def intersect = l2.Skip(2).Take(2).Intersect(l1.Take(2));
        when (intersect.Count() == 2) count++;
        when (intersect.First() == 1) count++;
        when (intersect.Last() == 2) count++;
        
        count == 3;
      });
      
      test("linq firstOrDefault lastOrDefault empty", () =>
      {
        List([]).FirstOrDefault() == null && List([]).LastOrDefault() == null;
      });
      
      test("linq firstOrDefault lastOrDefault full", () =>
      {
        List([1]).FirstOrDefault() == 1 && List([1]).LastOrDefault() == 1;
      });
      
      test("linq first last", () =>
      {
        mutable res = true;
        def empty = [].ToList();
        try
        {
          _ = empty.First();
          res = false;
        }
        catch
        {
          | _ => ()
        }
        
        try
        {
          _ = empty.Last();
          res = false;
        }
        catch
        {
          | _ => ()
        }
        
        res
      });
      
      test("array index", () =>
      {
        def a = array[1, 2, 3];
        a[0] == 1
      });
      
      // TODO: Fix this
      //test("regexp exec 1", () =>
      //{
      //  def res = re("pattern").exec("pattern");
      //  res[0] == "pattern"
      //});
      
      //test("regexp exec 2", () =>
      //{
      //  def res = re("pattern", "i").exec("pattern");
      //  res[0] == "pattern"
      //});
      
      test("regexp test", () =>
      {
        RegExp("pattern").test("pattern")
      });
      
      test("regexp compile 1", () =>
      {
        def pat = RegExp("pattern");
        pat.compile();
        pat.test("pattern")
      });
      
      test("regexp compile 2", () =>
      {
        def pat = RegExp("something");
        pat.compile("pattern");
        pat.test("pattern")
      });
      
      test("regexp compile 3", () =>
      {
        def pat = RegExp("something");
        pat.compile("pattern", "i");
        pat.test("PATTERN")
      });
      
      test("regexp exec 1", () =>
      {
        def pat = RegExp(".+");        
        def result = pat.exec("hello world");
        result.Length == 1 && result[0] == "hello world"
      });
      
      test("regexp exec 2", () =>
      {
        def pat = RegExp(".+(el{2}).+");        
        def result = pat.exec("hello world");
        result.Length == 2 
        && result[0] == "hello world"
        && result[1] == "ell"
      });
            
      test("string substring 1", () =>
      {
        "abc".Substring(0, 1) == "a"
      });
      
      test("string substring 2", () =>
      {
        "abc".Substring(2) == "c"
      });
      
      test("list clear", () =>
      {
        def l = List([1, 2, 3]);
        l.Clear();
        l.Count == 0
      });
      
      test("members from macro", () =>
      {
        def m = MembersFromMacro();
        m.IntVariable == 10
      });
      
      test("int Parse", () =>
      {
        int.Parse("1020") == 1020
      });
      
      test("option 1", () =>
      {
        def a = Some(1);
        a.HasValue && a.Value == 1
      });
      
      test("option 2", () =>
      {
        def a = None();
        !a.HasValue && a.IsNone
      });
      
      test("option 3", () =>
      {
        def a : option[int] = Some(1);
        a.HasValue && a.Value == 1
      });
      
      test("option 4", () =>
      {
        def a : option[string] = None();
        !a.HasValue && a.IsNone
      });
      
      test("option 3 with matching", () =>
      {
        def a = Some("a") : option[string];
        match(a)
        {
        | Some(val) => val == "a"
        | _ => false
        }
      });
      
      test("option 4 with matching", () =>
      {
        def a = None() : option[string];
        match(a)
        {
        | Some(_) => false
        | _ => true
        }
      });
      
       test("option some withdefault", () =>
       {
         def a : option[string] = Some("a");
         def a2 = Some("a");
         
         a.WithDefault("b") == "a" && a2.WithDefault("b") == "a"
       });
       
       test("option none withdefault", () =>
       {
         def a : option[string] = None();
         def a2 = None();
         
         a.WithDefault("b") == "b" && a2.WithDefault("b") == "b"
       });
      
      test("simple generic class", () =>
      {
        def x = SimpleGenericClass.[int]();
        x.F();
      });
      
      // TODO: #38
      //test("generic class", () =>
      //{
      //  def g1 = GenericClass();
      //  def g2 = GenericClass.[int]();
      //  def g3 = GenericClass.[int, double]();
        
      //  g1.F() && g1.G.[int]() &&
      //  g2.F() && g2.G.[int]() &&
      //  g3.F() && g3.G.[int]();
      //});
      
      test("math 1", () =>
      {
        Math.Min(1, 2) == 1
      });
      
      test("math 2", () =>
      {
        Math.Max(1, 2) == 2
      });
      
      test("enum 1", () =>
      {
        def x = SampleEnum.B;
        x == SampleEnum.B
      });
      
      test("enum 2", () =>
      {
        def x = SampleEnumWithType.A;
        x == SampleEnumWithType.A
      });
      
      test("complex goto 1", () =>
      {
        def a = 1;
        match(a) 
        {
        | 1
        | 2
        | 3 => true
        | _ => false
        }
      });
      
      test("complex goto 2", () =>
      {
        def a = 1;
        match(a) 
        {
        | 3 => false
        | 2
        | 1 => 
          match(a + 1)
          {
          | 1 => false
          | 3
          | 2 => true
          | _ => false
          }
        | _ => false
        }
      });
      
      test("initialization with local function in block", () =>
      {
        def var1 = 
        {
         (res : 
          {
            def rep(p)
            {
              if (p >= 10)
              {
                rep(p - 1)
              }
              else
                if (p < 0) -1 else 1
            }
            rep(5)
          })
        };
        
        var1 == 1
      });
      
      test("complex local function with block", () =>
      {
        mutable posStart = -1;
        mutable posEnd = -1;
        mutable __GENERATED_PEG__Memeoize_Res__start__= -1;
        mutable __GENERATED_PEG__MaxRollback___start__= -1;
        mutable result = -1;
        mutable pos = 0;
        
        mutable token_1;
        def f()
        {
          if (posStart == pos) 
          {
            when (posEnd >= 0) result = __GENERATED_PEG__Memeoize_Res__start__;
            posEnd
          }; else 
          {
            def newPosCompileRuleCaptureHandler = 
            {
              def newPosCompileRuleCaptureChars = 
              {
                (res : 
                {
                  {
                    def rep (count, pos)  
                    {
                      def newPosCompileRuleRepeatMin = 
                      {
                        _  = "num";
                        //__GENERATED_PEG__RULE__num__(pos, text)
                        2 - count
                      };
                      if (newPosCompileRuleRepeatMin >= 0) 
                      {
                        ();
                        rep(count + 1, newPosCompileRuleRepeatMin)
                      }; else if (count >= 1) pos + 1; else -1
                    };
                    rep(0, pos)
                  }
                })
              };
              when (newPosCompileRuleCaptureChars >= 0) token_1 = (pos, newPosCompileRuleCaptureChars);
              newPosCompileRuleCaptureChars
            };
            posStart = pos;
            posEnd = newPosCompileRuleCaptureHandler;
            if (newPosCompileRuleCaptureHandler >= 0) 
            {
              result = 1; //start(token_1);
              ();
              __GENERATED_PEG__Memeoize_Res__start__ = result
            }; else when (__GENERATED_PEG__MaxRollback___start__ < pos) __GENERATED_PEG__MaxRollback___start__ = pos;
            newPosCompileRuleCaptureHandler
          }
        }
        
        f() == 1
      });
      
      test("decimal", () =>
      {
        def a = 1m;
        a == 1 && a :> int == 1
      });
      
      test("StringBuilder Append", () =>
      {
        def l : object = 2;
        def t = TestToString();
        
        def sb = StringBuilder();
        _ = sb.Append("a");
        _ = sb.Append(1);
        _ = sb.Append('x');
        _ = sb.Append(l);
        _ = sb.Append(t);
        
        sb.ToString() == "a1x2X";
      });
      
      test("StringBuilder Append2", () =>
      {
        def sb = StringBuilder();
        sb.Append("a").Append(1).Append('x').ToString() == "a1x"
      });
      
      test("StringBuilder AppendLine", () =>
      {
        def sb = StringBuilder();
        _ = sb.AppendLine("a");
        _ = sb.AppendLine();
        
        sb.ToString() == "a\n\n";
      });
      
      test("StringBuilder AppendLine2", () =>
      {
        def sb = StringBuilder();
        sb.AppendLine("a").AppendLine().ToString() == "a\n\n";
      });
      
      test("StringBuilder set_Length decrease", () =>
      {
        def sb = StringBuilder();
        
        _ = sb.Append("ab");
        sb.Length--;        

        sb.Length == 1;
      });
      
      // TODO: Increasing length
      //test("StringBuilder set_Length increase", () =>
      //{
      //  def sb = StringBuilder();
      //  sb.Length = 10;

      //  sb.Length == 10;
      //});
      
      test("StringBuilder function param", () =>
      {
        def sb = StringBuilder();
        StringBuilderTest.F(sb);
        
        sb.ToString() == "abc"
      });
      
      test("ToString", () =>
      {
        1.ToString() == "1" &&
        'a'.ToString() == "a" &&
        "a".ToString() == "a" &&
        1.1.ToString() == "1.1"
      });
      
      test("ToString with culture", () =>
      {
        1.ToString(CultureInfo.CreateSpecificCulture("en-US")) == "1" &&
        'a'.ToString(CultureInfo.CreateSpecificCulture("en-US")) == "a" &&
        "a".ToString(CultureInfo.CreateSpecificCulture("en-US")) == "a" &&
        1.1.ToString(CultureInfo.CreateSpecificCulture("en-US")) == "1.1"
      });
      
      test("CultureInfo", () =>
      {
        _ = CultureInfo.CreateSpecificCulture("").NumberFormat;
        true
      });
      
      test("String Enumerator", () =>
      {
        def a = "aba";
        def e = a.GetEnumerator();
        mutable count = 0;
        while (e.MoveNext())
        {
          when (e.Current == 'a') count++;
        }
        
        count == 2
      });
      
      test("Call with non assignable parameter 1", () =>
      {
        def sb = StringBuilder();        
        _ = sb.Append(if(true) "" else "");
        
        true
      });
      
      test("Call with non assignable parameter 2", () =>
      {
        _ = string.Concat(if(true) "" else "", if(false) "" else "");
        true
      });
      
      test("out", () =>
      {
        mutable x;
        def outRes = TestRefOut().InstanceOut(out x);
        
        mutable x2;
        def outRes2 = TestRefOut.StaticOut(out x2);
        
        x == 1 && outRes == 2 &&
        x2 == 1 && outRes2 == 2
      });
      
      test("ref", () =>
      {
        mutable s = "x";
        def refRes = TestRefOut().InstanceRef(ref s);
        
        mutable s2 = "x";
        def refRes2 = TestRefOut.StaticRef(ref s2);
        
        s == "a" && refRes == "ab" &&
        s2 == "a" && refRes2 == "ab"
      });
      
      test("ref 2 params", () =>
      {
        mutable s1 = "x";
        mutable s2 = "y";
        def refRes = TestRefOut().InstanceRef2(ref s1, ref s2);
        
        s1 == "a" && 
        s2 == "a" &&
        refRes == "ab"
      });
      
      test("ref with return", () =>
      {
        mutable a;
        def t(p)
        {
          if (p > 0) TestRefOut.StaticOut(out a);
          else -1
        }
        
        t(1) == 2 && a == 1
      });
      
      test("StringBuilder chain", () =>
      {
        def sb = StringBuilder();
        _ = sb.Append("A").Append("B").Append("C");
        sb.ToString() == "ABC";
      });
      
      test("mutliple variables same name 1", () =>
      {
        def g(pos, x) { pos - x }
        def h(pos, x) { pos + x }
        
        def f(pos : int)
        {
          def pos = g(pos, 1);
          if (pos >= 0)
          {
            def pos = h(pos, 2);
            if (pos >= 0)
              pos
            else
              -1
          }
          else
            -1
        }
        
        f(2) == 3
      });
      
      test("mutliple variables same name 2", () =>
      {
        def f(pos : int)
        {
          def pos =
          {
            def pos = 
            {
              def f(pos)
              {
                def g(pos)
                {
                  pos + 2
                }

                g(pos + 3)
              }

              f(pos)
            }

            if (pos > 0)
              pos + 1
            else
            {
              def h(pos)
              {
                pos + 1
              }

              h(pos)
            }
          }
          
          pos
        }
        
        f(1) == 7
      });
      
      test("list MapToArray", () =>
      {
        def x = [1, 2, 3];
        def arr = x.MapToArray(p => p * 2);
        
        arr[0] == 2 && arr[1] == 4 && arr[2] == 6
      });
      
      test("NemerleNCollectionsExtensions MapToArray", () =>
      {
        def x = [1, 2, 3];
        def arr = Nemerle.Collections.NCollectionsExtensions.MapToArray(x, p => p * 2);
        
        arr[0] == 2 && arr[1] == 4 && arr[2] == 6
      });
      
      test("String Join", () =>
      {
        string.Join(" ", [1, 2, 3]) == "1 2 3"        
      });
      
      test("String from array", () =>
      {
        def a = array['a', 'b' ,'c'];
        def b = String(a);
        
        b == "abc"
      });
      
      test("Member ToString", () =>
      {
        def t = TestToString();
        t.ToString() == "X"
      });
      
      test("Variant with list tuple", () =>
      {
        def f(a)
        {
          match (a)
          {
          | VariantWithListTuple.A(l) =>
            mutable count;
            foreach (i in l)
              count += f(i[0]);
            count
          | VariantWithListTuple.B => 1
          }
        }
        
        def a = VariantWithListTuple.A([(VariantWithListTuple.B(1), "A"), (VariantWithListTuple.B(2), "B")]);
        f(a) == 2
      });
      
      test("default values", () =>
      {
        mutable i;
        i = i + 1;
        mutable d;
        d = 0.0f;
        mutable s;
        s += "";
        mutable b;
        b = b && false;
        
        i == 1 && d == 0.0f && s == "" && b == false
      });
      
      test("list append", () =>
      {
        mutable lst = 2 :: 1 :: [];
        lst ::= 3;
        lst ::= 4;
        
        lst.Equals([4, 3, 2, 1])
      });
      
      test("Tuple indexer", () =>
      {
        def tpl = (1, "a", 2.0);
        
        tpl[0] == 1 && tpl[1] == "a" && tpl[2] == 2.0
      });
      
      test("Method overload", () =>
      {
        MethodOverloadTest().F() == 0 &&
        MethodOverloadTest().F(1) == 1 &&
        MethodOverloadTest().F(2, "") == 2 &&        
        MethodOverloadTest.G() == 0 &&
        MethodOverloadTest.G("") == 1 &&
        MethodOverloadTest.G("", 0) == 2 &&
        MethodOverloadTest().H(1, "") == 2 &&
        MethodOverloadTest.Call(MethodOverloadTest()) == 0
      });
      
      test("Initializers", () =>
      {
        InitializerTest().ListInit is [1, 2, 3] && 
        InitializerTest().TupleInit is (1, "a", 2.0) &&
        InitializerTest().IntInit == 10 &&
        InitializerTest().DoubleInit == 20.0 &&
        InitializerTest().StringInit == "x"
      });
      
      test("Call base constructor", () =>
      {
        def d = DerivedClass("x");
        d.S == "x"
      });
      
      test("Use fields and methods from constructor", () =>
      {
        // TODO: #53
        //NonAbstractDerived().X == 33 && NonAbstractDerived().Y == 66
        true
      });
      
      test("Constructors overload", () =>
      {
        ConstructorsOverload().A == "a" && ConstructorsOverload().B == 1 &&
        ConstructorsOverload(2).A == "int" && ConstructorsOverload(2).B == 2 &&
        ConstructorsOverload("x").A == "x" && ConstructorsOverload("x").B == 10 &&
        ConstructorsOverload("y", 3).A == "y" && ConstructorsOverload("y", 3).B == 3
      });
      
      test("Record variant", () =>
      {
        def m = RecordVariant.A("X") : RecordVariant;
        match(m)
        {
        | r is RecordVariant.A when r.Token == "X" => true
        | _ => false
        }
      });
      
      test("Splice string with quotes", () =>
      {
        def startPos = 1;
        def endPos = 2;
        
        $<#"Start: $startPos Len: $(endPos - startPos)"#> == "\"Start: 1 Len: 1\""
      });
    }    
    
    [Html]
    public View() : string
    {
      <#
        <table class="jsast-tests">
          <tbody>
            <tr $foreach(r in Results) css-succeeded='$(r[1].ToString() == "true")'>
              <td>$(r[0])</td>
              <td>$(r[1])</td>
            </tr>
          </tbody>
        </table>
      #>
    }
  }
  
  [JsApi]
  public class RegExp
  {
    public this(_pattern : string) 
    {}
      
    public compile() : void
    {}
    
    public compile(_pattern : string) : void
    {}
    
    public compile(_pattern : string, _modifier : string) : void
    {}
    
    public exec(_input : string) : array[string]
    {[].ToArray()}
    
    public test(_input : string) : bool
    {false}
  }
}
