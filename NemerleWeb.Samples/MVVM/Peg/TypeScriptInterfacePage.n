using NemerleWeb;
using Nemerle.Extensions;
using System;
using System.Collections.Generic;
using System.Linq;
using TS = TypeScriptInterfaceSample;

namespace NemerleWeb.Samples
{
  [Unit]
  public class TypeScriptInterfacePage
  {
    _parser : TS.TypeScriptInterfaceParser = TS.TypeScriptInterfaceParser();
         
    ParserOutput : string
    {
      get
      {
        if (!string.IsNullOrEmpty(ParserInput))
          if (_parser.Parse(ParserInput) is Some(res))
            PrintTSAst(res)
          else
            "Incorrect input"
        else
          "";
      }
    }
     
    public ParserInput : string { get; set; }
    
    PrintTSAst(interfaces : list[TS.TypeScriptGlobalDeclaration]) : string
    {
      def printParam(p)
      {
        $"Name: $(p.Name), Type: $(printType(p.Type)), IsOptional: $(p.IsOptional), IsParams: $(p.IsParams)"
      }
      and printParams(p)
      {
        $<#..$(p; "\n"; printParam)#>
      }      
      and printType(type)
      {
        | null => "null"
        | t is TS.TypeScriptType.Object => $"[Object] Parms: $(printParams(t.Parms))"
        | t is TS.TypeScriptType.Dictionary => $"[Dictionary] Key: $(t.Key), Value: $(t.Value)"
        | t is TS.TypeScriptType.Array => $"[Array] Type: $(printType(t.Type))"
        | t is TS.TypeScriptType.Lambda => $"[Lambda] $(printMaybeParams(t.Parms)), ReturnType : $(printType(t.ReturnType))"
        | t is TS.TypeScriptType.Normal => $"[Normal] Name: $(t.Name)"
      }      
      and printMaybeParams(p)
      {
        | None => ""
        | Some(parms) => $"Params: $(printParams(parms))"
      }
      
      def printMember(member)
      {
        | m is TS.TypeScriptMember.Property => $<#"[Property] Name: $(m.Name), Type: $(printType(m.Type))$(if(m.IsNullable) "?" else "")#>
        //| m is TS.TypeScriptMember.PropertType => $<#"[Property] Name: $(m.Name)$(if(m.IsNullable) "?" else ""), Members: $(printMembers(m.Members))#>
        | m is TS.TypeScriptMember.Method   => $<#[Method] Name: $(m.Name), Parms: $(printParams(m.Parms)), Type: $(printType(m.Type))$(if(m.IsNullable) "?" else "")#>
        | m is TS.TypeScriptMember.Call     => $"[Call] $(printMaybeParams(m.Parms))ReturnType: $(printType(m.ReturnType))"
        | m is TS.TypeScriptMember.IndexCall=> $"[IndexCall]  $(printMaybeParams(m.Parms))ReturnType: $(printType(m.ReturnType))"
        | _ => ""
      }
      and printMembers(members)
      {
        $<#Members: ..$(members; "\n\n"; printMember)#>
      }
          
      def print(v)
      {
      | i is TS.TypeScriptGlobalDeclaration.Interface =>
        def ex = if(i.Extend is Some(e)) $"..$e" else "";
                    
        $<#[Interface] Name : $(i.Name)
Extend: $ex
Members: $(printMembers(i.Members))
#>
      | v is TS.TypeScriptGlobalDeclaration.Var =>
        $"[Var] Name: $(v.Name), Members: $(printMembers(v.Members))"
      | v is TS.TypeScriptGlobalDeclaration.VarType =>
        $"[Var] Name: $(v.Name), Type: $(printType(v.Type))"
      | f is TS.TypeScriptGlobalDeclaration.Function =>
        $"[Function] $(printMember(f.Method))"
      }
      
      $<#..$(interfaces; "\n"; print)#>
    }
    
    [Html]
    public View() : string
    {
      <#
        <div>
          <span>This is demonstration of TypeScript interface parser</span><br />
          <div>Input:</div>
          <div class="parser-input">
            <textarea rows="6" cols="50" value="$ParserInput"/>
          </div>
          <div>AST:</div>
          <div class="output">
            <textarea rows="6" cols="50" value="$ParserOutput"/>
          </div>
        </div>
      #>
    }    
  }
}
