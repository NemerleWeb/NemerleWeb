using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Text;
using System.Collections.Generic;
using System.Console;
using System.Linq;
using System.Globalization;

using NemerleWeb;

// TODO: Restore NToString => ToString
// TODO: Restore ToString2 => ToString

namespace Nemerle.Json
{
  [Record, Unit]
  public variant JValue
  {
    | String {value : string}
    | Number {value : double}
    | Bool {value : bool}
    | Null

    public ToString2(sb : StringBuilder) : StringBuilder
    {
      match (this)
      {
        | String(value) => sb.Append('"').Escape(value).Append('"');
        | Number(value) => sb.Append(value.ToString(CultureInfo.CreateSpecificCulture("en-US")));
        | Bool(value) => sb.Append(if (value) "true" else "false");
        | Null => sb.Append("null");
      }
    }

    public NToString() : string
    {
      ToString2(StringBuilder()).ToString()
    }
  }

  // TODO: Restore
  //[Record]
  [Unit]
  public variant JObject
  {
    | Object { items : list[string*JObject]}
    | Array { items : list[JObject]}
    | Value
      {
        value : JValue;

        // TODO: Restore
        //public this()
        //{
        //  value = JValue.Null();
        //}

        //public this(number : double) {value = JValue.Number(number)}
        //public this(str : string) {value = JValue.String(str)}
        //public this(boolean : bool) {value = JValue.Bool(boolean)}
      }

    // TODO: Restore
    //public static Null : JObject = JObject.Value();
      public static Null : JObject = JObject.Value(JValue.Null());
    public static Convert(jobj : JObject) : JObject {jobj}
    //public static Convert(number : double) : JObject {JObject.Value(number);}
    public static Convert(number : double) : JObject {JObject.Value(JValue.Number(number));}
    //public static Convert(str : string) : JObject {JObject.Value(str);}
    public static Convert(str : string) : JObject {JObject.Value(JValue.String(str));}
    //public static Convert(boolean : bool) : JObject {JObject.Value(boolean);}
    public static Convert(boolean : bool) : JObject {JObject.Value(JValue.Bool(boolean));}

    public ToString2(sb : StringBuilder) : StringBuilder
    {
      match (this)
      {
        | Object(items) =>
          _ = sb.Append("{");
          foreach ((name, value) in items)
          {
            _ = sb.Append($<#"$name":#>);
            _ = value.ToString2(sb);
            _ = sb.Append(',');
          }

          when (items.Any()) //remove last comma
            sb.Length --;

          sb.Append("}");

        | Array(items) =>
          _ = sb.Append("[");
          foreach (value in items)
          {
            _ = value.ToString2(sb);
            _ = sb.Append(',');
          }

          when (items.Any()) //remove last comma
            sb.Length --;

          sb.Append("]");
        | Value(value) =>
          value.ToString2(sb);
      }
    }

    public NToString() : string
    {
      ToString2(StringBuilder()).ToString()
    }
  }
}
