using System;
using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Utility;

using Nemerle.Peg;
using NemerleWeb;

namespace JSEngine {

    [Record]
    [Unit]
    public variant Literal /*: Located*/ {
        | Integer {
            value : IntegerLiteral;
        }
        | Float
        | Boolean {
            value : BooleanLiteral;
        }
        | String {
            value : StringLiteral;
        }
        | Null

        public override ToString() : string {
            match(this) {
                | Integer(value)    => value.ToString()
                | Boolean(value)    => value.ToString()
                | String(value)     => value.ToString()
                | Null()            => "null"
                | _ => base.ToString();
            }
        }
    }

    [Record]
    [Unit]
    public variant IntegerLiteral /*: Located*/ {
        | Decimal
        | Hex
        | Octal

        [Accessor] token : string;

        public GetValue() : ulong {
            match(this) {
                | Decimal() => ulong.Parse(token)
                | Hex()     => Convert.ToUInt64(token, 16)
                | Octal()   => Convert.ToUInt64(token, 8)
            }
        }

        public override ToString() : string {
            token
        }
    }

    [Record]
    [Unit]
    public variant BooleanLiteral /*: Located*/ {
        | True
        | False

        public GetValue() : bool {
            match(this) {
                | True()  => true
                | False() => false
            }
        }

        public override ToString() : string {
            match(this) {
                | True()  => "true"
                | False() => "false"
            }
        }
    }

    [Record]
    [Unit]
    public variant StringLiteral /*: Located*/ {
        | SingleQuote
        | DoubleQuote

        [Accessor] token : string;

        public GetValue() : string {
            token
        }

        public override ToString() : string {
            match(this) {
                | SingleQuote() => "'" + token + "'"
                | DoubleQuote() => "\"" + token + "\""
            }
        }
    }

    [Record]
    [Unit]
    public variant Expression /*: Located*/ {
        | Literal {
            value : JSEngine.Literal;
        }
        | This
        | Identifier {
            name : string;
        }
        | Operator {
            name : string;
            kind : OperatorKind;
        }
        | Member {
            expr   : Expression;
            member : Expression;
        }
        | Indexer {
            expr : Expression;
            args : list[Expression];
        }
        | Call {
            expr : Expression;
            args : list[Expression];
        }
        | Assign {
            to      : Expression;
            from    : Expression;
        }
        | Function {
            args : list[string];
            body : Statement.Block;
        }

        public ToString(sb : System.Text.StringBuilder, tab : string, current_tab : string) : void {
            match(this) {
                | Literal(value) =>
                    _ = sb.Append(value);

                | This =>
                    _ = sb.Append("this");

                | Identifier(name) =>
                    _ = sb.Append(name);

                | Function(args, body) =>
                    _ = sb.Append($"function (..$args)");
                    body.ToString(sb, tab, current_tab);

                | Assign(to, from) =>
                    _ = sb.Append(to).Append(" = ").Append(from);

                | Indexer(expr, args) =>
                    expr.ToString(sb, tab, current_tab);
                    _ = sb.Append($"[..$args]");

                | Call(Operator(op, OperatorKind.Infix), [a, b]) =>
                    _ = sb.Append("(");
                    a.ToString(sb, tab, current_tab);
                    _ = sb.Append(" ").Append(op).Append(" ");
                    b.ToString(sb, tab, current_tab);
                    _ = sb.Append(")");

                | Call(Operator(op, OperatorKind.Prefix), [a]) =>
                    _ = sb.Append("(").Append(op);
                    a.ToString(sb, tab, current_tab);
                    _ = sb.Append(")");

                | Call(Operator(op, OperatorKind.Postfix), [a]) =>
                    _ = sb.Append("(");
                    a.ToString(sb, tab, current_tab);
                    _ = sb.Append(op).Append(")");

                | Call(Operator("?:", OperatorKind.Ternary), [q, t, f]) =>
                    _ = sb.Append("(");
                    q.ToString(sb, tab, current_tab);
                    _ = sb.Append(" ? ");
                    t.ToString(sb, tab, current_tab);
                    _ = sb.Append(" : ");
                    f.ToString(sb, tab, current_tab);
                    _ = sb.Append(")");

                | Call(expr, args) =>
                    expr.ToString(sb, tab, current_tab);
                    _ = sb.Append($"(..$args)");

                | Member(expr, member) =>
                    expr.ToString(sb, tab, current_tab);
                    _ = sb.Append(".");
                    member.ToString(sb, tab, current_tab);

                | _ => ()
            }
        }

        public override ToString() : string {
            def sb = System.Text.StringBuilder();
            ToString(sb, "    ", "");
            sb.ToString()
        }
    }

    public enum OperatorKind {
        | Infix
        | Prefix
        | Postfix
        | Ternary
    }

    [Record]
    [Unit]
    public variant Statement /*: Located*/ {
        | Empty
        | Block {
            stmts : list[Statement];
        }
        | Expression {
            expr : JSEngine.Expression;
        }
        | Return {
            value : JSEngine.Expression;
        }
        | VarDecl {
            name : string;
            init : JSEngine.Expression;
        }
        | FunDecl {
            name : string;
            args : list[string];
            body : Statement.Block;
        }

        public ToString(sb : System.Text.StringBuilder, tab : string, current_tab : string) : void {
            match(this) {
                | Empty() =>
                    _ = sb.Append(";");

                | Block(stmts) =>
                    _ = sb.AppendLine().Append(current_tab).Append("{");
                    foreach(stmt in stmts)
                        stmt.ToString(sb, tab, current_tab + tab);
                    _ = sb.AppendLine().Append(current_tab).Append("}");

                | Expression(expr) =>
                    _ = sb.AppendLine().Append(current_tab);
                    expr.ToString(sb, tab, current_tab);
                    _ = sb.Append(";");

                | Return(value) when null != value =>
                    _ = sb.AppendLine().Append(current_tab).Append("return ");
                    value.ToString(sb, tab, current_tab);
                    _ = sb.Append(";");

                | Return(_) =>
                    _ = sb.AppendLine().Append(current_tab).Append("return");

                | VarDecl(name, init) when null != init =>
                    _ = sb.AppendLine().Append(current_tab)
                        .Append("var ")
                        .Append(name)
                        .Append(" = ");
                        init.ToString(sb, tab, current_tab);
                    _ = sb.Append(";");

                | VarDecl(name, _) =>
                    _ = sb.AppendLine().Append(current_tab)
                        .Append("var ")
                        .Append(name)
                        .Append(";");

                | FunDecl(name, args, body) =>
                    _ = sb.AppendLine().Append(current_tab)
                        .Append("function ")
                        .Append(name)
                        .Append($"(..$args)");
                    body.ToString(sb, tab, current_tab);

                | _ => ()
            }
        }

        public override ToString() : string {
            def sb = System.Text.StringBuilder();
            ToString(sb, "    ", "");
            sb.ToString()
        }
    }
}