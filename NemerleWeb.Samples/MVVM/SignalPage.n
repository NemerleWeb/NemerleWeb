using NemerleWeb;
using Nemerle.Extensions;
using System;
using System.Collections.Generic;
using System.Collections.Concurrent;
using System.Linq;
using SignalR.Hubs;
using Nemerle.Late;

namespace NemerleWeb.Samples
{
  [Unit]
  public class SignalPage 
  {
    [Unit, Record]
    public class Message 
    {
      public Name : string;
      public Message : string;
      public Timestamp : string;
    }
    
    Messages : List[Message] { get; set; }
    Name : string { get; set; }
    CurrentMessage : string { get; set; }
    
    public this()
    {
      server.GetLastMessages(messages => {
        foreach(msg in messages)
          AddMessage(msg);
      });
    }
    
    SendMessage() : void
    {
      server.SendMessage(Name, CurrentMessage, _ => {});
      CurrentMessage = "";
    }
  
    AddMessage(message : Message) : void
    {
      Messages.Add(message);
    }
  
    public class Server 
    {      
      public static _lastMessages : ConcurrentQueue[Message] = ConcurrentQueue.[Message]();
      
      public GetLastMessages() : List[Message]
      {
        _lastMessages.ToList()
      }
      
      [SignalR]
      public SendMessage(name : string, message : string) : string
      {
        def msg = Message(if(string.IsNullOrWhiteSpace(name)) "anon" else name, message, DateTime.Now.ToString());
        broadcast client.AddMessage(msg);
        
        _lastMessages.Enqueue(msg);
        when(_lastMessages.Count > 10)
        {
          mutable lastMsg;
          _ = _lastMessages.TryDequeue(out lastMsg);
        }
        "";
      }
    }
  
    [Html]
    public View() : string
    {
      <# 
        <div>
          <h3>Chat using SignalR</h3>
          <p>
            This sample shows how duplex communication works. Zero configuration is required from developer. 
            Just use "signal" or "broadcast" keywords and macro will generate all necessery code for you.
          </p>
          <form>
            <div>Name: <input value="$Name"/></div>
            <div>Message: <input value="$CurrentMessage"/></div>
            <input type="submit" click="$SendMessage" value="Send" />
          </form>
          <table class="chat">
            <tbody>
              <tr $foreach(m in Messages)>
                <td>$(m.Timestamp)</td><td>$(m.Name + ": ")</td><td>$(m.Message)</td>
              </tr>
            </tbody>
          </table>
         </div> 
      #>
    }
  }
}