using System.Collections.Generic;
using System.Linq;
using System.Text;
using Nemerle;
using NemerleWeb;
using System.Collections.Concurrent;

namespace NemerleWeb.Samples
{
  [Unit, Record]  
  class Sample
  {
    public Name : string { get; set; }
    public SourceFiles : list[string] { get; set; }
    public Source : string { get; set; }
    public Instance : Page { get; set; }
  }
  
  [Page]
  class SamplesPage
  {      
    SelectedSample : Sample { get; set; }
    
    Samples : List[Sample] { get; set; }
    KnockoutSamples : List[Sample] { get; set; }
    AllSamples : array[Sample] 
    {
      get
      {
        Samples.Concat(KnockoutSamples).ToArray()
      }
    }
    
    NameList : NameListPage { get; set; }
    NameListCSharp : NameListCSharpPage { get; set; }
    CompList : CompListPage { get; set; }
    Signal : SignalPage { get; set; }
    Variants : VariantsAndMatchingPage { get; set; }    
    Introduction : IntroductionPage { get; set; }
    ListsAndCollections : ListsAndCollectionsPage { get; set; }
    LoadingAndSaving : LoadingAndSavingPage { get; set; }
    SinglePageApps : SPAPage { get; set; }
    
    Sources : List[string * string] { get; set; }
    ThisPageSource : string { get; set; }
        
    public this()
    {
      NameList = NameListPage();
      NameListCSharp = NameListCSharpPage();
      CompList = CompListPage();
      Signal = SignalPage();
      Variants = VariantsAndMatchingPage();
      Introduction = IntroductionPage("John", "Silver");
      ListsAndCollections = ListsAndCollectionsPage();
      LoadingAndSaving = LoadingAndSavingPage();
      SinglePageApps = SPAPage();
            
      Samples = 
      [
        Sample("List of names", ["MVVM/NameListPage.n"], "", NameList),  // in tname template(_.NameList) second parameter is View by default
        Sample("List of names C#", ["MVVM/NameListCSharpPage.cs", "MVVM/NameListCSharpPage.View.n"], "", NameListCSharp), 
        Sample("Computation Expressions", ["MVVM/CompListPage.n"], "", CompList), 
        //Sample("Chat using SignalR", ["MVVM/SignalPage.n"], "", Signal, tname template(_.Signal, _.View)), 
        Sample("Variants and Pattern Matching", ["MVVM/VariantsAndMatchingPage.n"], "", Variants)
      ].ToList();
      
      KnockoutSamples =
      [
        Sample("Introduction", ["MVVM/Knockout/Tutorial_1_Introduction.n"], "", Introduction), 
        Sample("Lists and collections", ["MVVM/Knockout/Tutorial_2_ListsAndCollections.n"], "", ListsAndCollections), 
        Sample ("Single page applications", ["MVVM/Knockout/Tutorial_3_SinglePageApps.n"], "", SinglePageApps), 
        Sample("Loading and saving", ["MVVM/Knockout/Tutorial_5_LoadingAndSaving.n"], "", LoadingAndSaving)
      ].ToList();
                 
      SelectedSample = Samples[2];
            
      LoadSamples(Samples);
      LoadSamples(KnockoutSamples);
            
      server.LoadSourceFor("MVVM/Samples.n", source =>
      {
        ThisPageSource = source;
        js prettyPrint();
      });
    }
    
    LoadSamples(samples : List[Sample]) : void
    {
      for(mutable i = 0; i < samples.Count; i++)      
        LoadSample(samples, i)      
    }
    
    LoadSample(samples : List[Sample], index : int) : void
    {      
      server.LoadSourceForList(samples[index].SourceFiles, source =>
      {          
        samples[index].Source = source;
        js prettyPrint();
      });  
    }
    
    SelectSample(sample : Sample) : void 
    {
      SelectedSample = sample;
      js prettyPrint();
    }
    
    public class Server
    {
      public static _lastMessages : ConcurrentQueue[Sample] = ConcurrentQueue.[Sample]();
      
      public LoadSourceFor(sample : string) : string
      {
        Helpers.LoadSourceFor(sample);
      }
      
      public LoadSourceForList(samples : IEnumerable[string]) : string
      {
        $<#..$(samples; "\n"; Helpers.LoadSourceFor)#>
      }
    }
    
    [Html]
    public View() : string
    {
      <# 
        <div class="container">
          <ul class="samples-menu">
            <li class="header">Samples</li>
            <li $foreach(s in Samples) css-selected="$(SelectedSample.Name == s.Name)"><span click="$SelectSample">$(s.Name)</span></li>
            <li class="split"></li>
            <li class="header">KnockoutJs tutorials</li>
            <li $foreach(s in KnockoutSamples) css-selected="$(SelectedSample.Name == s.Name)"><span click="$SelectSample">$(s.Name)</span></li>
          </ul>
          <div $foreach(s in AllSamples)>
            <div $when(SelectedSample.Name == s.Name) class="current-sample">
              <div template="$(template(s.Instance))"></div>
              <h2>Source</h2>
              <pre class="prettyprint lang-n prettyprinted">$(s.Source)</pre>
            </div>
          </div>
          <h2>Main page source</h2>
          <pre class="prettyprint lang-n prettyprinted">$ThisPageSource</pre>
        </div>
      #>
    }    
  }
}
