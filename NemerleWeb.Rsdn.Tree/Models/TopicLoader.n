using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Extensions;
using Nemerle.Imperative;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Text.RegularExpressions;

using HtmlAgilityPack;
using Newtonsoft.Json;

namespace Rsdn.Tree.Models
{
  module TopicLoader
  {
    public GetTopicList(url : string) : IEnumerable[TopicList.Topic]
    {
      def forum = url.Substring(url.Trim('/').LastIndexOf('/')).Trim('/');

      using(client = WebClient()) {
        client.Encoding = System.Text.Encoding.UTF8;
        def topicsJson = client.DownloadString($"http://www.rsdn.ru/rs/forum/$(forum)/topics");
        def reply = JsonConvert.DeserializeAnonymousType(topicsJson, new ( 
          total = 0,
          topics = array[new (
            answersCount = 0,
            createdOn = "",        
            id = 0,
            authorNick = "",
            lastAnswerBy = "",
            lastUpdatedOn = "",
            topicRate = 0,
            topicRateCount = 0,
            topicAgrees = 0,
            topicDisagrees = 0,
            topicSmiles = 0,
            subject = ""        
        )]));

        def topics = reply.topics;
        
        topics.Select(topic =>
          TopicList.Topic(topic.subject, 
                          if(string.IsNullOrWhiteSpace(topic.authorNick)) "Аноним" else topic.authorNick, 
                          topic.topicRate, 
                          topic.answersCount, 
                          topic.id,
                          topic.lastAnswerBy,
                          FormatDateTime(topic.lastUpdatedOn),
                          FormatDateTime(topic.createdOn),
                          topic.topicAgrees,
                          topic.topicDisagrees,
                          topic.topicSmiles)
        );
      }
    }

    public LoadReplies(id : int) : CommentNode
    {
      def replies = WebClient().DownloadString($"http://www.rsdn.ru/rs/topic/$(id)/replies");
      def meta = JsonConvert.DeserializeAnonymousType(replies, array[new (id = 0)]);
            
      def client = WebClient();
      client.Encoding = System.Text.Encoding.UTF8;
      def json = client.DownloadString($"http://www.rsdn.ru/rs/topic/$(id)/messages?formatted=true&len=$(meta.Length + 1)");
      def replies = JsonConvert.DeserializeAnonymousType(json, array[new ( 
        text = "", 
        id = 0,
        parentId = 0,
        authorNick = "",
        rate = 0,
        rateCount = 0,
        agrees = 0,
        disagrees = 0,
        smiles = 0,
        subject = "",
        createdOn = ""
      )]);        

      def mapById = replies.ToDictionary(r => r.id);
      def mapByParentId = replies.GroupBy(r => r.parentId)
                                 .ToDictionary(g => g.Key, g => g);

      def mapJsonToCommentNode(a, children : List[CommentNode], depth, _isVisible) {
        CommentNode(a.text.Replace(" src=\'/", " src=\'http://www.rsdn.ru/"), 
                    if(string.IsNullOrWhiteSpace(a.authorNick)) "Аноним" else a.authorNick,
                    a.rate,
                    a.rateCount,
                    a.agrees,
                    a.disagrees,
                    a.smiles,
                    a.subject,
                    FormatDateTime(a.createdOn),
                    children, 
                    depth, true)
      }

      def getChildNodeCount(parentNodeId) {
        mutable childNodes;
        if(mapByParentId.TryGetValue(parentNodeId, out childNodes)) childNodes.Count()
        else 0
      }
      
      def getChildNodes(parentNodeId, depth) {
        mutable childNodes;
  
        if(mapByParentId.TryGetValue(parentNodeId, out childNodes)) {
          childNodes.Map(c => mapJsonToCommentNode(c, getChildNodes(c.id, depth + 1).ToList(), depth, getChildNodeCount(parentNodeId) <= 1))
        } else []
      }

      def mainComment = mapJsonToCommentNode(mapById[id], getChildNodes(id, 1).ToList(), 0, true);
      mainComment
    }

    private FormatDateTime(str : string) : string
    {
      str.Substring(5)
         .Substring(0, 11)
         .Replace('-', '.')
         .Replace('T', ' ');
    }
  }
}
