using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Extensions;

using System;
using System.Collections.Generic;
using System.Linq;
using NemerleWeb;
using NemerleWeb.TypedJS;

namespace Rsdn
{    
  [Unit]
  public class Search
  { 
    public SearchResultsForums : TreeNode;
    public SearchResultsArticles : TreeNode;
    public SearchResultsOthers : TreeNode;
        
    mutable _showForums = true;
    mutable _showArticles = false;
    mutable _showOthers = false;
    
    mutable _searchTerm : string;
    public SearchTerm : string { 
      get { _searchTerm; }
      set {         
        throttle(500, {
          when(_searchTerm != value) {
            _searchTerm = value;
            Search(value);
          }
        });
      }; 
    }
    
    public static SelectNode(node : TreeNode) : void
    {
      MainPage.Instance.SelectNode(node);
    }

    public this() 
    {
      SearchResultsForums = TreeNode() <- (Children = List());
      SearchResultsArticles = TreeNode() <- (Children = List());
      SearchResultsOthers = TreeNode() <- (Children = List());
    }
    
    public Search(term : string) : void
    {
      ClearResults();
      
      when(!string.IsNullOrWhiteSpace(term)) {        
        _ = server.Search(term, nodes => {
          
          // _ = console.log(nodes.Length);
          
          foreach(node in nodes) {
            match(node.Icon) {
            | "fr" => SearchResultsForums.Children.Add(node)
            | "qna"
            | "at" => SearchResultsArticles.Children.Add(node)
            | _ => SearchResultsOthers.Children.Add(node)
            }
          }
        });
      }
    }
    
    public ClearResults() : void 
    {
        SearchResultsForums.Children.Clear();
        SearchResultsArticles.Children.Clear();
        SearchResultsOthers.Children.Clear();
    }
    
    public ToggleForums() : void { _showForums = !_showForums }
    public ToggleArticles() : void { _showArticles = !_showArticles }
    public ToggleOthers() : void { _showOthers = !_showOthers }
    
    [Html]
    public View() : string
    {
      <#
        <div class="search-bar">
          <input id="search-input" value="$SearchTerm" />
        </div>
        <div $when(!string.IsNullOrEmpty(SearchTerm)) class="search-results"> 
          <a href="#" click="$ToggleForums">
            <h3 class="search-cat-header">Forums ($(SearchResultsForums.Children.Count))</h3>
          </a>
          <div $when(_showForums)>
            <div template="$SearchResultsForums" />
          </div>
          
          <a href="#" click="$ToggleArticles">
            <h3 class="search-cat-header">Articles ($(SearchResultsArticles.Children.Count))</h3>
          </a>
          <div $when(_showArticles)>
            <div template="$SearchResultsArticles" />
          </div>
          
          <a href="#" click="$ToggleOthers">
            <h3 class="search-cat-header">Others ($(SearchResultsOthers.Children.Count))</h3>
          </a>
          <div $when(_showOthers)>
            <div template="$SearchResultsOthers" />
          </div>
        </div>
      #>
    }
    
    public class Server
    {
      public Search(term : string) : array[TreeNode]
      {
        TreeLoader.Search(term)
      }
    }
  }
}
