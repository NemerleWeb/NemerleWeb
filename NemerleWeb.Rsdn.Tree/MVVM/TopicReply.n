using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Extensions;

using System;
using System.Collections.Generic;
using System.Linq;
using NemerleWeb;
using NemerleWeb.TypedJS;

using Rsdn.Tree.Models;

namespace Rsdn
{    
  [Unit]
  [Record]
  public class CommentNode
  {
    public Html : string;
    public Author : string;
    public Rate : int;
    public RateCount : int;
    public Agrees : int;
    public Disagrees : int;
    public Smiles : int;
    public Subject : string;
    public CreatedOn : string;
    public Children : List[CommentNode];
    public Depth : int;
    public mutable IsVisible : bool;
    
    public TotalReplies : int
    {
        get { Children.Select(c => c.TotalReplies + 1).Sum() }
    }
    
    public ToggleVisibility() : void
    {
        IsVisible = !IsVisible;
    }
    
    [Html]
    public View() : string
    {
      <#
        <div class="comment-meta" css-even="$(Depth % 2 == 0)" click="$ToggleVisibility">
          <span class="comment-author">$Author</span>
          <span class="comment-createdon">$CreatedOn</span>
          <span class="comment-rating">$(RateCount + "(" + Rate + ")")</span>
          <span class="comment-agrees">+$Agrees</span>
          /
          <span class="comment-disagrees">-$Agrees</span>
          <span $when(Smiles > 0) class="comment-smiles">
            <span $foreach(_ in Enumerable.Range(0, Smiles))>
              :)
            </span>
          </span>
        </div>
        <div class="comment-node" css-even="$(Depth % 2 == 0)">              
          <div html="$Html" />
          <div $foreach(child in Children) template="$child" />
        </div>
      #>
    }
  }
}
