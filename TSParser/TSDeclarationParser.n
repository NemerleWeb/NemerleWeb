using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Peg;

using System;
using System.Collections.Generic;
using System.Linq;

namespace TSParser
{
  [PegGrammar(Options = EmitDebugSources,
      start,
      grammar
      {
        // We create void rules to write less code in handler and even skip writing handler.
        #region Literals
        
        Spacing : void = WhiteSpace / LineTerminatorSequence / Comment;
        s : void = Spacing*;
        S : void = (Spacing / semicolon)*;
        scS : void = semicolon S;
        
        GlobalSpacing : void = WhiteSpace / LineTerminatorSequence / GlobalComment;        
        GS : void = (GlobalSpacing / semicolon)*;
        
        import_s : void   = "import"s;
        export_s : void   = "export"s;
        module_s : void   = "module"s;
        declare_s : void  = "declare"s;
        var_s : void      = "var"s;
        function_s : void = "function"s;
        new_s : void      = "new"s;
        delete_s : void = "delete"s;
        void_s : void = "void"s;
        typeof_s : void = "typeof"s;
        constructor_s : void = "constructor"s;
        enum_s : void = "enum"s;
        class_s : void = "class"s;
        implements_s : void = "implements"s;
        extends_s : void = "extends"s;
        get_s : void = "get"s;
        set_s : void = "set"s;
        interface_s : void = "interface"s;
        
        dot : void = '.';
        dot_s : void = dot s;
        comma : void = ',';
        comma_s : void = comma s;
        colon : void = ':';
        colon_s : void = colon s;
        semicolon : void = ';';
        semicolon_s : void = semicolon s;
        lbrace : void = '{';
        lbrace_s : void = lbrace s;
        rbrace : void = '}';
        rbrace_s : void = rbrace s;
        lbrack : void = '[';
        lbrack_s : void = lbrack s;
        rbrack : void = ']';
        rbrack_s : void = rbrack s;
        lparen : void = '(';
        lparen_s : void = lparen s;
        rparen : void = ')';
        rparen_s : void = rparen s;
        assign : void = '=';
        assign_s : void = assign s;
        squote : void = '\'';
        squote_s : void = squote s;
        dquote : void = '"';
        dquote_s : void = dquote s;
        
        ellipsis : void = "...";
        ellipsis_s : void = ellipsis s;
        
        arrow : void = "=>";
        arrow_s : void = arrow s;
        
        #endregion
        
        #region Special rules
        
        required : void = !'?';
        optional : bool = ('?' s)?;
        static_ : bool = "static";
        static_s : bool = static_ s;
        
        #endregion
        
        #region EcmaScript
        
        #region SourceCharacter (6)

        SourceCharacter = [Any];

        #endregion

        #region WhiteSpace (7.2)

        NBSP = '\u00A0';
        BOM = '\uFEFF';
        WhiteSpace = [Zs] / '\t' / '\v' / '\f' / ' ' / NBSP / BOM;        

        #endregion

        #region Line terminators (7.3)

        LineSeparator = '\u2028';
        ParagraphSeparator = '\u2029';
        LineTerminator = '\n' / '\r' / LineSeparator / ParagraphSeparator;
        LineTerminatorSequence = "\r\n" / LineTerminator;

        #endregion

        #region Comment (7.4)
        
        Comment = MultiLineComment / SingleLineComment;
        MultiLineComment = "/*" (!"*/" [Any])* "*/";
        SingleLineComment = "//" (!LineTerminator [Any])*;
        
        // Support for /// <reference
        GlobalComment = MultiLineComment / GlobalSingleLineComment;
        GlobalSingleLineComment = "//" !('/'s ReferenceElement s) (!LineTerminator [Any])*;

        #endregion
        
        #region Identifier (7.6)
        
        ZWNJ = '\u200C';
        ZWJ = '\u200D';        
        
        // Any name
        AnyIdentifier : string = IdentifierName s;
        Identifier : string = !(ReservedWord Spacing+) IdentifierName s;
        IdentifierName = IdentifierStart+ IdentifierPart*;
        IdentifierStart = UnicodeLetter / '$' / '_' / '\\' UnicodeEscapeSequence;
        IdentifierPart =
          IdentifierStart /
          UnicodeCombiningMark /
          UnicodeDigit /
          UnicodeConnectorPunctuation /
          ZWNJ /
          ZWJ;
          
        UnicodeLetter = [Lu, Ll, Lt, Lm, Lo, Nl];
        UnicodeCombiningMark = [Mn, Mc];
        UnicodeDigit = [Nd];
        UnicodeConnectorPunctuation = [Pc];        
        
        #endregion
        
        #region ReservedWord (7.6.1)
        
        ReservedWord = Keyword / FutureReservedWord / StrictReservedWord / NullLiteral / BooleanLiteral;
        StrictModeReservedWord = ReservedWord / StrictReservedWord;
        
        Keyword =
          "break" / "do" / "instanceof" / "typeof" / "case" / "else" / 
          "new" / "var" / "catch" / "finally" / "return" / "void" / "continue" /
          "for" / "switch" / "while" / "debugger" / "function" / "this" / "with" / 
          "default" / "if" / "throw" / "delete" / "in" / "try";
          
        // 7.6.1.2          
        FutureReservedWord =
          "class" / "enum" / "extends" / "super" / "const" / "export" / "import";
          
        // 10.1.1  
        StrictReservedWord =
          "implements" / "let" / "private" / "public" / "yield" / "interface" /
          "package" / "protected" / "static";
        
        #endregion
        
        #region Literals (7.8)

        Literal = NullLiteral / BooleanLiteral / NumericLiteral / StringLiteral / RegularExpressionLiteral;

        #endregion
        
        #region NullLiteral (7.8.1)
        
        NullLiteral = "null";
        
        #endregion
        
        #region BooleanLiteral (7.8.2)
        
        BooleanLiteral = "true" / "false";
        
        #endregion

        #region NumericLiteral (7.8.3)

        NumericLiteral = (DecimalLiteral / HexIntegerLiteral) !(IdentifierStart / DecimalDigit);

        DecimalLiteral =
          DecimalIntegerLiteral dot DecimalDigit* ExponentPart? /
          dot DecimalDigit+ ExponentPart? /
          DecimalIntegerLiteral ExponentPart?;

        DecimalIntegerLiteral = '0' / NonZeroDigit DecimalDigit*;
        DecimalDigit = ['0'..'9'];
        NonZeroDigit = ['1'..'9'];        
        ExponentPart = ExponentIndicator SignedInteger;
        ExponentIndicator = 'e' / 'E';
        SignedInteger = DecimalDigit+ / '+' DecimalDigit+ / '-' DecimalDigit+;
        HexIntegerLiteral = ("0x" / "0X") HexDigit+;
        HexDigit = ['0'..'9', 'a'..'f', 'A'..'F'];        

        #endregion

        #region StringLiteral (7.8.4)
        
        StringLiteral : string = dquote DoubleStringCharacter* dquote / squote SingleStringCharacter* squote;
        DoubleStringCharacter = 
          !('"' / '\\' / LineTerminator) SourceCharacter /
          '\\' EscapeSequence /
          LineContinuation;                 
        SingleStringCharacter =
          !('\'' / '\\' / LineTerminator) SourceCharacter /
          '\\' EscapeSequence /
          LineContinuation;
        LineContinuation = '\\' LineTerminatorSequence ;
        
        EscapeSequence = 
          CharacterEscapeSequence /
          '0' !DecimalDigit /
          HexEscapeSequence /
          UnicodeEscapeSequence;
        
        CharacterEscapeSequence = SingleEscapeCharacter / NonEscapeCharacter;
        SingleEscapeCharacter = '\'' / '\"' / '\\' / 'b' / 'f' / 'n' / 'r' / 't' / 'v';
        NonEscapeCharacter = !(EscapeCharacter / LineTerminator) SourceCharacter;        
        EscapeCharacter = SingleEscapeCharacter / DecimalDigit / 'x' / 'u';
        HexEscapeSequence = 'x' HexDigit HexDigit;
        UnicodeEscapeSequence = 'u' HexDigit HexDigit HexDigit HexDigit;
        
        #endregion
        
        #region Regular Expression Literals (7.8.5)
        
        RegularExpressionLiteral = '/'s RegularExpressionBody '/'s RegularExpressionFlags s;
        RegularExpressionBody = RegularExpressionFirstChar RegularExpressionChars;
        RegularExpressionChars = RegularExpressionChar*;
        RegularExpressionFirstChar =
          !'*' !'\\' !'/' !'[' RegularExpressionNonTerminator /
          RegularExpressionBackslashSequence /
          RegularExpressionClass;
        RegularExpressionChar =
          !'\\' !'/' !'[' RegularExpressionNonTerminator /
          RegularExpressionBackslashSequence /
          RegularExpressionClass;
        RegularExpressionBackslashSequence = '\\'s RegularExpressionNonTerminator;
        RegularExpressionNonTerminator = !LineTerminator SourceCharacter;
        RegularExpressionClass = lbrack_s RegularExpressionClassChars rbrack_s;
        RegularExpressionClassChars = RegularExpressionClassChar*;
        RegularExpressionClassChar = 
          !']' !'\\' RegularExpressionNonTerminator /
          RegularExpressionBackslashSequence;        
        RegularExpressionFlags = IdentifierPart?;
        
        #endregion
        
        #region Primary Expressions (11.1)
        
        PrimaryExpression =
          "this" /
          Identifier /
          Literal /
          ArrayLiteral /
          ObjectLiteral /
          lparen_s Expression rparen_s;
          
        #endregion
        
        #region Array Initialiser (11.1.4)
        
        ArrayLiteral = lbrack_s (ElementList / ElementList comma_s Elision? / Elision?) rbrack_s;
        ElementList = Elision? AssignmentExpression (comma_s Elision? AssignmentExpression)*;
        Elision = (comma_s)+;
        
        #endregion
        
        #region Object Initialiser (11.1.5)

        ObjectLiteral =
          lbrace_s rbrace_s /
          lbrace_s PropertyNameAndValueList rbrace_s /
          lbrace_s PropertyNameAndValueList comma_s rbrace_s;
        PropertyNameAndValueList = PropertyAssignment (comma_s PropertyAssignment)*;
        PropertyAssignment =
          PropertyName colon_s AssignmentExpression /
          get_s PropertyName lparen_s rparen_s lbrace_s FunctionBody rbrace_s /
          set_s PropertyName lparen_s PropertySetParameterList rparen_s lbrace_s FunctionBody rbrace_s;
        PropertyName = IdentifierName / StringLiteral / NumericLiteral;
        PropertySetParameterList = Identifier;
        
        #endregion
        
        #region Left-Hand-Side Expressions (11.2)
        
        MemberExpression =
          (new_s)? (PrimaryExpression / FunctionExpression) (lbrack_s Expression rbrack_s / dot_s IdentifierName)+ Arguments?;
        NewExpression = MemberExpression / new_s NewExpression;
        CallExpression = MemberExpression (Arguments+ / lbrack_s Expression rbrack_s / dot_s IdentifierName);
        Arguments = lparen_s ArgumentList? rparen_s;
        ArgumentList = AssignmentExpression (comma_s AssignmentExpression)*;

        LeftHandSideExpression = NewExpression / CallExpression;
        
        #endregion
        
        #region Postfix Expression
        
        PostfixExpression =
          LeftHandSideExpression /
          LeftHandSideExpression !LineTerminator "++" /
          LeftHandSideExpression !LineTerminator "--";
        
        #endregion
        
        #region Unary Operators (11.4)
        
        UnaryExpression =
          PostfixExpression /
          "delete"s UnaryExpression /
          "void"s UnaryExpression /
          "typeof"s UnaryExpression /
          "++"s UnaryExpression /
          "--"s UnaryExpression /
          '+'s UnaryExpression /
          '-'s UnaryExpression /
          '~'s UnaryExpression /
          '!'s UnaryExpression;
        
        #endregion
        
        #region Multiplicative Operators (11.5)
        
        MultiplicativeExpression = UnaryExpression (('*' / '/' / '%')s UnaryExpression)*;
        
        #endregion
        
        #region Additive Operators (11.6)
        
        AdditiveExpression = MultiplicativeExpression (('+' / '-')s MultiplicativeExpression)*;
        
        #endregion
        
        #region Bitwise Shift Operators (11.7)
        
        ShiftExpression = AdditiveExpression (("<<" / ">>" / ">>>")s AdditiveExpression)*;
        
        #endregion
        
        #region Relational Operators (11.8)
        
        RelationalExpression =
          ShiftExpression (('<' / '>' / "<=" / ">=" / "instanceof" / "in")s ShiftExpression)*;
        
        #endregion
        
        #region Equality Operators (11.9)
        
        EqualityExpression = RelationalExpression (("==" / "!=" / "===" / "!==")s RelationalExpression)*;
        
        #endregion
        
        #region Binary Bitwise Operators (11.10)
        
        BitwiseANDExpression = EqualityExpression ('&'s EqualityExpression)*;        
        BitwiseXORExpression = BitwiseANDExpression ('^'s BitwiseANDExpression)*;   
        BitwiseORExpression = BitwiseXORExpression ('|'s BitwiseXORExpression)*;
        
        #endregion
        
        #region Binary Logical Expression (11.11)
        
        LogicalANDExpression = BitwiseORExpression ("&&"s BitwiseORExpression)*;        
        LogicalORExpression = LogicalANDExpression ("||"s LogicalANDExpression)*;
        
        #endregion
        
        #region Conditional Operator (11.12)
        
        ConditionalExpression =
          LogicalORExpression /
          LogicalORExpression '?'s AssignmentExpression ':'s AssignmentExpression;
        
        #endregion
        
        #region Assignement Operators (11.13)
        
        AssignmentExpression =
          ConditionalExpression /
          LeftHandSideExpression assign AssignmentExpression /
          LeftHandSideExpression AssignmentOperator AssignmentExpression;
        
        AssignmentOperator = "*=" / "/=" / "%=" / "+=" / "-=" / "<<=" / ">>=" / ">>>=" / "&=" / "^=" / "|=";
        
        #endregion
        
        #region Comma Operator (11.14)
        
        Expression = AssignmentExpression (comma_s AssignmentExpression)*;
        
        #endregion

        #region Statement (12)
        
        // TODO: Add other statements
        Statement = VariableStatement;
        
        #endregion
        
        #region Variable Statement (12.2)
        
        VariableStatement = var_s VariableDeclarationList scS;
        VariableDeclarationList = VariableDeclaration (comma_s VariableDeclaration)*;
        // This rule is modified in TypeSript see: 5.1
        //VariableDeclaration = Identifier;
        Initialiser : string = assign AssignmentExpression;
        
        #endregion
        
        #region Function Definition (13)
        
        FunctionExpression = function_s Identifier? lparen_s FormalParameterListOpt rparen_s lbrace_s FunctionBody rbrace_s;
        FormalParameterList = Identifier (comma_s Identifier)*;
        FormalParameterListOpt = FormalParameterList?;
        FunctionBody = SourceElement*;
        
        #endregion
        
        #region Program (14)
        
        SourceElement = Statement / FunctionDeclaration;
        
        #endregion
        
        #endregion
        
        #region TypeScript
        
        #region Specifying Types (3.5)
        
        // Array is specified here, because otherwise we have left recursion.
        ScriptType : TSType = (TypeLiteral / PredefinedType / TypeNameTS) ('['s ']'s)*;
        PredefinedType : TSType = ("any" / "number" / "bool" / "string" / "void") s !IdentifierPart;
        TypeName : string = Identifier (dot Identifier)*;
        TypeNameTS : TSType = TypeName;
        ModuleName : string = TypeName;
        TypeLiteral : TSType = ObjectType / FunctionType / ConstructorType;
        
        #endregion
        
        #region Object Type Literals (3.5.3)
        
        ObjectType : TSType = lbrace_s TypeBody rbrace_s;
        ObjectTypeTS : TSType.Object = lbrace_s TypeBody rbrace_s;
        TypeBody : list[TSObject] = TypeMemberList scS / TypeMemberListOpt;
        TypeMemberListOpt : list[TSObject] = TypeMemberList?;
        TypeMemberList : list[TSObject] = TypeMember (scS TypeMember)* S;
        TypeMember : TSObject =
          CallSignature /
          ConstructSignature /
          IndexSignature /
          FunctionSignature /
          PropertySignature;
        
        CallSignature      : TSObject = lparen_s ParameterListOpt rparen_s ReturnTypeAnnotation?;
        ConstructSignature : TSObject = new_s lparen_s ParameterListOpt rparen_s TypeAnnotation?;
        IndexSignature     : TSObject =
          lbrack_s Identifier required colon_s ("number" / "string") s rbrack_s TypeAnnotation;
        PropertySignature  : TSObject = AnyIdentifier optional TypeAnnotation?;
        FunctionSignature  : TSObject =
          AnyIdentifier optional lparen_s ParameterListOpt rparen_s ReturnTypeAnnotation?;
        
        #endregion
        
        #region Array Type Literal (3.5.4)
        
        ArrayType : TSType.Array = (PredefinedType / TypeNameTS / TypeLiteral) ('['s ']'s)+;
        
        #endregion
        
        #region Function Type Literals (3.5.5)
        
        FunctionType : TSType = lparen_s ParameterListOpt rparen_s arrow_s ReturnType s;
        
        #endregion
        
        #region Constructor Type Literals (3.5.6)
        
        ConstructorType : TSType = new_s lparen_s ParameterListOpt rparen_s arrow_s ScriptType s;

        #endregion
        
        #region Variable Statements (5.1)
        
        VariableDeclaration = AnyIdentifier TypeAnnotation?;
        TypeAnnotation : TSType = colon_s ScriptType s;
        
        #endregion
        
        #region Function Declarations
        
        // Modified
        FunctionDeclaration = FunctionOverload+;
        FunctionOverload = function_s FunctionSignature scS;
        
        #endregion
        
        #region Function Signatures (6.2)
        
        // According to spec, additional comma is forbiden, but TS compiler handles it.
        ParameterList : list[TSParam] =
          ParameterListROR /
          ParameterListOR comma_s? /
          ParameterListRO /
          ParameterListRR /
          OptionalParameterList comma_s? /
          RequiredParameterList comma_s? /
          RestParameter;
          
        // Return empty list instead of option
        ParameterListOpt : list[TSParam] = ParameterList?;
        
        ParameterListROR : list[TSParam] = RequiredParameterList comma_s OptionalParameterList comma_s RestParameter;
        ParameterListOR  : list[TSParam] = OptionalParameterList comma_s RestParameter;
        ParameterListRO  : list[TSParam] = RequiredParameterList comma_s OptionalParameterList;
        ParameterListRR  : list[TSParam] = RequiredParameterList comma_s RestParameter;
          
        RequiredParameterList : list[TSParam] = RequiredParameter (comma_s RequiredParameter)*;
        RequiredParameter : TSParam = PublicOrPrivate? Identifier required TypeAnnotation?;
        Public : MemberAccess = "public";
        Private : MemberAccess = "private";
        PublicOrPrivate : MemberAccess = (Public/Private)s;
        OptionalParameterList : list[TSParam] = OptionalParameter (comma_s OptionalParameter)*;
        // Optional parameter must not have Initialiser in declaration files.
        OptionalParameter : TSParam = PublicOrPrivate? Identifier optional TypeAnnotation?;
                                      //                        / TypeAnnotation? Initialiser;
        RestParameter : list[TSParam] = ellipsis_s Identifier required colon_s ArrayType;
        ReturnTypeAnnotation : TSType = colon_s ReturnType s;
        VoidType : TSType = "void";
        ReturnType : TSType = ScriptType / VoidType;
        
        #endregion
        
        #region Interface Declarations (7.1)
        
        InterfaceDeclaration : TSGlobal = interface_s Identifier InterfaceExtendsClause? ObjectTypeTS S;
        InterfaceExtendsClause : list[string] = extends_s InterfaceNameList;
        InterfaceNameList : list[string] = InterfaceName (comma_s InterfaceName)*;
        InterfaceName : string = TypeName;
        
        #endregion
        
        #region Class Declarations (8.1)
        
        ClassDeclaration = class_s Identifier ClassHeritage lbrace_s ClassBody rbrace_s;
        
        ClassHeritage : ClassHeritage = ClassExtendsClause? ImplementsClause?;
        ClassExtendsClause : string = extends_s ClassName;
        ClassName : string = TypeName;
        ImplementsClause : list[string] = implements_s InterfaceNameList;
        
        ClassBody = ClassElement*;
        ClassElement = ConstructorDeclaration / MemberDeclaration;
        
        #endregion
        
        #region Constructor Declaration (8.3)
        
        ConstructorDeclaration = ConstructorOverload+;
        ConstructorOverload = constructor_s lparen_s ParameterListOpt rparen_s scS;
        
        #endregion
        
        #region Member Declarations (8.4)
        
        MemberDeclaration = MemberFunctionDeclaration / MemberVariableDeclaration;
        
        MemberVariableDeclaration = PublicOrPrivate? static_s? VariableDeclaration scS;
        
        MemberFunctionDeclaration = MemberFunctionOverload+;
        MemberFunctionOverload = PublicOrPrivate? static_s? FunctionSignature scS;
                
        #endregion
        
        #region Enum Declaration
        
        EnumDeclaration = enum_s Identifier lbrace_s EnumBody? rbrace_s S;
        EnumBody : list[TSEnumElement] = EnumElement (comma_s EnumElement)* comma?s;
        EnumElement : TSEnumElement = AnyIdentifier Initialiser?;
        
        #endregion
        
        #region Programs (9.1)
        
        SourceFile = DeclarationSourceFile;
        ModuleElement =
          Statement /
          FunctionDeclaration /
          ClassDeclaration /
          InterfaceDeclaration /
          ModuleDeclaration /
          EnumDeclaration /
          ImportDeclaration /
          ExportDeclaration /
          AmbientDeclaration;
        
        #endregion
        
        #region Module Declarations (9.2)
        
        ModuleDeclaration = module_s IdentifierPath? lbrace_s ModuleBody rbrace_s;
        IdentifierPath : string = Identifier (dot Identifier)*;
        ModuleBody = ModuleElement*;
        
        #endregion
        
        #region Export Declarations (9.2.1)
        
        // Allow export function();
        ExportFunctionDeclaration = AmbientFunctionDeclaration;
        ExportDeclaration =
          export_s VariableStatement /
          export_s ExportFunctionDeclaration /
          export_s ClassDeclaration /
          export_s InterfaceDeclaration /
          export_s ModuleDeclaration /
          export_s EnumDeclaration /
          export_s AmbientDeclaration /
          ExportAssignment;
        ExportAssignment : TSGlobal = export_s assign_s Identifier semicolon;
            
        #endregion
        
        #region Import Declarations (9.2.2)
        
        ImportDeclaration : TSGlobal = import_s Identifier assign_s ModuleReference scS;
        ModuleReference : string = ExternalModuleReference / ModuleName;
        ExternalModuleReference : string = module_s lparen_s StringLiteral s rparen_s;
        
        #endregion
        
        #region Ambient Declarations (10.1)
                
        AmbientDeclaration =
          declare_s
           (
            AmbientVariableDeclaration /
            AmbientFunctionDeclaration /
            AmbientClassDeclaration /
            AmbientModuleDeclaration /
            AmbientEnumDeclaration
           );
        
        #endregion
        
        #region Ambient Variable Declarations (10.1.1)
        
        AmbientVariableDeclaration : TSGlobal = var_s Identifier TypeAnnotation? S;
        
        #endregion
        
        #region Ambient Variable Declarations (10.1.2)
        
        AmbientFunctionDeclaration : TSGlobal = function_s Identifier lparen_s ParameterListOpt rparen_s ReturnTypeAnnotation? S;
        
        // This rule is not by specification, but TypeScript parses it correctly.
        AmbientConstructDeclaration : TSGlobal = function_s new_s lparen_s ParameterListOpt rparen_s ReturnTypeAnnotation? S;
        
        #endregion
        
        #region Ambient Class Declarations (10.1.3)
        
        AmbientClassDeclaration : TSGlobal = class_s Identifier ClassHeritage lbrace_s AmbientClassBody rbrace_s S;
        AmbientClassBody : list[TSClassMember] = AmbientClassBodyElement*;
        AmbientClassBodyElement : TSClassMember = AmbientConstructorDeclaration / AmbientMemberDeclaration;
        AmbientConstructorDeclaration : TSClassMember = constructor_s lparen_s ParameterListOpt rparen_s scS;
        AmbientMemberVariable : TSClassMemberPart = Identifier TypeAnnotation?;
        // Same as FunctionSignature but with other type
        ClassMemberFunctionSignature  : TSClassMemberPart = AnyIdentifier optional lparen_s ParameterListOpt rparen_s ReturnTypeAnnotation?;
        AmbientMemberDeclaration : TSClassMember = PublicOrPrivate? static_s? (ClassMemberFunctionSignature / AmbientMemberVariable) scS;
        
        AmbientEnumDeclaration : TSGlobal = enum_s Identifier lbrace_s EnumBody? rbrace_s S;
        
        #endregion        
        
        #region Ambient Module Declarations (10.1.4)
        
        AmbientModuleDeclaration : TSGlobal = module_s AmbientModuleIdentification s lbrace_s AmbientModuleBody rbrace_s S;
        AmbientModuleIdentification : string = StringLiteral / IdentifierPath;
        AmbientModuleBody : list[TSGlobal] = AmbientElement*;
        
        AmbientElementNotImport : TSGlobal =
          export_s? declare_s?
            (
              AmbientVariableDeclaration /
              AmbientConstructDeclaration /
              AmbientFunctionDeclaration /
              AmbientClassDeclaration /
              InterfaceDeclaration /
              AmbientModuleDeclaration /
              AmbientEnumDeclaration
            );
        AmbientElement : TSGlobal =
          Reference /
          AmbientElementNotImport /
          ImportDeclaration /
          ExportAssignment;
        
        #endregion
                
        #region Declaration Source Files (10.2)
        
        DeclarationSourceFile : List[TSGlobal] = GS AmbientElement*;
        
        #endregion
        
        #region Reference

        /// <reference path="..." />
        ReferencePath : TSGlobal = "path"s '='s StringLiteral;
        ReferenceNoDefaultLib : TSGlobal = "no-default-lib"s '='s ("\"true\"" / "'true'");
        ReferenceElement : TSGlobal = '<'s "reference"s (ReferencePath / ReferenceNoDefaultLib)s '/'s '>'s;
        xmlComment : void = "///";
        Reference : TSGlobal = xmlComment s ReferenceElement;
        
        #endregion
        
        #endregion
        
        start : List[TSGlobal] = DeclarationSourceFile;
      }
    )]
  public class TSDeclarationParser
  {
    optional(n : NToken) : bool
    {
      !n.IsEmpty
    }
    
    static_(n : NToken) : bool
    {
      !n.IsEmpty
    }
    
    StringLiteral(s : NToken) : string
    {
      GetText(s)
    }
    
    AnyIdentifier(id : NToken) : string
    {
      GetText(id)
    }    
    
    Identifier(id : NToken) : string
    {
      GetText(id)
    }
    
    static Id(first : string, rest : List[string]) : string
    {
      if (rest.Count == 0) first else $<#$first...$(rest; ".")#>
    }
    
    Initialiser(assignmentExpr : NToken) : string
    {
      GetText(assignmentExpr)
    }

    ScriptType(type : TSType, arrayArity : List[NToken * NToken]) : TSType
    {
      if (arrayArity.Count == 0) type else TSType.Array(type, arrayArity.Count)
    }
    
    PredefinedType(type : NToken) : TSType
    {
      match(GetText(type))
      {
      | "any" => TSType.Any()
      | "number" => TSType.Number()
      | "bool" => TSType.Bool()
      | "string" => TSType.String()
      | "void" => TSType.Void()
      | _ => assert(false);
      }
    }
    
    TypeNameTS(type : string) : TSType
    {
      TSType.Named(type)
    }
    
    TypeName(first : string, rest : List[string]) : string
    {
      Id(first, rest)
    }
    
    ObjectType(members : list[TSObject]) : TSType
    {
      ObjectTypeTS(members)
    }
    
    ObjectTypeTS(members : list[TSObject]) : TSType.Object
    {
      TSType.Object(members)
    }
    
    ArrayType(type : TSType, arrayArity : List[NToken * NToken]) : TSType.Array
    {
      TSType.Array(type, arrayArity.Count)
    }
    
    TypeMemberListOpt(members : option[list[TSObject]]) : list[TSObject]
    {
      members ?? []
    }
    
    TypeMemberList(member : TSObject, rest : List[TSObject]) : list[TSObject]
    {
      member :: rest.NToList()
    }
    
    CallSignature(parms : list[TSParam], returnType : option[TSType]) : TSObject
    {
      TSObject.Call(parms, returnType)
    }

    ConstructSignature(parms : list[TSParam], type : option[TSType]) : TSObject
    {
      TSObject.Construct(parms, type)
    }
    
    IndexSignature(paramName : string, paramType : NToken, returnType : TSType) : TSObject
    {
      def indexParamType = 
        match(GetText(paramType))
        {
        | "number" => TSIndexParamType.Number()
        | "string" => TSIndexParamType.String()
        | _ => assert(false);
        };
      
      TSObject.Index(paramName, indexParamType, returnType)
    }
    
    PropertySignature(id : string, optional : bool, type : option[TSType]) : TSObject
    {
      TSObject.Property(id, optional, type)
    }

    FunctionSignature(id : string, optional : bool, parms : list[TSParam], returnType : option[TSType]) : TSObject
    {
      TSObject.Function(id, optional, parms, returnType)
    }
    
    FunctionType(parms : list[TSParam], returnType : TSType) : TSType
    {
      TSType.Lambda(parms, returnType)
    }
    
    ConstructorType(parms : list[TSParam], returnType : TSType) : TSType
    {
      TSType.New(parms, returnType)
    }
    
    VoidType(_ : NToken) : TSType
    {
      TSType.Void()
    }
    
    IdentifierPath(first : string, rest : List[string]) : string
    {
      Id(first, rest)
    }
    
    Public(_ : NToken) : MemberAccess
    {
      MemberAccess.Public
    }
    
    Private(_ : NToken) : MemberAccess
    {
      MemberAccess.Private
    }
    
    ParameterListOpt(parms : option[list[TSParam]]) : list[TSParam] 
    {
      parms ?? []
    }
    
    ParameterListROR(required : list[TSParam], optional : list[TSParam], rest : list[TSParam]) : list[TSParam]
    {
      required.Append(optional).Append(rest)
    }
    
    ParameterListOR(optional : list[TSParam], rest : list[TSParam]) : list[TSParam]
    {
      optional.Append(rest)
    }
    
    ParameterListRO(required : list[TSParam], optional : list[TSParam]) : list[TSParam]
    {
      required.Append(optional)
    }
    
    RequiredParameter(access : option[MemberAccess], id : string, type : option[TSType]) : TSParam
    {
      TSParam.Required(id, type, access)
    }
    
    ParameterListRR(required : list[TSParam], rest : list[TSParam]) : list[TSParam]
    {
      required.Append(rest)
    }
    
    // _optional is always true in declaration files
    OptionalParameter(access : option[MemberAccess], id : string, optional : bool, type : option[TSType]) : TSParam
    {
      TSParam.Option(id, optional, type, access)
    }
    
    RequiredParameterList(first : TSParam, rest : List[TSParam]) : list[TSParam]
    {
      first :: rest.NToList()
    }
    
    OptionalParameterList(first : TSParam, rest : List[TSParam]) : list[TSParam]
    {
      first :: rest.NToList()
    }
    
    RestParameter(id : string, type : TSType.Array) : list[TSParam]
    {
      [TSParam.Rest(id, type)]
    }

    InterfaceDeclaration(id : string, extends : option[list[string]], type : TSType.Object) : TSGlobal
    {
      TSGlobal.Interface(id, extends ?? [], type)
    }
    
    InterfaceNameList(first : string, rest : List[string]) : list[string]
    {
      first :: rest.NToList()
    }
    
    ClassHeritage(extends : option[string], implement : option[list[string]]) : ClassHeritage
    {
      (extends, implement ?? [])
    }
    
    AmbientVariableDeclaration(id : string, type : option[TSType]) : TSGlobal
    {
      TSGlobal.Variable(id, type)
    }
    
    AmbientFunctionDeclaration(name : string, parms : list[TSParam], returnType : option[TSType]) : TSGlobal
    {
      TSGlobal.Function(name, parms, returnType)
    }
    
    AmbientConstructDeclaration(parms : list[TSParam], returnType : option[TSType]) : TSGlobal
    {
      TSGlobal.Construct(parms, returnType)
    }
    
    AmbientClassDeclaration(id : string, classHeritage : ClassHeritage, members : list[TSClassMember]) : TSGlobal
    {
      TSGlobal.Class(id, classHeritage[0], classHeritage[1], members)
    }
    
    AmbientClassBody(elements : List[TSClassMember]) : list[TSClassMember]
    {
      elements.NToList()
    }
    
    AmbientConstructorDeclaration(parms : list[TSParam]) : TSClassMember
    {
      TSClassMember.Constructor(parms)
    }
    
    AmbientMemberVariable(id : string, type : option[TSType]) : TSClassMemberPart
    {
      TSClassMemberPart.Variable(id, type)
    }

    ClassMemberFunctionSignature(id : string, optional : bool, parms : list[TSParam], returnType : option[TSType]) : TSClassMemberPart
    {
      TSClassMemberPart.Method(id, optional, parms, returnType)
    }
    
    AmbientMemberDeclaration(access : option[MemberAccess], isStatic : option[bool], part : TSClassMemberPart) : TSClassMember
    {
      TSClassMember.Member(part, isStatic, access)
    }
    
    AmbientModuleDeclaration(id :string , elements : list[TSGlobal]) : TSGlobal
    {
      TSGlobal.Module(id, elements)
    }
    
    AmbientModuleBody(elements : List[TSGlobal]) : list[TSGlobal]
    {
      elements.NToList()
    }
    
    AmbientEnumDeclaration(id : string, elements : option[list[TSEnumElement]]) : TSGlobal
    {
      TSGlobal.Enum(id, elements ?? [])
    }
    
    EnumBody(first : TSEnumElement, rest : List[TSEnumElement]) : list[TSEnumElement]
    {
      first :: rest.NToList()
    }
    
    EnumElement(id : string, initialiser : option[string]) : TSEnumElement
    {
      TSEnumElement(id, initialiser)
    }
    
    ExportAssignment(id : string) : TSGlobal
    {
      TSGlobal.Export(id)
    }
    
    ImportDeclaration(id : string, moduleRef : string) : TSGlobal
    {
      TSGlobal.Import(id, moduleRef)
    }
    
    ReferencePath(_ : NToken, _ : NToken, path : string) : TSGlobal
    {
      TSGlobal.ReferencePath(path)
    }
    
    ReferenceNoDefaultLib(_ : NToken, _ : NToken, _ : NToken) : TSGlobal
    {
      TSGlobal.ReferenceNoDefaultLib()
    }
    
    ReferenceElement(_ : NToken, _ : NToken, reference : TSGlobal, _ : NToken, _ : NToken) : TSGlobal
    {
      reference
    }
  }  
}
