using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

// It was better to generate it using StructuralEquality macro,
// but it doesn't go well with variants.
// So here some hack comes in play
namespace TSParser
{
  public abstract class BaseEqualityComparer[T] : EqualityComparer[T] where T : class
  {
    public override Equals(x : T, y : T) : bool
    {
      if(object.ReferenceEquals(x, y))
        true
      else
      if(x == null || y == null)
        false
      else
        EqualsImpl(x, y)
    }
    
    protected abstract EqualsImpl(x : T, y : T) : bool;
  }
    
  public class TSClassMemberPartEqualityComparer : BaseEqualityComparer[TSClassMemberPart]
  {
    public override GetHashCode(obj : TSClassMemberPart) : int
    {
      | Variable => 1
      | Method => 2
    }
    
    protected override EqualsImpl(x : TSClassMemberPart, y : TSClassMemberPart) : bool
    {
      | (Variable(xname, _), Variable(yname, _)) => xname == yname
      | (Method(xname, _, xparams, _), Method(yname, _, yparams, _)) =>
        xname == yname &&
        TSParamsEqualityComparer().Equals(xparams, yparams)
      | _ => false
    }
  }
  
  public class TSClassMemberEqualityComparer : BaseEqualityComparer[TSClassMember]
  {
    public override GetHashCode(obj : TSClassMember) : int
    {
      | Constructor => 1
      | Member => 2
    }
    
    protected override EqualsImpl(x : TSClassMember, y : TSClassMember) : bool
    {
      | (Constructor(xparams), Constructor(yparams)) =>
        TSParamsEqualityComparer().Equals(xparams, yparams)
      | (Member(xpart, _, _), Member(ypart, _, _)) =>
        TSClassMemberPartEqualityComparer().Equals(xpart, ypart)
      | _ => false
    }
  }
  
  public class TSParamEqualityComparer : BaseEqualityComparer[TSParam]
  {
    // All Required is treated as Option(optional = false)
    // Rest => Option
    public override GetHashCode(obj : TSParam) : int
    {
      | Required as r => TSParam.Option(r.Name, false, r.Type, r.Access).GetHashCode()
      | Rest as r => TSParam.Option(r.Name, false, Some(r.Type), None()).GetHashCode()
      | _ => obj.GetHashCode()
    }
    
    protected override EqualsImpl(x : TSParam, y : TSParam) : bool
    {
      | (Required(_, xtype, _), Required(_, ytype, _))
      | (Required(_, xtype, _), Option(_, _, ytype, _))
      | (Option(_, _, xtype, _), Option(_, _, ytype, _))
      | (Option(_, _, xtype, _), Required(_, ytype, _)) =>
        match((xtype, ytype))
        {
        | (None, None)
        | (None, Some(TSType.Any))
        | (Some(TSType.Any), None) => true          
        | (Some, None)
        | (None, Some) => false          
        | (Some, Some) => TSTypeEqualityComparer().Equals(xtype.Value, ytype.Value)
        }
      | (Rest(_, xtype), Required(_, Some(TSType.Array as ytype), _))
      | (Rest(_, xtype), Option(_, _, Some(TSType.Array as ytype), _))
      | (Required(_, Some(TSType.Array as xtype), _), Rest(_, ytype))
      | (Option(_, _, Some(TSType.Array as xtype), _), Rest(_, ytype))
      | (Rest(_, xtype), Rest(_, ytype)) =>
        TSTypeEqualityComparer().Equals(xtype, ytype)
      | _ => false
    }
  }
  
  public class TSParamsEqualityComparer : BaseEqualityComparer[IEnumerable[TSParam]]
  { 
    public override GetHashCode(obj : IEnumerable[TSParam]) : int
    {
      obj.GetHashCode()
    }
  
    protected override EqualsImpl(x : IEnumerable[TSParam], y : IEnumerable[TSParam]) : bool
    {
      Enumerable.SequenceEqual(x, y, TSParamEqualityComparer())
    }
  }
  
  public class TSObjectEqualityComparer : BaseEqualityComparer[TSObject]
  {
    public override GetHashCode(obj : TSObject) : int
    {
      | Call => 1
      | Construct => 2
      | Index => 3
      | Property => 4
      | Function => 5
    }
      
    protected override EqualsImpl(x : TSObject, y : TSObject) : bool
    {
      | (Call(xparams, _), Call(yparams, _)) =>
        TSParamsEqualityComparer().Equals(xparams, yparams)
      | (Construct(xparams, _), Construct(yparams, _)) =>
        TSParamsEqualityComparer().Equals(xparams, yparams)
      | (Index(_, TSIndexParamType.Number, _), Index(_, TSIndexParamType.Number, _)) => true
      | (Index(_, TSIndexParamType.String, _), Index(_, TSIndexParamType.String, _)) => true
      | (Property(xname, _, _), Property(yname, _, _)) => xname == yname
      | (Function(xname, _, xparams, _), Function(yname, _, yparams, _)) =>
        xname == yname &&
        TSParamsEqualityComparer().Equals(xparams, yparams)
      | _ => false
    }
  }
  
  public class TSGlobalFunctionEqualityComparer : BaseEqualityComparer[TSGlobal.Function]
  {
    public override GetHashCode(obj : TSGlobal.Function) : int
    {
      obj.Name.GetHashCode()
    }
    
    protected override EqualsImpl(x : TSGlobal.Function, y : TSGlobal.Function) : bool
    {
      x.Name == y.Name &&
      TSParamsEqualityComparer().Equals(x.Params, y.Params)
    }
  }
  
  public class TSTypeEqualityComparer : BaseEqualityComparer[TSType]
  {
    public override GetHashCode(obj : TSType) : int
    {
      | Any => 1
      | Number => 2
      | Bool => 3
      | String => 4
      | Void => 5
      | Named => 6
      | Array => 7
      | Object => 8
      | Lambda => 9
      | New => 10
    }
    
    protected override EqualsImpl(x : TSType, y : TSType) : bool
    {
      | (Any, Any) => true
      | (Number, Number) => true
      | (String, String) => true
      | (Void, Void) => true
      | (Named(xname), Named(yname)) => xname.Equals(yname)
      | (Array(xtype, xarity), Array(ytype, yarity)) =>
        TSTypeEqualityComparer().Equals(xtype, ytype) &&
        xarity == yarity
      | (Object(xmembers), Object(ymembers)) =>
        Enumerable.SequenceEqual(xmembers, ymembers, TSObjectEqualityComparer())
      | (Lambda(xparams, xreturnType), Lambda(yparams, yreturnType)) 
      | (New(xparams, xreturnType), New(yparams, yreturnType)) => 
        TSParamsEqualityComparer().Equals(xparams, yparams) &&
        TSTypeEqualityComparer().Equals(xreturnType, yreturnType)
      | _ => false
    }
  }  
}
