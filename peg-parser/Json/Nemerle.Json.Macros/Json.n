using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Macro;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Json;

namespace Nemerle.Json
{
  public macro json(arg)
  syntax("json", "(", arg, ")")
  {
    JsonImpl.Json(Macros.ImplicitCTX(), arg)
  }
  
  module JsonImpl
  {
    public Json(_typer : Typer, arg : PExpr) : PExpr
    {
      match (arg)
      {
        | <[ true ]> => <[ JObject.Value(true) ]>
        | <[ false ]> => <[ JObject.Value(false) ]>
        | <[ null ]> => <[ JObject.Null ]>
        | <[ [ ..$items ] ]> => 
          def conv = items.Map(i => Json(_typer, i));
          <[
            JObject.Array([..$conv])
          ]>
        | PExpr.Sequence(seq) => 
          def enforcementToTuple(x)
          {
            | <[ $(PExpr.Literal(name)) : $value  ]> when name is Literal.String with str = name.RawString.Trim('"')
            | <[ $vref : $value  ]> with str = vref.ToString()  => 
              def val = Json(_typer, value);
              <[ ( $(str : string), $val) ]>
            | x => 
              Message.Error(x.Location, "expected 'name: value'"); 
              <[]>
          }
          def args = seq.Map(enforcementToTuple);
          <[ JObject.Object([..$args]) ]>
        | x => 
          <[ JObject.Convert($x) ]>
      }
    }
  }
}
