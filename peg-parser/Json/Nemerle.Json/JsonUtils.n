using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;

using NemerleWeb;

namespace Nemerle.Json
{
  /// <summary>
  /// Description of JsonUtils.
  /// </summary>
  [Unit]
  module JsonUtils
  {
    // TODO: No method overload
    //public Escape(src : string) : string
    //{
    //  Escape(StringBuilder(), src).ToString()
    //}
    
    public Escape(this sb : StringBuilder, src : string) : StringBuilder
    {
      foreach (c in src)
      {
        // TODO: Restore
        //| c when (c : int) < escapingChars.Length && escapingChars[(c : int)] > 0 =>
        //  _ = sb.Append('\\');
        //  _ = sb.Append(escapingChars[c : int])
        //| x =>
        //  _ = sb.Append(x)
        if (c : int < escapingChars.Length && escapingChars[c : int] > 0)
        {
          _ = sb.Append('\\');
          _ = sb.Append(escapingChars[c : int])
        }
        else
          _ = sb.Append(c);
      }
      
      sb
    }
    
    static this()
    {
      escapingChars = makeEscapingChars();
    }

    escapingChars : array[char];
    // TODO: Implement lazy
    //{      
      //_escapingChars : LazyValue[array[char]] = lazy(makeEscapingChars());
      //get 
      //{
        //_escapingChars.Value;
      //}
    //}
    
    makeEscapingChars() : array[char]
    {
      def escaped = array['"', '\\' , '\0' , '\a' , '\b' , '\f' , '\n' , '\r' , '\t' , '\v'];
      def escapeChars = array['"', '\\' , '0' , 'a' , 'b' , 'f' , 'n' , 'r' , 't' , 'v'];
      def maxChar = escaped.Max() : int;
      def escapingChars = array(maxChar+1);
      
      for (mutable i = 0; i < escaped.Length; i++)
      {
        escapingChars[escaped[i] : int] = escapeChars[i]
      }
      
      escapingChars
    }
  }
}
