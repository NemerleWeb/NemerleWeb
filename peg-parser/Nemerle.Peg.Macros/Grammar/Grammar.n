using System;
using System.Collections.Generic;
using System.Text;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

namespace Nemerle.Peg
{
  public class Grammar
  {
    private _grammar : Map[NameRef, RuleDefinition] = Map();
    private _grammarRefs : list[GrammarRef] = [];
    [Accessor]
    private _startRuleName : NameRef;

    public this(startRuleName : NameRef)
    {
      _startRuleName = startRuleName;
    }

    private this(startRuleName : NameRef, grammar : Map[NameRef, RuleDefinition], grammarRefs : list[GrammarRef])
    {
      _startRuleName = startRuleName;
      _grammar = grammar;
      _grammarRefs = grammarRefs;
    }

    public Add(ruleDefinition : RuleDefinition) : Grammar
    {
      Grammar(StartRuleName, _grammar.Add(ruleDefinition.Name, ruleDefinition), _grammarRefs);
    }

    public Add(grammarRef : GrammarRef) : Grammar
    {
      Grammar(StartRuleName, _grammar, grammarRef :: _grammarRefs);
    }

    public GetRule(name : NameRef) : RuleDefinition
    {
      if (_grammar.Contains(name))
        _grammar.Get(name);
      else
        throw GrammarException($"There is no rule \"$name\" in grammar.", name.Location);
    }

    public GetRuleType(name : NameRef) : option[RuleType]
    {
      match (GetRule(name).ResultType)
      {
        | Typed(NType(ty)) when ty.Equals(ty.Manager.InternalType.Void)
                          => Some(RuleType.Void())
        | Typed(ty)       => Some(ty)
        | Extention(name) => GetRuleType(name)
        | _               => None()
      }
    }

    public Count : int
    {
      get { _grammar.Count }
    }

    public Names : list[NameRef]
    {
      get { _grammar.Map((name, _) => name) }
    }

    public Rules : list[RuleDefinition]
    {
      get { _grammar.Map((_, rd) => rd) }
    }

    public TransformRules(fn : RuleDefinition -> option[Rule]) : Grammar
    {
      _grammar.Fold(Grammar(StartRuleName, Map(), _grammarRefs), (_, rd, newGrammar) =>
      {
        def rule = fn(rd);
        newGrammar.Add(RuleDefinition(rd.Location, rd.Id, rd.Name, rd.ResultType, rd.Attributes, rule))
      })
    }

    public IsOptional(rule : Rule) : bool
    {
      def isOptionalImpl(rule : Rule, visited : HashSet[Rule]) : bool
      {
        def isOptional = isOptionalImpl(_, visited);
        
        match (rule)
        {
          | Capture(_, rule1)                 => isOptional(rule1)
          | Choice(rules2)                    => rules2.Exists(isOptional)
          | Sequence(rules3)                  => rules3.ForAll(isOptional)
          | RepeatMin(0, _rule)               => true // *
          | RepeatMin(_, rule4)               => isOptional(rule4) // +
          | RepeatMinMax(0, _, _rule)         => true // ?
          | RepeatMinMax(n, _, rule5)         => n == 0 || isOptional(rule5)
          | Not                               => true
          | And                               => true
          | Scope(_, rule8)                   => isOptional(rule8)
          | Call(name, _)                     =>
            match (this.GetRule(name).Rule)
            {
              | Some(r) =>
                if (visited.Add(r))
                  isOptional(r)
                else
                  false
              | _ => false
            }

          | Chars | Fsm                       => false
          | Cut                               => false // ???
        }
      }
      
      isOptionalImpl(rule, HashSet([rule]))
    }

    public override ToString() : string
    {
      def sb = StringBuilder();
      _ = sb.AppendLine($"Count:$Count");
      _ = sb.AppendLine($"_startRuleName:$_startRuleName");
      _ = sb.AppendLine("rules:");
      foreach((name, rule) in _grammar)
      {
        _ = sb.AppendLine($"  name:$(name)");
        _ = sb.AppendLine($"  rule type:$(rule.GetType().ToString())");
        _ = sb.AppendLine($"  rule:$(rule.ToString())");
        _ = sb.AppendLine(string.Empty);
      }

      sb.ToString()
    }
  }
}
