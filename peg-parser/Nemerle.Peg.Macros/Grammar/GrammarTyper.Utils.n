using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Parsetree.PExpr;
using Nemerle.Compiler.Token;

using System;
using System.Collections.Generic;
using System.Linq;

using Nemerle.Compiler.Util;

namespace Nemerle.Peg
{
  public partial module GrammarTyper
  {
    public IsOptimizableOptionType(ty : RuleType) : bool
    {
      | Tuple(types) =>
        match (types.Filter(ty => !(ty is RuleType.Void)))
        {
          | [Chars] => true
          | _       => false
        }
      | _ => false
    }

    public RuleTypeToNType(ruleType : RuleType, typer : Typer) : TypeVar
    {
      def ruleTypeToNType(_ : RuleType)
      {
        | Option(ty) when GrammarTyper.IsOptimizableOptionType(ty)
        | Chars        => FixedType.Class(typer.Manager.LookupTypeInfo("Nemerle.Peg.NToken", 0), [])
        | NType(ty)    => ty
        | List(ty)     => FixedType.Class(typer.Manager.LookupTypeInfo("System.Collections.Generic.List", 1), [ruleTypeToNType(ty)])
        | Option(ty)   => FixedType.Class(typer.Manager.LookupTypeInfo("Nemerle.Core.option", 1), [ruleTypeToNType(ty)])
        | Tuple(types) =>
          match (types.MapFiltered(ty => !(ty is RuleType.Void), ruleTypeToNType))
          {
            | [ty]  => ty
            | types => FixedType.Tuple(types)
          }

        | Void         => FixedType.Void()
        | None         => assert(false)
      }
      ruleTypeToNType(ruleType)
    }
  }
}
