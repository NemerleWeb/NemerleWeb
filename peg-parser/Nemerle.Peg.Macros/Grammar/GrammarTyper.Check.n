using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Parsetree.PExpr;
using Nemerle.Compiler.Token;

using System;
using System.Collections.Generic;
using System.Linq;

using Nemerle.Compiler.Util;
using Nemerle.Imperative;

using Nemerle.Profiling;
using System.Diagnostics;

namespace Nemerle.Peg
{
  public partial module GrammarTyper
  {
    mutable _debug = true;
    
    public Check(grammar : Grammar) : void
    {
      CheckLeftRec(grammar);
      CheckLeftRecLiteralOrder(grammar);
    }
    
    public CheckLeftRec(grammar : Grammar) : void
    {
      //assert2(false);
      def memoize = Hashtable();
      def timer   = Stopwatch.StartNew();
      
      mutable recRules;
      def hasLeftRecImpl(rule : Rule, visited : Set[NameRef], path : list[NameRef]) : bool
      {
        mutable value;
        when (memoize.TryGetValue(rule, out value))
          return value;
        
        def hasLeftRec = hasLeftRecImpl(_, visited, path);
        
        def res =
          match (rule)
          {
            | Capture(_, rule1)                 => hasLeftRec(rule1)
            | Choice(rules2)                    => rules2.Exists(hasLeftRec)
            | Sequence(rules3)                  =>
              breakLoop : 
              {
                foreach (r in rules3)
                {
                  when (hasLeftRec(r))
                    breakLoop(true);
                    
                  unless (grammar.IsOptional(r)) // stop if 'r' not optional
                    breakLoop(false);
                }
                  
                false
              }
                        
            | RepeatMin(0, rule4)               => hasLeftRec(rule4) // *
            | RepeatMin(_, rule5)               => hasLeftRec(rule5) // +
            | RepeatMinMax(0, _, rule6)         => hasLeftRec(rule6) // ?
            | RepeatMinMax(_, _, rule7)         => hasLeftRec(rule7)
            | Not(rule8)                        => hasLeftRec(rule8)
            | And(rule9)                        => hasLeftRec(rule9)
            | Scope(_, rule10)                  => hasLeftRec(rule10)
            | Call(name, _)                     =>
              match (grammar.GetRule(name).Rule)
              {
                | Some(r) =>
                  if (visited.Contains(name))
                  {
                    if (path == null)
                      hasLeftRecImpl(r, visited, [name]) // make rec path 
                    else if (path.Last.Equals(name))
                    {
                      recRules = path.Reverse();
                      true
                    }
                    else
                      hasLeftRecImpl(r, visited, name :: path) // make rec path 
                  }
                  else if (path == null)
                    hasLeftRecImpl(r, visited.Add(name), null)
                  else
                    hasLeftRecImpl(r, visited.Add(name), name :: path)
                  
                | None => false
              }

            | Chars | Fsm                       => false
            | Cut                               => false // ???
          };
        
        memoize[rule] = res;
        
        res
      }

      def tryFindLeftRec()
      {
        def recSets = List();
        // make recurcive rule set
        foreach (name in grammar.Names)
        {
          when (grammar.GetRule(name).Rule is Some(rule))
          when (hasLeftRecImpl(rule, Set(), null))
          {
            //assert2(!_debug);
            recSets.Add(recRules);
          }
        }
        // find minimal rule set and report error about it
        when (!recSets.IsEmpty())
        {
          mutable min = recSets.NFirst();
          
          foreach (s in recSets.Skip(1))
            when (HashSet(min).IsSupersetOf(HashSet(s))) //TODO: VladD2: Implement IsSupersetOf for Set[T].
              min = s;
        
          foreach (name in min)
            Message.Error(name.Location, $"A left recursion is detected for the following rules: ..$min.");
        }
      }

      tryFindLeftRec();
      
      //Debug.Assert(false, $"$(timer.Elapsed)");
      Debug.WriteLine($"CheckLeftRec took: $(timer.Elapsed)");
    }

    public CheckLeftRecLiteralOrder(_grammar : Grammar) : void
    {
      //def checkLitOrderImpl(rule : Rule, visited : Set[NameRef]) : bool
      //{
      //  def checkLitOrder = checkLitOrderImpl(_, visited);
        
      //  match (rule)
      //  {
      //    | Capture(_, rule1)                  => checkLitOrder(rule1)
      //    | Choice(rules2)                     => rules2.Exists(checkLitOrder)
      //    | Sequence(rules3)                   =>
      //      breakLoop : 
      //      {
      //        foreach (r in rules3)
      //        {
      //          when (checkLitOrder(r))
      //            breakLoop(true);
                  
      //          unless (grammar.IsOptional(r)) // stop if 'r' not optional
      //            break;
      //        }
                
      //        false
      //      }
                      
      //    | RepeatMin(0, rule4)               => checkLitOrder(rule4) // *
      //    | RepeatMin(_, rule5)               => checkLitOrder(rule5) // +
      //    | RepeatMinMax(0, _, rule6)         => checkLitOrder(rule6) // ?
      //    | RepeatMinMax(_, _, rule7)         => checkLitOrder(rule7)
      //    | Not(rule8)                        => checkLitOrder(rule8)
      //    | And(rule9)                        => checkLitOrder(rule9)
      //    | Scope(_, rule10)                  => checkLitOrder(rule10)
      //    | Recovery(_, _stopper, _skipRule)  => false // checkLitOrder(stopper) && checkLitOrder(skipRule)
      //    | Call(name)                        =>
      //      def r = grammar.GetRule(name).Rule;
      //      if (visited.Contains(name))
      //      {
      //        recRules = visited.Replace(name);
      //        true
      //      }
      //      else
      //        hasLeftRecImpl(r, visited.Add(name))
            
            
      //    | Chars | ExtensionPoint | Fsm      => false
      //    | Cut                               => false // ???
      //  }
      //}
    }
  }
}
