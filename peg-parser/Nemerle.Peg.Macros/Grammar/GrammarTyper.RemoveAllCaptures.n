using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Parsetree.PExpr;
using Nemerle.Compiler.Token;

using System;
using System.Collections.Generic;
using System.Linq;

using Nemerle.Compiler.Util;

namespace Nemerle.Peg
{
  public partial module GrammarTyper
  {
    public RemoveAllCaptures(curRule : Rule) : Rule
    {
      | Capture(_, rule)             => RemoveAllCaptures(rule);
      | Choice(rules)                => Rule.Choice(curRule.Location, rules.Map(RemoveAllCaptures))
      | Sequence(rules)              => Rule.Sequence(curRule.Location, rules.Map(RemoveAllCaptures))
      | RepeatMin(min, rule)         => Rule.RepeatMin(curRule.Location, min, RemoveAllCaptures(rule))
      | RepeatMinMax(min, max, rule) => Rule.RepeatMinMax(curRule.Location, min, max, RemoveAllCaptures(rule))
      | Not(rule)                    => Rule.Not(curRule.Location, RemoveAllCaptures(rule))
      | And(rule)                    => Rule.And(curRule.Location, RemoveAllCaptures(rule))
      | Scope(name, rule)            => Rule.Scope(curRule.Location, name, RemoveAllCaptures(rule))
      | Call | Chars | Fsm | Cut     => curRule
    }

    public RemoveAllCaptures(grammar : Grammar) : Grammar
    {
      grammar.TransformRules(rd =>
        match (rd.Rule)
        {
          | Some(rule) => Some(RemoveAllCaptures(rule))
          | None       => None();
        })
    }
  }
}
