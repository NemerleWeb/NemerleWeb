using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Console;
using System.Collections.Generic;

namespace Nemerle.Peg
{
  /// <summary>
  /// Description of DFSMTransform.
  /// </summary>
  public module DFSMTransform
  {
    public Normalize(fsm : FSM) : FSM
    {
      def transitions = fsm.Transitions.Fold(Hashtable(), (transition : Transition, transitions) =>
        transitions.Update((transition.From, transition.To), (RangeSet(), false), (chars, epsilon) =>
          match (transition)
          {
          | Symbol(ch) => (ch.Sum(chars), epsilon);
          | Epsilon    => (chars, true);
          }
        )
      );

      def transitions = transitions.Fold([], ((from, to), (chars, epsilon), transitions) =>
      {
        def transitions = if (!chars.Ranges.IsEmpty())
          Transition.Symbol(from, to, chars) :: transitions;
        else
          transitions;

        def transitions = if (epsilon)
          Transition.Epsilon(from, to) :: transitions;
        else
          transitions;

        transitions;
      });
      fsm.SetTransitions(transitions);
    }

    public Do(fsm : FSM) : FSM
    {
      def fsm = Normalize(fsm);
      def symbolTransitions(state)
      {
        fsm.Transitions.Filter(t => t.From == state && t is Transition.Symbol).Map(_ :> Transition.Symbol)
      }

      def epsilonTransitions(state)
      {
        fsm.Transitions.Filter(t => t.From == state && t is Transition.Epsilon).Map(_ :> Transition.Epsilon)
      }

      def epsilonMove(set : Set[int])
      {
        def rec(state, set)
        {
          def states = epsilonTransitions(state).Map(_.To).Filter(state => !set.Contains(state));
          states.Fold(set.AddList(states), rec);
        }
        set.Fold(set, rec);
      }

      def stateMap = Hashtable();
      def states = Nemerle.Collections.Stack();
      mutable result = FSM();

      def addStateSet(stateSet)
      {
        def stateSet = epsilonMove(stateSet);
        match (stateMap.Get(stateSet))
        {
        | Some(resultState) => resultState;
        | None =>
          def resultState = stateMap.Count;
          stateMap.Add(stateSet, resultState);
          states.Push((stateSet, resultState));
          ////Console.WriteLine($"\t\t\t\t\t\tnew state set $resultState $stateSet");
          result = result.NewState(resultState);
          resultState;
        }
      }
      _ = addStateSet(Set().Add(fsm.StartState));
      while (states.Count > 0)
      {
        def (stateSet, fromState) = states.Pop();
        def addSymbolTransition(fromCh, toCh, toState)
        {
          def transition = Transition.Symbol(fromState, toState, RangeSet().AddRange(fromCh :> char, toCh :> char));
          result = result.AddTransition(transition);
          //Console.Write($"\t\t$transition");
        }

        //Console.WriteLine($"############# stateSet $stateSet fromState $fromState ###############");

        def allChars = Hashtable();
        foreach (state in stateSet)
          foreach (transition in symbolTransitions(state))
            foreach (range in transition.Chars.Ranges)
            {
              //Console.WriteLine($"$range");
              _ = allChars.Update((range.from : int, true), [], states => transition.To :: states);
              _ = allChars.Update((range.to : int, false), [], states => transition.To :: states);
            }

        def allChars = allChars.MapToArray(pair => (pair.Key[0], pair.Key[1], pair.Value));
        def allChars = allChars.SortInplace(((c1, b1, _), (c2, b2, _)) =>
          {
            def res = c1.CompareTo(c2);
            if (res == 0)
              -b1.CompareTo(b2)
            else
              res
          });

        mutable lastCh;
        mutable toStateSet = Set();
        //Console.WriteLine($"..$allChars");
        foreach ((ch, isStart, states) in allChars)
        {
          //Console.Write($"@@@ $((ch, ch :> char, isStart, states))\t$toStateSet");
          if (toStateSet.Count != 0)
          {
            if (isStart)
            {
              when (ch > lastCh)
              {
                addSymbolTransition(lastCh, ch - 1, addStateSet(toStateSet));
                lastCh = ch;
              }
            }
            else
            {
              addSymbolTransition(lastCh, ch, addStateSet(toStateSet));
              lastCh = ch + 1;
            }
          }
          else
          {
            lastCh = ch;
          }
          if (isStart)
            toStateSet = toStateSet.AddList(states);
          else
            toStateSet = toStateSet.RemoveList(states);
          //Console.WriteLine();
        }
      }
      foreach (kv in stateMap)
      {
        when (kv.Key.Exists(s => fsm.OkStates.Contains(s)))
          result = result.AddOkState(kv.Value);
      }
      Minimize(result);
    }

    public Minimize(fsm : FSM) : FSM
    {
      def fsm = Normalize(fsm);

      def stateMap = array(fsm.StateCount);
      def stateSets = List();
      def addStateSet(set)
      {
        foreach (state in set)
          stateMap[state] = stateSets.Count;
        stateSets.Add(set);
      }

      def stateTransitions = array(fsm.StateCount);
      for (mutable i = 0; i < fsm.StateCount; ++i)
        stateTransitions[i] = [];
      foreach (transition in fsm.Transitions)
        stateTransitions[transition.From] = (transition :> Transition.Symbol) :: stateTransitions[transition.From];

      def stateChars = stateTransitions.MapToArray(t => t.Fold(RangeSet(), (t, r) => r.Sum(t.Chars)));

      def initalSplit(states)
      {
        def sets = Hashtable();
        foreach (state in states)
          _ = sets.Update(stateChars[state], [], state :: _);
        foreach (kv in sets)
          addStateSet(kv.Value)
      }
      initalSplit(fsm.FailStates);
      initalSplit(fsm.OkStates);

      def transitionMap = array(64 * 1024);
      mutable updated = true;
      while (updated)
      {
        updated = false;
        for (mutable i = 0; i < stateSets.Count; ++i)
        {
          def states = stateSets[i];
          when (states.Length > 1)
          {
            def state = states.Head;
            foreach (transition in stateTransitions[state])
              foreach (chars in transition.Chars.Ranges)
                foreach (ch in $[(chars.from : int)..(chars.to : int)])
                  transitionMap[ch] = stateMap[transition.To];
            def isMatch(state)
            {
              res:
              {
                foreach (transition in stateTransitions[state])
                  foreach (chars in transition.Chars.Ranges)
                    foreach (ch in $[(chars.from : int)..(chars.to : int)])
                      when (transitionMap[ch] != stateMap[transition.To])
                        res(false);
                true;
              }
            }
            def (matchStates, notMatchStates) = states.Partition(isMatch);
            when (!notMatchStates.IsEmpty())
            {
              stateSets[i] = matchStates;
              addStateSet(notMatchStates);
              updated = true;
              --i;
            }
          }
        }
      }

      mutable result = FSM();
      result = result.NewState(stateSets.Count - 1);
      result = result.SetStartState(stateMap[fsm.StartState]);
      foreach (transition in fsm.Transitions)
      {
        def transition = transition :> Transition.Symbol;
        def from = stateMap[transition.From];
        def to   = stateMap[transition.To];
        result = result.AddTransition(Transition.Symbol(from, to, transition.Chars));
      }
      foreach (state in fsm.OkStates)
        result = result.AddOkState(stateMap[state]);

      Normalize(result);
    }
  }
}
