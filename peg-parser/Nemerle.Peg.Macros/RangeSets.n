using System;
using System.Globalization;
using System.Globalization.UnicodeCategory;
using SCG = System.Collections.Generic;

using Nemerle.Collections;
using Nemerle.Extensions;

namespace Nemerle.Peg
{
  public module RangeSets
  {
    private _rangeSetTable : Hashtable[string, RangeSet] = Hashtable() <-
    [
      ("Any", RangeSet().AddRange(char.MinValue, char.MaxValue))
    ];

    this()
    {
      def ranges = SCG.List();
      mutable curCat = char.GetUnicodeCategory(0 :> char);
      mutable start = 0;
      for (mutable i = 1; i <= char.MaxValue : int; ++i)
      {
        def cat = char.GetUnicodeCategory(i :> char);
        when (cat != curCat)
        {
          ranges.Add((curCat, RangeSet.Range(start :> char, (i - 1) :> char)));
          start = i;
          curCat = cat;
        }
      }
      ranges.Add((curCat, RangeSet.Range(start :> char, char.MaxValue)));
      ranges.Reverse();

      def classes =
      [
        ("Lu", UppercaseLetter),
        ("Ll", LowercaseLetter),
        ("Lt", TitlecaseLetter),
        ("Lm", ModifierLetter),
        ("Lo", OtherLetter),
        ("Mn", NonSpacingMark),
        ("Mc", SpacingCombiningMark),
        ("Me", EnclosingMark),
        ("Nd", DecimalDigitNumber),
        ("Nl", LetterNumber),
        ("No", OtherNumber),
        ("Zs", SpaceSeparator),
        ("Zl", LineSeparator),
        ("Zp", ParagraphSeparator),
        ("Cc", Control),
        ("Cf", Format),
        ("Cs", Surrogate),
        ("Co", PrivateUse),
        ("Pc", ConnectorPunctuation),
        ("Pd", DashPunctuation),
        ("Ps", OpenPunctuation),
        ("Pe", ClosePunctuation),
        ("Pi", InitialQuotePunctuation),
        ("Pf", FinalQuotePunctuation),
        ("Po", OtherPunctuation),
        ("Sm", MathSymbol),
        ("Sc", CurrencySymbol),
        ("Sk", ModifierSymbol),
        ("So", OtherSymbol),
        ("Cn", OtherNotAssigned)
      ];

      foreach((shortName, cat) in classes)
      {
        def longName = cat.ToString();
        def set = ranges
          .FilterLazy((c, _) => c == cat)
          .Fold(RangeSet(), ((_, range), set) => set.AddRange(range));
        _rangeSetTable.Add(shortName, set);
        _rangeSetTable.Add(longName, set);
      }
    }

    public GetRangeSetByName(name : string) : option[RangeSet]
    {
      match(_rangeSetTable.TryGetValue(name))
      {
        | (range, true) => Some(range)
        | _ => None()
      }
    }
  }
}