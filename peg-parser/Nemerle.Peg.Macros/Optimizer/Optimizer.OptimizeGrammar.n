using System;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

namespace Nemerle.Peg
{
  partial internal class Optimizer
  {
    public static CalcRulesWeights(grammar : Grammar) : Map[NameRef, option[int]]
    {
      def calcRuleWeight(name, getWeight)
      {
        def calc(rule)
        {
          def add(_, _)
          {
            | (Some(weight1), Some(weight2)) => Some(weight1 + weight2);
            | _ => None();
          }
          def weight = match (rule : Rule)
          {
            | Call(name, _)            => getWeight(name);
            | Choice(rules)
            | Sequence(rules)          => rules.Fold(Some(0), (rule, weight) => add(weight, calc(rule)));
            | Scope(_, rule)
            | Capture(_, rule)
            | RepeatMin(_, rule)
            | RepeatMinMax(_, _, rule)
            | Not(rule)
            | And(rule)                => calc(rule);
            | Chars | Fsm | Cut        => Some(0)
          }
          add(weight, Some(1));
        }
        match (grammar.GetRule(name).Rule)
        {
          | Some(rule) => calc(rule)
          | _          => Some(0)
        }
      }
      Util.GraphWalk(grammar.Names, calcRuleWeight, _ => None());
    }

    public static OptimizeGrammar(grammar : Grammar) : Grammar
    {
      def weights = CalcRulesWeights(grammar);
      def ruleMap = Util.GraphWalk(grammar.Names, OptimizeRule(_, _, grammar, weights), _ => assert(false));
      grammar.TransformRules(rd => ruleMap.Get(rd.Name))
    }
  }
}
