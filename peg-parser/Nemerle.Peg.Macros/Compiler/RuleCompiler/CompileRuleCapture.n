using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nemerle.Peg
{
  partial internal class RuleCompiler
  {
    public CompileRuleCapture(rule : Rule.Capture, results : list[string]) : PExpr
    {
      match (rule)
      {
        | Capture(Argument(Chars), subrule) =>
          def code = CompileRule(subrule, []);
          match (results)
          {
            | []       => code;
            | [result] =>
              <[
                def newPos = $code;
                when (newPos >= 0)
                  $(result : dyn) = Nemerle.Peg.NToken(pos, newPos);
                newPos
              ]>
            | _ => assert(false);
          }

        | Capture(Argument, subrule) => CompileRule(subrule, results);
        | Capture(Handler(name, _, retType), subrule) =>
          match (results)
          {
            | []       => CompileRule(subrule, [])
            | [result] =>
              def varNames     = MakeVariablesForRule(subrule);
              def subRulesCode = CompileRule(subrule, varNames);

              def ty = match(retType : RuleType)
              {
                | NType(ty) => ty
                | _         => assert(false);
              }

              def omitLocation = _ruleToCompile.Attributes.Exists(_ is RuleAttribute.OmitLocation);
              def setResultLocation =
                if (!omitLocation && ty.TryRequire(_pegLocatedType))
                  match(varNames)
                  {
                    | []  with (start = <[ pos ]>,
                                end   = <[ newPos ]>)
                    | _   with (start = <[ Nemerle.Peg.Internal.EvalLocationStart($(varNames.Head : dyn), pos) ]>,
                                end   = <[ Nemerle.Peg.Internal.EvalLocationEnd($(varNames.Last() : dyn), newPos) ]>)
                      =>
                      <[ $(result : dyn).Location = Nemerle.Peg.Location(_parsingSource, $start, $end); ]>
                  }
                else
                  <[ () ]>;

              def names = _grammarCompiller.DefineMemoize(name, ty);

              def setResult =
                if (_grammarCompiller.GetHandlerMethods().Contains(name))
                  <[ $(result : dyn) = $(name.Id : dyn)(..$(varNames.Map(var => <[ $(var : dyn) ]>))) ]>
                else if (varNames.Count() == 1)
                  <[ $(result : dyn) = $(varNames.Head : dyn) ]>
                else
                  PExpr.Error("Too many variables.");

              DefVars(varNames, <[
                {
                  if ($(names.MemPos : dyn) == pos)
                  {
                    when ($(names.MemNewPos : dyn) >= 0)
                      $(result : dyn) = $(names.MemResult : dyn);
                    $(names.MemNewPos : dyn)
                  }
                  else
                  {
                    def newPos = $subRulesCode;

                    $(names.MemPos : dyn) = pos;
                    $(names.MemNewPos : dyn) = newPos;

                    if (newPos >= 0)
                    {
                      $setResult;
                      $setResultLocation;
                      $(names.MemResult : dyn) = $(result : dyn);
                    }
                    else
                      when ($(names.MaxRollbackPos : dyn) < pos)
                        $(names.MaxRollbackPos : dyn) = pos;

                    newPos
                  }
                }
              ]>)
            | _ => assert(false);
          }
      }
    }
  }
}
