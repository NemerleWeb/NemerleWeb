using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nemerle.Peg
{
  partial internal class RuleCompiler
  {
    public CompileRuleRepeatMin(rule : Rule.RepeatMin, results : list[string]) : PExpr
    {
      def (initialising, addTokensToList, ruleCode) = MakeListCode(results, rule.rule);
      def code = match (rule)
      {
        | RepeatMin(0, _) =>
          <[
            def rep(pos : int)
            {
              def newPosCompileRuleRepeatMin0 = $ruleCode;
              if (newPosCompileRuleRepeatMin0 >= 0)
              {
                $addTokensToList;
                rep(newPosCompileRuleRepeatMin0)
              }
              else
                pos
            }
            rep(position)
          ]>

        | RepeatMin(minCount, _) =>
          <[
            def rep(count, pos)
            {
              def newPosCompileRuleRepeatMin = $ruleCode;
              if (newPosCompileRuleRepeatMin >= 0)
              {
                $addTokensToList;
                rep(count + 1, newPosCompileRuleRepeatMin)
              }
              else if (count >= $(minCount : int))
                pos
              else
                -1
            }
            rep(0, position)
          ]>
      }
      PrepandExprs(initialising, code);
    }
  }
}
