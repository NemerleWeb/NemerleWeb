using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nemerle.Peg
{
  partial internal class RuleCompiler
  {
    public CompileRuleRepeatMin(rule : Rule.RepeatMin, results : list[string], global : bool, counter : int) : PExpr
    {
      /*def y = <[ $(x : usesite) ]>;
      def x = <[ parameter: x : int ]>;
      def xx = [x];
      def q = <[
        def f(..$xx)
        {
          f($y);
        }
      ]>;*/
      
      
      def pos = if (global) <[ position ]> else <[ $(("pos" + counter) : usesite) ]>;
      def newPos = <[ $(("pos" + (counter + 1)) : usesite) ]>;
      def rep = <[ $(("rep" + counter) : usesite) ]>;
      def (initialising, addTokensToList, ruleCode) = MakeListCode(results, rule.rule, counter + 1);
      def code = match (rule)
      {
        | RepeatMin(0, _) =>
          <[
            mutable $rep = null;
            $rep = ($newPos) =>
            {
              def newPosCompileRuleRepeatMin0 = $ruleCode;
              if (newPosCompileRuleRepeatMin0 >= 0)
              {
                $addTokensToList;
                $rep(newPosCompileRuleRepeatMin0)
              }
              else
                $newPos
            };
            $rep($pos)
          ]>

        | RepeatMin(minCount, _) =>
          <[
            mutable $rep = null;
            $rep = (count, $newPos : int) =>
            {
              def newPosCompileRuleRepeatMin = $ruleCode;
              if (newPosCompileRuleRepeatMin >= 0)
              {
                $addTokensToList;
                $rep(count + 1, newPosCompileRuleRepeatMin)
              }
              else if (count >= $(minCount : int))
                $newPos
              else
                -1
            }
            $rep(0, $pos)
          ]>
      }
      PrepandExprs(initialising, code);
    }
  }
}
