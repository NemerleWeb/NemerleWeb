using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nemerle.Peg
{
  partial internal class RuleCompiler
  {
    public CompileRuleRepeatMin(rule : Rule.RepeatMin, results : list[string], global : bool, counter : int) : PExpr
    {
      def pos = if (global) <[ position ]> else <[ $(("pos" + (counter - 1)) : usesite) ]>;
      def newPosName = "pos" + (counter /*+ 1*/);
      def newPos = <[ $(newPosName : usesite) ]>;
      def newPosParam = <[ parameter: $(newPosName : usesite) ]>;
      def rep = <[ $(("rep" + counter) : usesite) ]>;
      def (initialising, addTokensToList, ruleCode) = MakeListCode(results, rule.rule, counter /*+ 1*/);
      def code = match (rule)
      {        
        | RepeatMin(0, _) =>
          // TODO: Restore
          def newPosCompileRuleRepeatMin0 = <[ $(("newPosCompileRuleRepeatMin0" + counter) : usesite) ]>;
          def repParams = [ newPosParam ];
          <[
            def $(rep : name)(..$repParams)
            {
              def $newPosCompileRuleRepeatMin0 = $ruleCode;
              if ($newPosCompileRuleRepeatMin0 >= 0)
              {
                $addTokensToList;
                $rep($newPosCompileRuleRepeatMin0)
              }
              else
                $newPos
            }
            $rep($pos)
          ]>

        | RepeatMin(minCount, _) =>
          // TODO: Restore
          def newPosCompileRuleRepeatMin = <[ $(("newPosCompileRuleRepeatMin" + counter) : usesite) ]>;
          def repParams = [ <[ parameter: count ]>, newPosParam ];
          <[
            def $(rep : name)(..$repParams)
            {
              def $newPosCompileRuleRepeatMin = $ruleCode;
              if ($newPosCompileRuleRepeatMin >= 0)
              {
                $addTokensToList;
                $rep(count + 1, $newPosCompileRuleRepeatMin)
              }
              else if (count >= $(minCount : int))
                $newPos
              else
                -1
            }
            $rep(0, $pos)
          ]>
      }
      PrepandExprs(initialising, code);
    }
  }
}
