using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nemerle.Peg
{
  partial internal class RuleCompiler
  {
    public CompileRuleRepeatMinMax(rule : Rule.RepeatMinMax, results : list[string]) : PExpr
    {
      match (rule)
      {
        | RepeatMinMax(0, 1, subrule)    =>
          def (initialising, setExpr, setNoneExpr, ruleCode) = match (subrule)
          {
            | Capture(Handler(_, _, ty), _) when GrammarTyper.IsOptimizableOptionType(ty)
            | Capture(Argument(ty), _) when GrammarTyper.IsOptimizableOptionType(ty) =>
              MakeSubruleCode(results, subrule,
                              _                      => <[ () ]>,
                              (varRef, variableRefs) => match (variableRefs)
                                                        {
                                                          | [variableRef] => <[ $varRef = $variableRef; ]>
                                                          | _ => assert(false);
                                                        },
                              _                      => <[ () ]>);

            | _ =>
              MakeSubruleCode(results, subrule,
                              _                      => <[ () ]>,
                              (varRef, variableRefs) => <[ $varRef = Some(..$variableRefs); ]>,
                              varRef                 => <[ $varRef = None(); ]>);
          }
          PrepandExprs(initialising, <[
            def newPos = $ruleCode;
            if (newPos >= 0)
            {
              $setExpr;
              newPos
            }
            else
            {
              $setNoneExpr;
              pos
            }
          ]>)

        | RepeatMinMax(minCount, maxCount, subrule)    =>
          def (initialising, addTokensToList, ruleCode) = MakeListCode(results, subrule);
          PrepandExprs(initialising, <[
            def rep(count, pos)
            {
              if (count == $(maxCount : int))
                pos
              else
              {
                def newPos = $ruleCode;
                if (newPos >= 0)
                {
                  $addTokensToList;
                  rep(count + 1, newPos)
                }
                else if (count >= $(minCount : int))
                  pos
                else
                  -1
               }
            }
            rep(0, pos)
          ]>)
      }
    }
  }
}
