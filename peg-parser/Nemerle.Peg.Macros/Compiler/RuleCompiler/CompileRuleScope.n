using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nemerle.Peg
{
  partial internal class RuleCompiler
  {
    public CompileRuleScope(rule : Rule.Scope, results : list[string]) : PExpr
    {
      def (beginName, beginRes, endName, endRes) = _grammarCompiller.GetScopeMethods(rule.name.Id);
      def subRuesCode = CompileRule(rule.rule, results);

      when (endRes.IsNone && beginRes.IsNone)
        Message.Error(rule.name.Location, $"You must specify at least one scope handler for scope $(rule.name). Scope handlers must have signatures: '$beginName() : bool/void', '$endName(isOk : bool) : bool/void'.");

      def code =
        match (endRes)
        {
          | Some(true) =>
            <[
              def newPos = $subRuesCode;
              if ($(endName : dyn)(newPos >= 0))
                newPos
              else
                -1
            ]>

          | Some(false) =>
            <[
              def newPos = $subRuesCode;
              $(endName : dyn)(newPos >= 0);
              newPos
            ]>

          | None => subRuesCode
        };

      match (beginRes)
      {
        | Some(true) =>
          <[
            if ($(beginName : dyn)())
              $code
            else
              -1
          ]>

        | Some(false) =>
          <[
            $(beginName : dyn)();
            $code
          ]>

        | None => code
      }
    }
  }
}
