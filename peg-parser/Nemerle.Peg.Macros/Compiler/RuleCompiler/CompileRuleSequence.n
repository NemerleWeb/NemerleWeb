using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nemerle.Peg
{
  partial internal class RuleCompiler
  {
    public CompileRuleSequence(rule : Rule.Sequence, results : list[string], global : bool) : PExpr
    {
      def generate(rules : list[Rule], results : list[string], global : bool) : PExpr
      {
        match (rules)
        {
          | [rule]        => CompileRule(rule, results, global);
          | rule :: rules =>
            match (rule)
            {
              | Capture(Handler(_, _, ty), _) when !(ty is RuleType.None || ty is RuleType.Void)
              | Capture(Argument(ty), _)      when !(ty is RuleType.None || ty is RuleType.Void)
                =>
                match (results)
                {
                  | result :: results =>
                    def ruleCode = CompileRule(rule, [result], global);
                    <[
                      {
                        def pos = $ruleCode;
                        if (pos >= 0) $(generate(rules, results, false)) else -1
                      }
                    ]>
                  | _ => PExpr.Error("Empty result list")
                }

              | _ =>
                def ruleCode = CompileRule(rule, [], global);
                <[
                  {
                    def pos = $ruleCode;
                    if (pos >= 0) $(generate(rules, results, false)) else -1
                  }
                ]>
            }

          | [] =>
            assert(results.Length == 0);
            <[ { pos } ]>;
        }
      }

      def generateNoResult(rules : list[Rule], global : bool) : PExpr
      {
        match (rules)
        {
          | []            => <[ { pos } ]>
          | [rule]        => CompileRule(rule, [], global)
          | rule :: rules =>
            <[
              def pos = $(CompileRule(rule, [], global));
              if (pos >= 0) $(generateNoResult(rules, false)) else -1
            ]>
        }
      }

      match (results)
      {
        | [] => generateNoResult(rule.rules, global);
        | _  => generate(rule.rules, results, global);
      }
    }
  }
}
