using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nemerle.Peg
{
  partial internal class RuleCompiler
  {
    public _FirstAndFollow(grammar : Grammar) : Map[NameRef, Set[NameRef]]
    {
      def getFirst(rule : Rule) : Set[NameRef]
      {
        match (rule)
        {
          | Chars as c                        => Set().Replace(NameRef(c.Location, c.ToString()))
          | Fsm | And | Not
          | Cut                               => Set()
          | Capture(_, rule)
          | RepeatMin(_, rule)
          | RepeatMinMax(_, _, rule)
          | Scope(_, rule)                    => getFirst(rule);
          | Call(name, _)                     => Set().Add(name)
          | Choice(rules)                     => rules.Fold(Set(), (rule, set) => set.ReplaceRange(getFirst(rule)))
          | Sequence(rules)                   =>
            def loop(rules : list[Rule])
            {
              | RepeatMin(0, rule) :: rules
              | RepeatMinMax(0, _, rule) :: rules
                             => getFirst(rule).ReplaceRange(loop(rules));
              | And :: rules
              | Not :: rules => loop(rules);
              | rule :: _    => getFirst(rule);
              | []           => Set();
            }
            loop(rules)
        }
      }
      mutable follow = grammar.Names.Fold(Map(), (name, map) => map.Add(name, Set()));
      def updateFollow(rule : Rule, f : Set[NameRef]) : void
      {
        match (rule)
        {
          | Call(name, _)                     => follow = follow.Replace(name, follow.Get(name).ReplaceRange(f))
          | Chars | Fsm | And | Not
          | Cut                               => ()
          | RepeatMinMax(_, 1, rule)          => updateFollow(rule, f)
          | RepeatMin(_, rule)
          | RepeatMinMax(_, _, rule)          => updateFollow(rule, f.ReplaceRange(getFirst(rule)))
          | Capture(_, rule)
          | Scope(_, rule)                    => updateFollow(rule, f)
          | Choice(rules)                     => rules.Iter(rule => updateFollow(rule, f))
          | Sequence(rules)                   =>
            def loop(rules : list[Rule], f)
            {
              match (rules)
              {
                | rule :: _ => updateFollow(rule, f);
                | _ => ();
              }
              match (rules)
              {
                | Call(name, _) :: rules => loop(rules, Set().Add(name));
                | RepeatMin(0, rule) :: rules
                | RepeatMinMax(0, _, rule) :: rules
                                => loop(rules, f.ReplaceRange(getFirst(rule)));
                | And :: rules
                | Not :: rules  => loop(rules, f);
                | rule :: rules => loop(rules, getFirst(rule));
                | []            => ();
              }
            }
            loop(rules.Reverse(), f)
        }
      }
      //def print(name, set)
      //{
      //  using (file = IO.File.CreateText(name))
      //  {
      //    foreach ((name, names) in set)
      //    {
      //      file.WriteLine(name);
      //      foreach (name in names)
      //        file.WriteLine($"  $name");
      //      file.WriteLine();
      //    }
      //  }
      //}
      //assert2(false);
      mutable oldFollow;
      do
      {
        oldFollow = follow;
        grammar.Names.Iter(name => match (grammar.GetRule(name).Rule)
        {
          | Some(rule) => updateFollow(rule, follow.Get(name))
          | _ => ();
        });
      }
      while (!follow.Map((_, set) => set).Equals(oldFollow.Map((_, set) => set)));
      //def first = grammar.Names.Fold(Map(), (name, map) => map.Add(name, getFirst(grammar.GetRule(name).Rule)));
      //print("first.txt", first);
      //print("follow.txt", follow);
      follow;
    }
  }
}
