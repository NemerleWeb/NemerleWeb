using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nemerle.Peg
{
  partial internal class RuleCompiler
  {
    public CompileRuleChoice(rule : Rule.Choice, results : list[string]) : PExpr
    {
      def generate(_)
      {
        | []            => [PExpr.Error("Internal PEG macro error: Empty choice.")];
        | [rule]        => [rule];
        | rule :: rules =>
          <[
            def newPos = $rule;
            when (newPos >= 0) res(newPos);
          ]> :: generate(rules)
      }
      def rules = generate(rule.rules.Map(CompileRule(_, results)));
      def rules = rules.Map(fun(_)
      {
        | PExpr.Sequence(rules) => rules
        | rule                  => [rule]
      }).Flatten();
      <[
        (
          res:
          {
            ..$rules
          }
        )
      ]>
    }
  }
}
