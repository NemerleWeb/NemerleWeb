using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nemerle.Peg
{
  partial internal class RuleCompiler
  {
    private CompileRule(currentRule : Rule, results : list[string], global : bool, counter : int) : PExpr
    {
      def code = match (currentRule)
      {
        | And          as rule => assert(results.IsEmpty()); CompileRuleAnd         (rule, global, counter)
        | Not          as rule => assert(results.IsEmpty()); CompileRuleNot         (rule, global, counter)
        | Fsm          as rule => assert(results.IsEmpty()); CompileRuleFsm         (rule)
        | Chars        as rule => assert(results.IsEmpty()); CompileRuleChars       (rule, global, counter)
        | Call         as rule =>                            CompileRuleCall        (rule, results, global, counter)
        | Sequence     as rule =>                            CompileRuleSequence    (rule, results, global, counter)
        | Choice       as rule =>                            CompileRuleChoice      (rule, results, global, counter)
        | RepeatMin    as rule =>                            CompileRuleRepeatMin   (rule, results, global, counter)
        | RepeatMinMax as rule =>                            CompileRuleRepeatMinMax(rule, results, global, counter)
        | Capture      as rule =>                            CompileRuleCapture     (rule, results, global, counter)
        | Scope        as rule =>                            CompileRuleScope       (rule, results, counter)
        | Cut          as rule =>                            CompileRuleCut         (rule, results)
      }

      if (_grammarCompiller.IsDebug)
        match (currentRule)
        {
          | Capture(Argument, _) => code
          | _                    => <[ _ = $($"$currentRule" : string); $code ]>
        }
      else
        code
    }

    public CompileRule() : PExpr
    {
      match (_ruleToCompile.Rule)
      {
        | Some(rule)=>
          if (_useResult)
          {
            match (_ruleToCompile.Attributes.Filter(_ is RuleAttribute.Recovery))
            {
              | [] =>
                <[
                  unchecked
                  {
                    mutable c : char;
                    _ = c; // eliminate warning "a local value c was never used"
                    $(CompileRule(rule, ["result"], true, 0))
                  }
                ]>

              | [recovery is RuleAttribute.Recovery] =>
                def skipRule = CompileRule(Rule.RepeatMin(0, Rule.Sequence([Rule.Not(recovery.stop), recovery.skip])), [], true, 0);
                <[
                  unchecked
                  {
                    mutable c : char;
                    _ = c; // eliminate warning "a local value c was never used"
                    def newPosCompileRule = $(CompileRule(rule, ["result"], true, 0));
                    if (newPosCompileRule < 0)
                    {
                      def skipPos = $skipRule;
                      if (skipPos > newPosCompileRule)
                      {
                        $("result" : dyn) = $(recovery.handlerName.Id : usesite)(newPosCompileRule, skipPos, $(_ruleToCompile.Id : int));
                        ResetMaxRollbackPos();
                        skipPos
                      }
                      else
                        -1
                    }
                    else
                      newPosCompileRule;
                  }
                ]>

              | _ =>
                Message.Error(_ruleToCompile.Location, "RuleAttribute.Recovery can be only one.");
                PExpr.Error();
            }
          }
          else
            <[
              unchecked
              {
                mutable c : char;
                _ = c; // eliminate warning "a local value c was never used"
                $(CompileRule(rule, [], true, 0))
              }
            ]>
        | _ =>
          if (_useResult)
            <[
              unchecked
              {
                mutable c : char;
                _ = c; // eliminate warning "a local value c was never used"
                _ = result;
                -1
              }
            ]>
          else
            <[
              unchecked
              {
                mutable c : char;
                _ = c; // eliminate warning "a local value c was never used"
                -1
              }
            ]>
      }
    }
  }
}
