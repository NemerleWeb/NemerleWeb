using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nemerle.Peg
{
  partial internal class RuleCompiler
  {
    private PrepandExprs(exprs : list[PExpr], mainExpr : PExpr.Sequence) : PExpr.Sequence
    {
      match (mainExpr)
      {
        | <[ { ..$nestedExprs } ]> => <[ { ..$(exprs + nestedExprs) } ]>
      }
    }

    private DefVars(exprs : list[string], mainExpr : PExpr.Sequence) : PExpr.Sequence
    {
      def vars = exprs.Map(var => <[ mutable $(var : dyn); ]>);
      match (mainExpr)
      {
        | <[ { ..$nestedExprs } ]> => <[ { ..$(vars + nestedExprs) } ]>
      }
    }

    private mutable _varCount : int = 0;
    private MakeVariablesForRule(subrule : Rule) : list[string]
    {
      def newVar()
      {
        ++_varCount;
        $"token_$(_varCount)";
      }
      match (subrule)
      {
        | Capture(Handler(_, _, ty), _)
        | Capture(Argument(ty), _)
          =>
          match (ty)
          {
            | Tuple(types) => types.MapFiltered(ty => !(ty is RuleType.Void), _ => newVar())
            | None         => []
            | _            => [newVar()]
          }
        | _ => []
      }
    }

    private MakeSubruleCode(results         : list[string],
                            subrule         : Rule,
                            makeInitExpr    : PExpr               -> PExpr,
                            makeSetExpr     : PExpr * list[PExpr] -> PExpr,
                            makeSetNoneExpr : PExpr               -> PExpr)
      : list[PExpr] * PExpr * PExpr * PExpr
    {
      match (results)
      {
        | [] =>
          ([], <[ () ]>, <[ () ]>, CompileRule(subrule, []))

        | [result] =>
          def result          = <[ $(result : dyn) ]>;
          def variables       = MakeVariablesForRule(subrule);
          def ruleCode        = CompileRule(subrule, variables);
          def initList        = makeInitExpr(result);
          def setExpr         = makeSetExpr(result, variables.Map(var => <[ $(var : dyn) ]>));
          def setNoneExpr     = makeSetNoneExpr(result);
          def initialising    = initList :: variables.Map(var => <[ mutable $(var : dyn); ]>);
          (initialising, setExpr, setNoneExpr, ruleCode)

        | _ => assert(false);
      }
    }

    private MakeListCode(results      : list[string],
                         subrule      : Rule)
      : list[PExpr] * PExpr * PExpr
    {
      def (initialising, setExpr, _setNoneExpr, rule) =
        MakeSubruleCode(results, subrule,
                      varRef                 => <[ $varRef = SCG.List(); ]>, 
                      (varRef, variableRefs) => <[ $varRef.Add(..$variableRefs); ]>,
                      _                      => <[ () ]>);
      (initialising, setExpr, rule)
    }
  }
}
