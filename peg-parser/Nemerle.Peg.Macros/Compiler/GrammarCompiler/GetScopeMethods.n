using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nemerle.Peg
{
  partial internal class GrammarCompiler
  {
    [Memoize]
    private GetAllScopeMethods() : Hashtable[string, list[ClassMember.Function]]
    {
      def isScopeHendler(m : ClassMember)
      {
        | Function as f =>
          f.Name.EndsWith(GrammarCompiler.ScopeBeginSufix, GrammarCompiler.ScopeEndSufix)
          && f.header.Parameters.Length <= 1

        | _ => false
      }
      def methods = _tb.GetParsedMembers(false).Filter(isScopeHendler).Map(_ :> ClassMember.Function);
      def groupedMethods = methods.GroupBy(m => m.Name);
      def methodsMap = Hashtable();
      foreach (g in groupedMethods)
        methodsMap.Add(g.Key, g.NToList());
      methodsMap
    }

    [Memoize]
    public GetScopeMethods(name : string) : string * option[bool] * string * option[bool]
    {
      def boolTy = _tb.InternalType.Boolean;
      def scopeMethods = GetAllScopeMethods();
      def getMethod(name, check)
      {
        def checkReturnType(method)
        {
          match (_tb.BindFixedType(method.header.ReturnType))
          {
            | FixedType.Void            => false
            | ty when ty.Equals(boolTy) => true
            | _                         =>
              Message.Error(method.header.ReturnType.Location, "The return type of scope handler must be void or bool.");
              false
          }
        }
        match (scopeMethods.Get(name))
        {
          | None()         => None()
          | Some([method]) =>
            if (check(method))
              Some(checkReturnType(method))
            else
              None()
          | Some(methods)  =>
            foreach (method in methods)
              Message.Error(method.Location, $"The method '$(name)' is scope handler. The overloading not supported to scope handler.");
            None()
        }
      }

      def beginName = name + GrammarCompiler.ScopeBeginSufix;
      def endName   = name + GrammarCompiler.ScopeEndSufix;

      def beginMethod = getMethod(beginName, method =>
      {
        if (method.header.Parameters.Length != 0)
        {
          Message.Error(method.NameLocation, "A begin scope handler must have no parameters.");
          false
        }
        else
          true
      });

      def endMethod = getMethod(endName, method =>
      {
        if (method.header.Parameters.Length != 1 || !_tb.BindFixedType(method.header.Parameters.Head.Type).Equals(boolTy))
        {
          Message.Error(method.NameLocation, "A end scope handler must have only one boolean parameter.");
          false
        }
        else
          true
      });

      (beginName, beginMethod, endName, endMethod)
    }
  }
}
