using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nemerle.Peg
{
  partial internal class GrammarCompiler
  {
    private DefineGetMaxRollbackPos() : void
    {
      def cmps = _definedMemoize.MapToList(keyValue =>
      {
        def name = keyValue.Key;
        def id = TypedGrammar.GetRule(name).Id;
        def names = keyValue.Value;
        <[
          when (max < $(names.MaxRollbackPos : dyn))
          {
            max = $(names.MaxRollbackPos : dyn);
            ids.Clear();
          }
          when ($(names.MaxRollbackPos : dyn) > 0 && max == $(names.MaxRollbackPos : dyn))
            ids.Add($(id : int));
        ]>
      });

      PegGrammarOptions.GetDefineMethod(_tb)(<[decl:
          public GetMaxRollbackPosAndIds() : int * System.Collections.Generic.List[int]
          {
            def ids = System.Collections.Generic.List(42);
            mutable max = -1;
            {..$cmps}
            (max, ids);
          }
        ]>);

     PegGrammarOptions.GetDefineMethod(_tb)(<[decl:
          public GetMaxRollbackPosAndNames() : int * System.Collections.Generic.List[string]
          {
            def (max, ids) = GetMaxRollbackPosAndIds();
            def names = System.Collections.Generic.List(ids.Count);
            foreach (id in ids)
              names.Add(GetRuleName(id));
            (max, names);
          }
        ]>);
    }
  }
}
