using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nemerle.Peg
{
  partial internal class GrammarCompiler
  {
    private DefineParseMethods() : void
    {
      def tyParam =
        match (TypedGrammar.GetRuleType(TypedGrammar.StartRuleName))
        {
          | Some(RuleType.NType(ty)) => <[ $(ty : typed) ]>
          | _ =>
            Message.Error(_tb.Location,  "Start rule must be a capture rule");
            <[ object ]>
        };

       PegGrammarOptions.GetDefineMethod(_tb)(<[decl:
        public Parse(text : string) : option[$tyParam]
        {
          def (pos, res) = TryParse(text);
          if (pos < 0) None() else Some(res)
        }
      ]>);
       PegGrammarOptions.GetDefineMethod(_tb)(<[decl:
        public Parsex(source : Nemerle.Peg.SourceSnapshot) : option[$tyParam]
        {
          def (pos, res) = TryParsex(source);
          if (pos < 0) None() else Some(res)
        }
      ]>);

      // TODO: #40 Restore
      PegGrammarOptions.GetDefineMethod(_tb)(<[decl:
        public TryParse(text : string) : int * $tyParam
        {
          // TODO: Restore
          //TryParsex(Nemerle.Peg.SourceSnapshot(text))
          // TODO: #41
          TryParsex(Nemerle.Peg.SourceSnapshot(text, text, 0, "", Nemerle.Peg.SourceSnapshot("", "", 0, "", null).MakeLineIndexes(text)))
        }
      ]>);

      if (_typer.Manager.IsIntelliSenseMode)
      {
        PegGrammarOptions.GetDefineMethod(_tb)(<[decl:
          public TryParsex(/*[Nemerle.Assertions.NotNull]*/ source : Nemerle.Peg.SourceSnapshot) : int * $tyParam
          {
            _parsingSource = source;
            mutable result;
            result;
          }
        ]>);
      }
      else
      {
        PegGrammarOptions.GetDefineMethod(_tb)(<[decl:
          public TryParsex(/*[Nemerle.Assertions.NotNull]*/ source : Nemerle.Peg.SourceSnapshot) : int * $tyParam
          {
            ResetMemoization();
            ResetMaxRollbackPos();

            _parsingSource = source;

            mutable result;
            def pos = $(DecorateRuleName(TypedGrammar.StartRuleName.Id) : dyn)(0, _parsingSource.Text, ref result);

            (pos, result)
          }
        ]>);
      }
    }
  }
}
