using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nemerle.Peg
{
  partial internal class GrammarCompiler
  {
    [Memoize]
    public GetHandlerMethods() : Hashtable[NameRef, ClassMember.Function]
    {
      def methodsMap = Hashtable();
      def allMethods = _tb.GetParsedMembers(true).MapFiltered(_ is ClassMember.Function, _ :> ClassMember.Function);
      foreach (ruleDef in TypedGrammar.Rules)
      {
        match (ruleDef.Rule)
        {   // Capture with defined type. User must define handler for it!
          | Some(Rule.Capture(Handler(_, argType, NType(retNType)), _)) when !retNType.Equals(_tb.InternalType.Void) =>
            def types : list[TypeVar] = 
              match (argType)
              {
                | Tuple(types) => types.MapFiltered(ty => !(ty is RuleType.Void), ty => GrammarTyper.RuleTypeToNType(ty, _typer));
                | ty           => [GrammarTyper.RuleTypeToNType(ty, _typer)];
              };

            mutable invalidHandler = false;
            def error(loc, msg)
            {
              Message.Error(loc, msg);
              invalidHandler = true;
            }
            match (allMethods.Filter(m => m.Name == ruleDef.Name.Id))
            {
              | []       =>
                match (types)
                {
                  | [ty] when ty.TryUnify(retNType) => ()
                  | _ => invalidHandler = true
                }

              | [method] =>
                // check parameters types...
                def parms = method.header.Parameters;
                
                if (parms.Length == types.Length)
                  foreach ((need, p) in types.ZipLazy(parms))
                  {
                    def real = _typer.BindFixedType(p.Type);
                    unless (need.TryUnify(real))
                      error(p.Location, $<#The parameter "$(p.Name)" has wrong type $real (need type $need).#>);
                  }
                else
                  error(method.Location, $<#The method-handler of rule "$(ruleDef.Name)" must have $(types.Length) parameters.#>);

                // check return type...
                def methodRetTy = _typer.BindFixedType(method.header.ReturnType);

                unless (methodRetTy.TryRequire(retNType))
                  error(method.header.ReturnType.Location, $<#The method-handler of rule "$(ruleDef.Name)" has wrong return type (need type $retNType).#>);

                unless (invalidHandler)
                  methodsMap.Add(ruleDef.Name, method);

              | methods  => methods.Iter(m => error(m.Location, "Overloading not supported for rule method-handler"));
            }
            
            when (invalidHandler)
              Message.Error(ruleDef.Name.Location, $<#You need define method-handler with signature: $(ruleDef.Name)(_ : ..$(types; ", _ : ")) : $retNType#>);
              
          | _ => ()
        }
      }
      methodsMap
    }
  }
}
