using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nemerle.Peg
{
  partial internal class GrammarCompiler
  {
    public class MemoizeNames
    {
      [Accessor] private _memPos         : string;
      [Accessor] private _memNewPos      : string;
      [Accessor] private _memResult      : string;
      [Accessor] private _maxRollbackPos : string;
      public this(name : NameRef)
      {
        _memPos         = $"__GENERATED_PEG__Memeoize_Pos__$(name.Id)__";
        _memNewPos      = $"__GENERATED_PEG__Memeoize_End__$(name.Id)__";
        _memResult      = $"__GENERATED_PEG__Memeoize_Res__$(name.Id)__";
        _maxRollbackPos = $"__GENERATED_PEG__MaxRollback___$(name.Id)__";
      }
    }

    private _definedMemoize : Hashtable[NameRef, MemoizeNames] = Hashtable();
    public DefineMemoize(name : NameRef, ty : FixedType) : MemoizeNames
    {
      match (_definedMemoize.Get(name))
      {
        | Some(res) => res
        | None =>
          def names = MemoizeNames(name);
           PegGrammarOptions.GetDefineMethod(_tb)(<[ decl:
            private mutable $(names.MemPos : dyn) : int = -1;
          ]>);
          PegGrammarOptions.GetDefineMethod(_tb)(<[ decl:
            private mutable $(names.MemNewPos : dyn) : int = -1;
          ]>);
           PegGrammarOptions.GetDefineMethod(_tb)(<[ decl:
            private mutable $(names.MemResult : dyn) : $(ty : typed);
          ]>);
           PegGrammarOptions.GetDefineMethod(_tb)(<[ decl:
            private mutable $(names.MaxRollbackPos : dyn) : int = -1;
          ]>);
          _definedMemoize.Add(name, names);
          names
      }
    }
  }
}
