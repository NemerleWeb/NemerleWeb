using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nemerle.Peg
{
  partial internal class GrammarCompiler
  {
    public CompileGrammar() : void
    {
      def isPublicRule(ruleDef)
      {
        ruleDef.Attributes.Exists(_ is RuleAttribute.Export)
      }
      foreach (ruleDef when isPublicRule(ruleDef) in TypedGrammar.Rules)
      {
        CallRule(ruleDef.Name, true);
        CallRule(ruleDef.Name, false);
      }
      CallRule(TypedGrammar.StartRuleName, true);
      while (_rulesToCall.Count > 0)
      {
        def (name, useResult) = _rulesToCall.Pop();
        def rule = if (useResult) TypedGrammar.GetRule(name);
                   else           UntypedGrammar.GetRule(name);

        def body =
          try
          {
            RuleCompiler(this, rule, useResult).CompileRule();
          }
          catch
          {
            | ex =>
              Message.Error(name.Location, ex.Message);
              PExpr.Error(ex);
          }

        def method = if (useResult)
        {
          def ty = match (TypedGrammar.GetRuleType(name))
          {
            | Some(NType(ty)) => <[ $(ty : typed) ]>
            | _ =>
              Message.Error(name.Location, "PEG implementation error.");
              PExpr.Error("PEG implementation error.");
          };

          <[decl:
            private $(DecorateRuleName(name.Id) : dyn)(pos : int, text : string, result : ref $ty) : int
            {
              $body;
            }
          ]>
        }
        else
        {
          <[decl:
            private $(DecorateRuleName(name.Id) : dyn)(pos : int, text : string) : int
            {
              $body;
            }
          ]>
        }

        PegGrammarOptions.GetDefineMethod(_tb)(method);                                    
      }
    }
  }
}
