using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Peg
{
  [Record]
  public variant RuleType : Located
  {
    | List   { ty : RuleType; }
    | Option { ty : RuleType; }
    | Tuple  { types : list[RuleType]; }
    | NType  { ty : FixedType; }
    | Chars
    | None
    | Void

    public override ToString() : string
    {
      match (this)
      {
        | List(ty)     => $<#List[$ty]#>
        | Option(ty)   => $<#$ty?#>
        | Tuple(types) => $<#(..$types)#>
        | NType(ty)    => $<#$ty#> // We show this string in error message!
        | Chars        => "Chars"
        | None         => "None"
        | Void         => "Void"
      }
    }

    #region comparison and equalities

    public ToFixedType(manager : ManagerClass) : FixedType
    {
      match (this)
      {
        | List(ty)     => FixedType.Class(manager.Lookup("System.Collections.Generic.List", 1), [ty.ToFixedType(manager)])
        | Option(ty)   => FixedType.Class(manager.Lookup("Nemerle.Core.option", 1), [ty.ToFixedType(manager)])
        | Tuple(types) => FixedType.Tuple(types.Map(t => t.ToFixedType(manager)))
        | NType(ty)    => ty
        | Chars
        | None
        | Void         => manager.InternalType.Void
      }
    }

    [OverrideObjectEquals]
    public Equals(other : RuleType) : bool
    {
      Equals(other, (ty1, ty2) => ty1.Equals(ty2))
    }

    public Equals(other : RuleType, equals : FixedType * FixedType -> bool) : bool
    {
      match (this, other)
      {
        | (List(ty1), List(ty2))          => ty1.Equals(ty2)
        | (Option(ty1), Option(ty2))      => ty1.Equals(ty2)
        | (Tuple(types1), Tuple(types2))  => types1.ForAll2(types2, (x, y) => x.Equals(y))
        | (NType(ty1), NType(ty2))        => equals(ty1, ty2)
        | (Chars, Chars)
        | (None , None)
        | (Void , Void)                   => true
        | _                               => false
      }
    }

    #endregion
  }
}
