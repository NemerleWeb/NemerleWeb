using System;
using SCG = System.Collections.Generic;

using Nemerle;
using Nemerle.Assertions;
using Nemerle.Compiler;
using Nemerle.Macros;
using Nemerle.Utility;
using PT = Nemerle.Compiler.Parsetree;
using TT = Nemerle.Compiler.Typedtree;

namespace Nemerle.Peg.AstUtils
{
  // Ensures that AST object contains node that inherits from `nodeTypeName' class
  // and satisfies pattern `nodePattern'.
  // Code returns boolean value.
  macro ValidateAst(ast : expr, nodePattern : expr)
  {
    def typer = ImplicitCTX();

    def getFirstTypeFromPattern(_)
    {
      | <[ $t as $_ ]>
      | <[ $t when $_ ]> =>
        getFirstTypeFromPattern(t)

      | <[ $(_ : name) ]> as typeName
      | <[ $_.$_ ]> as typeName
      | <[ $typeName(..$_) ]>
      | <[ $typeName where $_ ]> =>
        match(typer.BindFixedType(typeName)) 
        {
          | FixedType.Class(ti, args) when ti.GetTydecl() is TT.TypeDeclaration.VariantOption =>
            FixedType.Class(ti.BaseType, args)
          | t => t
        }

      | error =>
        Message.Error(error.Location, $"invalid pattern expression `$error'");
        typer.Manager.InternalType.Object
    }

    def makeResult(_ : PT.PExpr, x : TT.TExpr)
    {
      def nodeType = getFirstTypeFromPattern(nodePattern);
      def typeHandler(ty : FixedType, var : PT.PExpr) : option[PT.PExpr]
      {
        match(ty)
        {
          | Class when ty.TryProvide(nodeType)  =>
            match(nodePattern)
            {
              | null
              | PT.PExpr.Void =>
                Some(<[ result = true ]>);

              | _ =>
                Some(<[ match($var) { | $nodePattern => result = true | _ => () } ]>);
            }

          | _ =>
            None()
        }
      }
      def typeWalker = TypeWalker(typeHandler);
      typeWalker.Run(x.Type);
      <[
        mutable result = false;
        $(typeWalker.Compile(x));
        result
      ]>
    }

    if(Manager().IsIntelliSenseMode)
      <[ false ]>
    else
      typer.TransformWhenAllTypesWouldBeInfered(makeResult, typer.TypeExpr(ast))
  }
}