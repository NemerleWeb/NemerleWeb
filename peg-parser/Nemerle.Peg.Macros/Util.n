using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Peg
{
  /// <summary>
  /// Description of Util.
  /// </summary>
  public module Util
  {
    public GraphWalk[Key, Value]( start   : IEnumerable[Key]
                                , calc    : Key * (Key -> Value) -> Value
                                , onCycle : Key -> Value)
                                : Map[Key, Value]
    {
      mutable result = Map();
      def visited = Hashtable();
      def getValue(key)
      {
        if (result.Contains(key))
          result.Get(key);
        else
        {
          def value = if (visited.ContainsKey(key))
            onCycle(key);
          else
          {
            visited.Add(key, 0);
            def value = calc(key, getValue);
            visited.Remove(key);
            value;
          }
          result = result.Replace(key, value);
          value;
        }
      }
      foreach (key in start)
        _ = getValue(key);
      result;
    }
  }

  namespace Internal
  {
    using Nemerle.Compiler;
    using Nemerle.Macros;
    using PT = Nemerle.Compiler.Parsetree;

    using EvalLocationXImpl;

    /* Gets StartPos value of 'x' when x is NToken or Located, otherwise returns 'default' */
    macro EvalLocationStart(x, default)
    {
      EvalLocation(ImplicitCTX(), PT.Splicable.Name(PT.Name("StartPos")), x, default)
    }

    /* Gets EndPos value of 'x' when x is NToken or Located, otherwise returns 'default' */
    macro EvalLocationEnd(x, default)
    {
      EvalLocation(ImplicitCTX(), PT.Splicable.Name(PT.Name("EndPos")), x, default)
    }

    internal module EvalLocationXImpl
    {
      public EvalLocation(typer : Typer, prop : PT.Splicable, x : PT.PExpr, default : PT.PExpr) : PT.PExpr
      {
        def pegLocatedType = FixedType.Class(typer.Manager.LookupTypeInfo("Nemerle.Peg.Located", 0), []);
        def pegNTokenType = FixedType.Class(typer.Manager.LookupTypeInfo("Nemerle.Peg.NToken", 0), []);
  
        def makeResult(tX)
        {
          if(tX.Type.TryRequire(pegLocatedType) || tX.Type.TryRequire(pegNTokenType))
            <[ $(tX : typed).$prop ]>
          else
            default
        }

        def tX = typer.TypeExpr(x);
        match(tX.Type.Hint)
        {
          | Some(_) => makeResult(tX)
          | _ =>
            typer.DelayMacro(lastChance =>
              match(tX.Type.Hint)
              {
                | Some(_) => Some(makeResult(tX))
                | _ when lastChance => Some(default)
                | _ => None()
              }
            )
        }
      }
    }
  }
}