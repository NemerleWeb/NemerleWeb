using System;
using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Utility;
using NemerleWeb.Peg; using NemerleWeb;

namespace CSharpParser
{
  [Record][Unit]
  public variant SwitchCaseEntry : Located
  {
    | Case    { id : Expr; }
    | Default 

    [Accessor] body : list[Statement];

    public override ToString() : string 
    {
      match(this) {
        | Case(id) => $"case $id:"
        | Default  => "default:"
      }
    }
  }

  [Record][Unit]
  public class TryCatchEntry : Located
  {
    [Accessor] exceptionType : Expr; // can be null
    [Accessor] variable : Identifier; // can be null
    [Accessor] body : Statement;
  }

  [Record][Unit]
  public variant Statement : Located
  {
    | Error         { msg : string; }
    | Empty
    | Block         { stmts : list[Statement]; }
    | Expression    { expr : Expr; }
    | Label         { label : Identifier; stmt  : Statement; }
    | VariableDecl  { variableType : Expr; /* can be null */ decls : list[Location * Identifier * VariableInitializer]; }
    | ConstantDecl  { constantType : Expr; decls : list[Location * Identifier * Expr]; }
    | If            { expr : Expr; trueStmt : Statement; falseStmt : Statement; /* can be null */ }
    | Switch        { expr: Expr; entries : list[SwitchCaseEntry]; }
    | While         { cond : Expr; stmt : Statement; }
    | DoWhile       { cond : Expr; stmt : Statement; }
    | ForVar        { varDecl : VariableDecl; cond : Expr; iter : list[Expr]; body : Statement; }
    | ForExpr       { init : list[Expr]; cond : Expr; iter : list[Expr]; body : Statement; }
    | Foreach       { variable : Identifier; variableType : Expr; /* can be null */ expr : Expr; body : Statement; }
    | Break
    | Continue
    | Goto          { label : Identifier; }
    | GotoCase      { expr : Expr; }
    | GotoDefault 
    | Return        { expr : Expr; /* can be null */ }
    | Throw         { expr : Expr; /* can be null */ }
    | Try           { body : Statement; catchList : list[TryCatchEntry]; finallyBlock : Statement;  /* can be null */ }
    | Checked       { body : Statement; is_checked : bool; }
    | Lock          { expr : Expr; body : Statement; }
    | UsingVar      { varDecl : VariableDecl; body : Statement; }
    | UsingExpr     { expr : Expr; body : Statement; }
    | YieldReturn   { expr : Expr; }
    | YieldBreak
    | Unsafe        { body : Statement; }
    | Fixed         { varDecl : VariableDecl; body : Statement; }
    
    #region object Members
    
    public override ToString() : string
    {
      def declsToStr[T]((_ : Location, id : Identifier, varInit : T)) : string
        where T: class
      {
        if (varInit == null) $"$id" else $"$id = $varInit"
      }
      match (this)
      {
        | Error         (msg) => BuildMessage(msg)
        | Empty         => ";"
        | Block         (stmts) => $"{ $stmts }"
        | Expression    (expr) => $"$expr"
        | Label         (label, stmt) => $"$label: $stmt"
        | VariableDecl  (variableType/* can be null */, decls) => $<#$variableType ..$(decls; ", "; declsToStr)#>
        | ConstantDecl  (constantType, decls) => $<#const $constantType ..$(decls; ", "; declsToStr)#>
        | If            (expr, trueStmt, falseStmt/* can be null */) => $"if ($expr) $trueStmt else $falseStmt"
        | Switch        (expr, entries) => $<#switch ($expr) { ..$(entries; "  ") }#>
        | While         (cond, stmt) => $"while ($cond) $stmt"
        | DoWhile       (cond, stmt) => $"do $stmt while ($cond)"
        | ForVar        (varDecl, cond, iter, body) => $"for ($varDecl; $cond; $iter) $body"
        | ForExpr       (init, cond, iter, body) => $"for ($init; $cond; $iter) $body"
        | Foreach       (variable, variableType/* can be null */, expr, body) => 
          def typeOrVar(variableType)
          {
            if (variableType == null) "var " else $"$variableType "
          }
          $<#foreach ($(typeOrVar(variableType))$variable in $expr) $body#>
          
        | Break         => "break"
        | Continue      => "continue"
        | Goto          (label) => $"goto $label"
        | GotoCase      (expr) => $"goto case $expr"
        | GotoDefault    =>  "goto case default"
        | Return        (expr/* can be null */) => $"return $expr"
        | Throw         (expr/* can be null */) => $"throw $expr"
        | Try           (body, catchList, finallyBlock/* can be null */) => $<#try { $body } ..$(catchList; " ") $finallyBlock#>
        | Checked       (body, is_checked) => if (is_checked) $"checked { $body }" else $"unchecked { $body }"
        | Lock          (expr, body) => $"lock ($expr) $body"
        | UsingVar      (varDecl, body) => $"using ($varDecl) $body"
        | UsingExpr     (expr, body) => $"using ($expr) $body"
        | YieldReturn   (expr) => $"yield return $expr"
        | YieldBreak    => "yield break"
        | Unsafe        (body) => $"unsafe { $body }"
        | Fixed         (varDecl, body) => $"fixed ($varDecl) $body"
      }
    }
    
    #endregion object  Members
    
  }
}