using System;
using System.Text;
using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Utility;
using NemerleWeb.Peg; using NemerleWeb;

namespace CSharpParser
{
  public partial class Parser
  {
    #region Literals

    //nullLiteral    : Literal = "null"S;
    nullLiteral(_null : NToken) : Literal
    {
      Literal.Null()
    }

    //booleanLiteral : Literal = ("true" / "false")S;
    booleanLiteral(val : NToken) : Literal
    {
      Literal.Boolean(bool.Parse(GetText(val)))
    }

    //integerTypeSuffix         : string  = "UL" / "ul" / "uL" / "Ul" / "LU" / "lu" / "Lu" / "lU" / "U" / "u" / "L" / "l";
    integerTypeSuffix(suffix : NToken) : string
    {
      GetText(suffix)
    }

    //decimalIntegerLiteral     : Literal = decimalDigit+ integerTypeSuffix?;
    decimalIntegerLiteral(decimalDigits       : NToken,
                          integerTypeSuffix   : option[string]) : Literal
    {
      mutable val;
      if (ulong.TryParse(GetText(decimalDigits), out val))
        Literal.Integer(val, false, integerTypeSuffix.WithDefault(""))
      else
        Literal.ErrorOverflow(GetText(decimalDigits))
    }

    //hexadecimalIntegerLiteral : Literal = ("0x" / "0X") hexDigit+ integerTypeSuffix?;
    hexadecimalIntegerLiteral(_0x               : NToken,
                              hexDigits         : NToken,
                              integerTypeSuffix : option[string]) : Literal
    {
      mutable val;
      if(ulong.TryParse(GetText(hexDigits), System.Globalization.NumberStyles.HexNumber, null, out val))
        Literal.Integer(val, true, integerTypeSuffix.WithDefault(""))
      else
        Literal.ErrorOverflow(GetText(_0x) + GetText(hexDigits))
    }

    //realTypeSuffix  : string  = "F" / "f" / "D" / "d" / "M" / "m";
    realTypeSuffix(suffix : NToken) : string
    {
      GetText(suffix)
    }

    //exponentPart    : string  = ("E" / "e") ("-" / "+")? decimalDigit+;
    exponentPart(_e             : NToken,
                 sign           : NToken,
                 decimalDigits  : NToken) : string
    {
      GetText(sign) + GetText(decimalDigits)
    }

    //realLiteral_1   : Literal = decimalDigit* "." decimalDigit+ exponentPart? realTypeSuffix?;
    realLiteral_1(mantissa1       : NToken,
                  _dot            : NToken,
                  mantissa2       : NToken,
                  exponent        : option[string],
                  realTypeSuffix  : option[string]) : Literal
    {
      def mantissa = GetText(mantissa1) + "." + GetText(mantissa2);
      def exponent = exponent.WithDefault("");
      def suffix = realTypeSuffix.WithDefault("");
      Literal.Real(mantissa, exponent, suffix)
    }

    //realLiteral_2   : Literal = decimalDigit+ exponentPart realTypeSuffix?;
    realLiteral_2(mantissa        : NToken,
                  exponent        : string,
                  realTypeSuffix  : option[string]) : Literal
    {
      def suffix = realTypeSuffix.WithDefault("");
      Literal.Real(GetText(mantissa), exponent, suffix)
    }

    //realLiteral_3   : Literal = decimalDigit+ realTypeSuffix;
    realLiteral_3(mantissa        : NToken,
                  realTypeSuffix  : string) : Literal
    {
      Literal.Real(GetText(mantissa), "", realTypeSuffix)
    }

    //unicodeEscapeSequence_u   : string = "\\u" hexDigit hexDigit hexDigit hexDigit;
    unicodeEscapeSequence_u(_u : NToken, d1 : NToken, d2 : NToken, d3 : NToken, d4 : NToken) : VToken[string]
    {
      unchecked {
        def x = 
              HexDigit(d1) << 12
          %|  HexDigit(d2) << 8
          %|  HexDigit(d3) << 4
          %|  HexDigit(d4);
        ConvertUtf32(x)
      }
    }

    //unicodeEscapeSequence_U   : char  = "\\U" hexDigit hexDigit hexDigit hexDigit hexDigit hexDigit hexDigit hexDigit;
    unicodeEscapeSequence_U(_U : NToken, d1 : NToken, d2 : NToken, d3 : NToken, d4 : NToken,
                                         d5 : NToken, d6 : NToken, d7 : NToken, d8 : NToken) : VToken[string]
    {
      unchecked {
        def x = 
              HexDigit(d1) << 28
          %|  HexDigit(d2) << 24
          %|  HexDigit(d3) << 20
          %|  HexDigit(d4) << 16
          %|  HexDigit(d5) << 12
          %|  HexDigit(d6) << 8
          %|  HexDigit(d7) << 4
          %|  HexDigit(d8);
        ConvertUtf32(x)
      }
    }

    //hexadecimalEscapeSequence : string = "\\x" hexDigit hexDigit? hexDigit? hexDigit?;
    hexadecimalEscapeSequence(_x : NToken, d1 : NToken, d2 : NToken, d3 : NToken, d4 : NToken) : VToken[string]
    {
      mutable x = HexDigit(d1);
      unless(d2.IsEmpty)
        x = (x << 4) %| HexDigit(d2);
      unless(d3.IsEmpty)
        x = (x << 4) %| HexDigit(d3);
      unless(d4.IsEmpty)
        x = (x << 4) %| HexDigit(d4);
      ConvertUtf32(x)
    }

    //simpleEscapeSequence      : string = "\\'" / "\\\"" / "\\\\" / "\\0" / "\\a" / "\\b" / "\\f" / "\\n" / "\\r" / "\\t" / "\\v";
    simpleEscapeSequence(seq : NToken) : VToken[string]
    {
      VToken(match(GetText(seq)) {
        | "\\'"   => "\'"
        | "\\\""  => "\""
        | "\\\\"  => "\\"
        | "\\0"   => "\0"
        | "\\a"   => "\a"
        | "\\b"   => "\b"
        | "\\f"   => "\f"
        | "\\n"   => "\n"
        | "\\r"   => "\r"
        | "\\t"   => "\t"
        | "\\v"   => "\v"
        | s => s
      })
    }

    //singleCharacter           : string = !newLineCharacter !"'" !"\\" any;
    singleCharacter(any : NToken) : VToken[string]
    {
      VToken(GetText(any))
    }

    //characterLiteral  : Literal = "'" character "'" s;
    characterLiteral(_lquot : NToken, character : VToken[string], _rquot : NToken) : Literal
    {
      match(character.Value) {
        | null => Literal.ErrorUnicode(true, [character.Location])
        | x when x.Length != 1 => Literal.ErrorChar()
        | x => Literal.Char(x[0])
      }
    }

    //regularStringLiteralCharacterSequence     : string  = singleRegularStringLiteralCharacter*;
    regularStringLiteralCharacterSequence(seq : NToken) : VToken[string]
    {
      VToken(GetText(seq))
    }

    //regularStringLiteral                  : Literal = "\"" regularStringLiteralPart* "\"";
    regularStringLiteral(_lquot : NToken, parts : SCG.List[VToken[string]], _rquot : NToken) : Literal
    {
      mutable unicodeErrors = [];
      foreach(part when null == part.Value in parts)
        unicodeErrors ::= part.Location;

      match(unicodeErrors) {
        | [] => 
          def value = match(parts.Count) {
            | 0 => ""
            | 1 => parts[0].Value
            | 2 => string.Concat(parts[0].Value, parts[1].Value)
            | 3 => string.Concat(parts[0].Value, parts[1].Value, parts[2].Value)
            | 4 => string.Concat(parts[0].Value, parts[1].Value, parts[2].Value, parts[3].Value)
            | _ =>
              def sb = System.Text.StringBuilder(parts.Count * 20);
              foreach(part in parts)
                _ = sb.Append(part.Value);
              sb.ToString()
          }
          Literal.String(value, false)

        | _ =>
          Literal.ErrorUnicode(false, unicodeErrors.Rev())
      }
    }

    //verbatimStringLiteralCharacterSequence    : string  = singleVerbatimStringLiteralCharacter*;
    verbatimStringLiteralCharacterSequence(seq : NToken) : string
    {
      GetText(seq)
    }

    //quoteEscapeSequence                         : string  = "\"\"";
    quoteEscapeSequence(_quot_quot : NToken) : string
    {
      "\""
    }

    //verbatimStringLiteral                       : Literal = "@\"" verbatimStringLiteralPart* "\"";
    verbatimStringLiteral(_at_lquot : NToken, parts : SCG.List[string], _rquot : NToken) : Literal
    {
      def value = match(parts.Count) {
        | 0 => ""
        | 1 => parts[0]
        | 2 => string.Concat(parts[0], parts[1])
        | 3 => string.Concat(parts[0], parts[1], parts[2])
        | 4 => string.Concat(parts[0], parts[1], parts[2], parts[3])
        | _ =>
          def sb = System.Text.StringBuilder(parts.Count * 20);
          foreach(part in parts)
            _ = sb.Append(part);
          sb.ToString()
      }
      Literal.String(value, true)
    }

    #endregion

    #region Identifiers

    //escapedIdentifierStartCharacter  : VString = identifierStartCharacter;
    escapedIdentifierStartCharacter(c : NToken) : VString
    {
      VString(GetText(c))
    }

    //escapedIdentifierPartCharacter : VString = identifierPartCharacters;
    escapedIdentifierPartCharacter(c : NToken) : VString
    {
      VString(GetText(c))
    }

    //escapedIdentifierBody            : VString = (unicodeEscapeSequence / escapedIdentifierStartCharacter) (unicodeEscapeSequence / escapedIdentifierPartCharacter)*;
    escapedIdentifierBody(first : VString, tail : SCG.List[VString]) : VString
    {
      def buffer = StringBuilder(30).Append(first.Value);
      foreach(c in tail)
        _ = buffer.Append(c.Value);
      VString(buffer.ToString())
    }

    //normalIdentifierBody           : VString = identifierStartCharacter identifierPartCharacters* !unicodeEscapeSequence;
    normalIdentifierBody(start : NToken, body : NToken) : VString
    {
      VString(ParsingSource.OriginalText.Substring(start.StartPos, body.EndPos - start.StartPos))
    }

    //identifier : Identifier = !keyword "@"? identifierBody s;
    identifier( _at             : NToken,
                identifierBody  : VString) : Identifier
    {
      Identifier(identifierBody.Value)
    }

    //TODO: replace `object' with variant

    //qualifiedIdentifierPartTypeArguments      : object = "<"s typeArguments ">"s;
    qualifiedIdentifierPartTypeArguments( _lt      : NToken,
                                          typeArgs : list[Expr],
                                          _gt      : NToken) : object
    {
      typeArgs
    }

    //qualifiedIdentifierPartOpenTypeArguments  : object = "<"s rankSeparators ">"s;
    qualifiedIdentifierPartOpenTypeArguments( _lt           : NToken,
                                              typeArgsCount : int,
                                              _gt           : NToken) : object
    {
      typeArgsCount
    }

    //qualifiedIdentifierPart : QualifiedPart = identifier (qualifiedIdentifierPartTypeArguments / qualifiedIdentifierPartOpenTypeArguments)?;
    qualifiedIdentifierPart(identifier  : Identifier,
                            typeArgs    : option[object]) : Identifier * object
    {
      (identifier, typeArgs.WithDefault(null))
    }

    //qualifiedIdentifier     : Expr          = (identifier "::"s)? qualifiedIdentifierPart ("."s qualifiedIdentifierPart)*;
    qualifiedIdentifier(alias : option[Identifier * NToken],
                        head  : Identifier * object,
                        tail  : SCG.List[NToken * (Identifier * object)]) : Expr
    {
      def makeTypeArgs(acc : Expr, typeArgs : object) : Expr
      {
        match(typeArgs)
        {
          | null =>
            acc
          | args is list[Expr] =>
            Expr.TypeArguments(acc.Location, acc, args) //TODO: handle location
          | separatorCount is int =>
            def argCount = separatorCount + 1;
            Expr.TypeArguments(acc.Location, acc, $[1..argCount].Map(_ => null)) // TODO: handle location
          | _ =>
            throw ArgumentException("typeArgs")
        }
      }

      mutable chain = match(alias)
      {
        | Some((id, _)) =>
          makeTypeArgs(Expr.Member(Expr.Alias(id), Expr.Ref(head[0])), head[1])
        | _ =>
          makeTypeArgs(Expr.Ref(head[0]), head[1])
      }

      foreach((_, (id, typeArgs)) in tail)
        chain = makeTypeArgs(Expr.Member(chain, Expr.Ref(id)), typeArgs);

      chain
    }

    //typeMemberIdentifierPart  : QualifiedPart = identifier ((qualifiedIdentifierPartTypeArguments / qualifiedIdentifierPartOpenTypeArguments) !"(")?;
    typeMemberIdentifierPart( identifier  : Identifier,
                              typeArgs    : option[object]) : Identifier * object
    {
      qualifiedIdentifierPart(identifier, typeArgs)
    }

    //typeMemberIdentifier      : Expr          = (identifier "::"s)? typeMemberIdentifierPart ("."s typeMemberIdentifierPart)*;
    typeMemberIdentifier( alias : option[Identifier * NToken],
                          head  : Identifier * object,
                          tail  : SCG.List[NToken * (Identifier * object)]) : Expr
    {
      qualifiedIdentifier(alias, head, tail)
    }

    #endregion

    #region Types

    //predefinedType : Expr = ("sbyte" / "byte"   / "short" / "ushort"  / "int"   / "uint"
    //                        / "long" / "ulong"  / "char"  / "decimal" / "void"  / "bool"
    //                        / "string" / "dynamic" / "object" / "float" / "double" )S;
    predefinedType(builtIn : NToken) : Expr
    {
      Expr.BuiltInType(GetText(builtIn))
    }

    //typeName       : Expr  = qualifiedIdentifier;
    typeName(id : Expr) : Expr
    {
      id
    }

    //rankSeparators             : int = (","s)*;
    rankSeparators(commaList : SCG.List[NToken]) : int
    {
      //FixMe: VladD2: В корне не правильно возвращать значения, а не АСТ. 
      // Это приводит к потере информации о местоположениях!
      commaList.Count
    }

    //rankSpecifier             : TypeSpecifier = "["s rankSeparators "]"s;
    rankSpecifier(_lparen       : NToken,
                  rankSeparators : int,
                  _rparen       : NToken) : TypeSpecifier
    {
      TypeSpecifier.Array(rankSeparators + 1)
    }

    //pointerSpecifier          : TypeSpecifier = "*"s;
    pointerSpecifier(_asterisk : NToken) : TypeSpecifier
    {
      TypeSpecifier.Pointer()
    }

    //anyNonArrayType           : Expr     = (typeName / predefinedType) nullableSpecifier?;
    anyNonArrayType(baseType                  : Expr,
                    nullableSpecifier         : NToken) : Expr
    {
      if(nullableSpecifier.IsEmpty)
        baseType
      else
        Expr.NullableType(baseType)
    }

    //anyNonArrayTypeNullableHack : Expr   = (typeName / predefinedType) (nullableSpecifier !expression)?;
    anyNonArrayTypeNullableHack(baseType                  : Expr,
                                nullableSpecifier         : NToken) : Expr
    {
      anyNonArrayType(baseType, nullableSpecifier)
    }

    //anyType                   : Expr     = anyNonArrayType typeSpecifier*;
    anyType(anyNonArrayType   : Expr,
            typeSpecifiers    : SCG.List[TypeSpecifier]) : Expr
    {
      mutable acc = anyNonArrayType;
      foreach(ty_spec in typeSpecifiers) {
        def loc = acc.Location + ty_spec.Location;
        acc = match(ty_spec) {
          | TypeSpecifier.Array(rank)  => Expr.ArrayType(loc, acc, rank)
          | TypeSpecifier.Pointer()   => Expr.PointerType(loc, acc)
        }
      }
      acc
    }

    //anyTypeWithSpecifier_1    : Expr     = anyNonArrayType typeSpecifier+;
    anyTypeWithSpecifier_1(anyNonArrayType   : Expr,
                           typeSpecifiers    : SCG.List[TypeSpecifier]) : Expr
    {    
      anyType(anyNonArrayType, typeSpecifiers)
    }
    
    //anyTypeWithSpecifier_2    : Expr     = anyNonArrayType nullableSpecifier;      
    anyTypeWithSpecifier_2(baseType                  : Expr,
                           nullableSpecifier         : NToken) : Expr
    {    
      anyNonArrayType(baseType, nullableSpecifier)
    }

    //anyTypeWithSpecifier      : Expr     = anyTypeWithSpecifier_1 / anyTypeWithSpecifier_2;
    anyTypeWithSpecifier(x : Expr) : Expr
    {    
      x
    }

    //anyTypeNullableHack       : Expr     = anyNonArrayTypeNullableHack typeSpecifier*;
    anyTypeNullableHack(anyNonArrayType   : Expr,
                        typeSpecifiers    : SCG.List[TypeSpecifier]) : Expr
    {
      anyType(anyNonArrayType, typeSpecifiers)
    }

    //typeArguments             : ExprList = typeArgument (","s typeArgument)*;
    typeArguments(head : Expr,
                  tail : SCG.List[NToken * Expr]) : list[Expr]
    {
      head.Cons(tail)
    }

    //mayBeGenericArgumentList  : ExprList = "<"s typeArguments ">"s &('(' / ')' / ']' / '}' / ':' / ';' / ',' / '.' / '?' / "==" / "!=");
    mayBeGenericArgumentList( _lparen       : NToken,
                              typeArguments : list[Expr],
                              _rparen       : NToken) : list[Expr]
    {
      typeArguments
    }

    #endregion
  }
}