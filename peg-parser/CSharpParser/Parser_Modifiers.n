using System;
using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Utility;
using NemerleWeb.Peg; using NemerleWeb;

namespace CSharpParser
{
  public partial class Parser
  {
    //modifier  : Modifier      = ("new" / "public" / "protected" / "internal" / "private" / "partial" / "virtual"
    //                            / "volatile" / "static" / "sealed" / "override" / "abstract" / "extern" / "unsafe")S;
    modifier(keyword : NToken) : Modifier
    {
      match(GetText(keyword)) {
        | "new"       => Modifier.New()
        | "public"    => Modifier.Public()
        | "protected" => Modifier.Protected()
        | "internal"  => Modifier.Internal()
        | "private"   => Modifier.Private()
        | "partial"   => Modifier.Partial()
        | "virtual"   => Modifier.Virtual()
        | "volatile"  => Modifier.Volatile()
        | "static"    => Modifier.Static()
        | "sealed"    => Modifier.Sealed()
        | "override"  => Modifier.Override()
        | "abstract"  => Modifier.Abstract()
        | "extern"    => Modifier.Extern()
        | "unsafe"    => Modifier.Unsafe()
        | "readonly"  => Modifier.Readonly()
        | _ => throw ArgumentOutOfRangeException("keyword")
      }
    }

    //modifiers : ModifierList  = modifier+;
    modifiers(modifiers : SCG.List[Modifier]) : list[Modifier]
    {
      NList.ToList(modifiers)
    }
  }
}