using System;
using System.Text.RegularExpressions;
using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Utility;
using Nemerle.Imperative;
using NemerleWeb;

namespace NemerleWeb.Peg
{
  [Unit]
  public class Located : IToken
  {
    [Accessor(flags = WantSetter)]
    mutable location : Location;

    public StartPos : int { get { location.StartPos } }
    public EndPos : int { get { location.EndPos } }

    public this() {}

    public this(location : Location)
    {
      this.location = location;
    }
    
    // TODO: Restore
    //static _posAndLenRx : Regex = Regex(@"\[(\d+):(\d+)]", RegexOptions.Compiled);
    
    public static ExtractPosAndLen(msg : string) : int * int
    {
      def result = RegExp(@"\[(\d+):(\d+)]").exec(msg);
      if (result != null && result.Length == 2)
      {
        def errorPos = int.Parse(result[1]);
        def errorLen = int.Parse(result[2]);
        (errorPos, errorLen)
      }
      else
        (-1, -1)
        
      // TODO: Restore
      //def m = _posAndLenRx.Match(msg);
      
      //if (m.Success)
      //{
      //  def errorPos = int.Parse(m.Groups[1].Value);
      //  def errorLen = int.Parse(m.Groups[2].Value);
      //  (errorPos, errorLen)
      //}
      //else (-1, -1)
    }
    
    protected BuildMessage(msg : string) : string
    {
      def pos = Location.StartPos;
      def len = Location.EndPos - Location.StartPos;
      $"$(Location.Source.FileName)$(Location.StartLineColumn.ToString()):[$pos:$len]: $msg"
    }
  
    // TODO: Remove
      [JsApi]
  public class RegExp
  {
    public this(_pattern : string) 
    {}
      
    public compile() : void
    {}
    
    public compile(_pattern : string) : void
    {}
    
    public compile(_pattern : string, _modifier : string) : void
    {}
    
    public exec(_input : string) : array[string]
    {array(0)}
    
    public test(_input : string) : bool
    {false}
  }
  }
}