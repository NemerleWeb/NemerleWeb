using Nemerle;
using Nemerle.Compiler;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace NemerleWeb
{
  [MacroUsage(MacroPhase.WithTypedMembers, MacroTargets.Method)]
  macro SignalR(tb : TypeBuilder, _mb : MethodBuilder) 
  {
    SignalRImpl.DoTransform(tb, Macros.ImplicitCTX())
  }
  
  module SignalRImpl
  {
    public DoTransform(tb : TypeBuilder, typer : Typer) : void
    {
      CreateSignalIfNeeded(tb, typer);
    }
    
    public CreateSignalIfNeeded(tb : TypeBuilder, _typer : Typer) : void 
    {
      def declaringType = tb.DeclaringType :> TypeBuilder;
      def hubName = declaringType.Name + "Hub";
      def jsHubName = char.ToLowerInvariant(hubName[0]) + hubName.Substring(1);
      def methods = tb.DeclaringType
                      .GetMembers(BindingFlags.Instance | BindingFlags.DeclaredOnly | BindingFlags.Public | BindingFlags.NonPublic)
                      .OfType.[IMethod]();
      def methods = JsClass.FilterMethods(methods)
                            .Select(m => (m.Name, $"..$(m.GetParameters().Select(p => p.Name))"))
                            .Select(((name, parms), _) => 
$<#
$jsHubName.client.$name = function($parms) {
self.$name[""]($parms);
nweb.invalidate();
};#>);
  
      def methods = $<#..$(methods; "")#>;
      def script = $<#
var $jsHubName = $$.connection.$jsHubName;
$methods
setTimeout(function() {
$$.connection.hub.start({}, function() {
  $$.get('$(declaringType.Name)/__SetSignalRConnectionId', {id: this.id});
});
}, 1000);#>;

      UnitImpl.AddSignalrData(declaringType, script);

      tb.Define(<[ decl: client : $(declaringType.ParsedTypeName); ]>);        
      tb.DefineNestedType(<[ decl: public class $(hubName : dyn) : HubBase {} ]>).Compile();
    }
  }
}
