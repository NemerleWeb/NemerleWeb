using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Web;
using System.Globalization;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;
using BF = System.Reflection.BindingFlags;
using TExpr = Nemerle.Compiler.Typedtree.TExpr;

using SignalR.Hubs;

namespace NemerleWeb 
{
  macro signal_macro(expr) 
  syntax("signal", expr)
  {
    def ctx = Macros.ImplicitCTX();
    SignalImpl.TransformSignal(expr, ctx);
  }
  
  macro broadcast_macro(expr) 
  syntax("broadcast", expr)
  {
    def ctx = Macros.ImplicitCTX();
    SignalImpl.TransformBroadcast(expr, ctx);
  }
  
  public module SignalImpl
  {
    private Transform(expr : PExpr, typer : Typer, objExpr : PExpr) : option[PExpr]
    {
      match(expr)
      {
      | <[ $_.$method(..$parms) ]> =>
        def hubName = typer.CurrentTypeBuilder.DeclaringType.Name + "Hub";
      
        Some(<[
          def signalClients =
            SignalR.GlobalHost.ConnectionManager.GetHubContext.[$(hubName : dyn)]().Clients;
        
          $objExpr;
          
          def invokeMethod = obj.GetType().GetMethod(
            "Invoke",
            BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance);
          
          _ = invokeMethod.Invoke(obj, array[$(method.ToString() : string) : object, array[..$parms]]);
        ]>)   
      | _ => None()
      }
    }
    
    public TransformSignal(expr : PExpr, typer : Typer) : PExpr 
    {
      def res = Transform(
        expr,
        typer, 
        <[
            def signalConnectionId = HttpContext.Current.Session["SignalRConnectionId"];
            def obj = signalClients[signalConnectionId];
        ]>);
      match (res)
      {
      | Some(p) => p
      | _ => Message.FatalError(expr.Location, "Invalid 'signal' macro call. Syntax: signal client.MethodName(parameters)");
      }
    }
    
    public TransformBroadcast(expr : PExpr, typer : Typer) : PExpr 
    {
      def res = Transform(expr, typer, <[ def obj = signalClients; ]>);
      match(res)
      {
      | Some(p) => p
      | _ => Message.FatalError(expr.Location, "Invalid 'broadcast' macro call. Syntax: broadcast client.MethodName(parameters)");
      }
    }
  }
}