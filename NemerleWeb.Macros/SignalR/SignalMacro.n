using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Late;

using System;
using System.Web;
using System.Globalization;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;
using BF = System.Reflection.BindingFlags;
using TExpr = Nemerle.Compiler.Typedtree.TExpr;

using SignalR.Hubs;

namespace NemerleWeb 
{
  macro signal_macro(expr) 
  syntax("signal", expr)
  {
    def ctx = Macros.ImplicitCTX();
    SignalImpl.TransformSignal(expr, ctx);
  }
  
  macro broadcast_macro(expr) 
  syntax("broadcast", expr)
  {
    def ctx = Macros.ImplicitCTX();
    SignalImpl.TransformBroadcast(expr, ctx);
  }
  
  public module SignalImpl
  {
    public TransformSignal(expr : PExpr, typer : Typer) : PExpr 
    {   
      def hubName = typer.CurrentTypeBuilder.DeclaringType.Name + "Hub";
      match(expr) {
      | <[ $_.$method(..$parms) ]> => 
              <[  def __signalClients = SignalR.GlobalHost.ConnectionManager.GetHubContext.[$(hubName : dyn)]().Clients; 
                  def __signalConnectionId = HttpContext.Current.Session["SignalRConnectionId"];
                  def _ = late __signalClients[__signalConnectionId].Invoke($(method.ToString() : string), array[..$parms]) ]>
      | _ => Message.FatalError(expr.Location, "Invalid 'signal' macro call. Syntax: signal client.MethodName(parameters)");
      }      
    }
    
    public TransformBroadcast(expr : PExpr, typer : Typer) : PExpr 
    {      
      def hubName = typer.CurrentTypeBuilder.DeclaringType.Name + "Hub";
      match(expr) {
      | <[ $_.$method(..$parms) ]> => 
              <[  def __signalClients = SignalR.GlobalHost.ConnectionManager.GetHubContext.[$(hubName : dyn)]().Clients; 
                  def _ = late __signalClients.Invoke($(method.ToString() : string), array[..$parms]) ]>
      | _ => Message.FatalError(expr.Location, "Invalid 'broadcast' macro call. Syntax: broadcast client.MethodName(parameters)");
      }     
    }
  }
}