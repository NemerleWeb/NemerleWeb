using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.IO;
using System;
using System.Xml;
using System.Collections.Generic;

namespace NemerleWeb
{
  //tb.GetModifiers().AddCustomAttribute(<[ NemerleWeb.UnitAttribute ]>);
  
  [MacroUsage(MacroPhase.BeforeTypedMembers, MacroTargets.Method)]
  public macro Html(_ : TypeBuilder, meth : ParsedMethod)
  {
    meth.AddCustomAttribute(<[ NemerleWeb.IgnoreAttribute ]>);
  }
  
  [MacroUsage(MacroPhase.WithTypedMembers, MacroTargets.Method)]
  public macro Html(_tb : TypeBuilder, mb : MethodBuilder)
  {
    HtmlImpl.ToXLinq(Nemerle.Macros.ImplicitCTX(), mb)
  }

  internal module HtmlImpl
  {
    internal ToXLinq(typer : Typer, mb : MethodBuilder) : void
    {
      Macros.DefineCTX(typer);
       
      JsClass.IEnumerableType = <[ ttype : System.Collections.IEnumerable ]>;
      JsClass.StringType = <[ ttype : System.String ]>;
      
      match (mb.Header.body)
      {
      | FunBody.Parsed(
          PExpr.Sequence(PExpr.Literal(Literal where(RawString = rs)) as litExpr :: []) as expr) =>
        if (rs.Length == 0 || rs[0] != '<')
          Message.FatalError(expr.Location, "The literal in 'html' macro must be recursive string.")
        else
        {
          def str = rs.Substring(2, rs.Length - 4);
          def loc = litExpr.Location;
          def loc = Location(loc.FileIndex, loc.Line, loc.Column + 2, loc.EndLine, loc.EndColumn - 2);            
          def parser = XmlQuotParser(loc, str);
                        
          match (parser.Parse(str))
          {
          | Some(result) => 
            def transformer = XmlAstToXLinq(typer, parser);
            def res = transformer.Transform(result);
            def methodName = $"__$(mb.Name)";
            mb.DeclaringType.Define(<[decl: public $(methodName : dyn)() : list[System.Xml.Linq.XElement] { $res; } ]>);
            mb.DeclaringType.Compile();
          | _ =>
            def (pos, expected) = parser.GetMaxRollbackPosAndNames();
            def expected = expected.NToList();
                
            def msg = if (expected.IsEmpty) "Unexpected character."
                      else
                        match (expected.DivideLast())
                        {
                        | ([], last)        => $"Expected $last."
                        | (expected,  last) => $"Expected ..$expected or $last."
                        };
            Message.FatalError(parser.ToLocation(pos, pos + 1), msg)
          }
        }
      | FunBody.Abstract => 
        Message.FatalError("Abstract method is not supported")
      | _ =>
        Message.FatalError(mb.Header.Location, "You must pass recursive string with XML literal into 'html' macro.")
      }
    }
  }
}
