using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.IO;

using System;
using System.Linq;
using System.Xml;
using System.Collections.Generic;

namespace NemerleWeb
{
  //tb.GetModifiers().AddCustomAttribute(<[ NemerleWeb.UnitAttribute ]>);
  
  [MacroUsage(MacroPhase.BeforeTypedMembers, MacroTargets.Method)]
  public macro Html(_ : TypeBuilder, meth : ParsedMethod)
  {
    meth.AddCustomAttribute(<[ NemerleWeb.IgnoreAttribute ]>);
  }
  
  [MacroUsage(MacroPhase.WithTypedMembers, MacroTargets.Method)]
  public macro Html(_tb : TypeBuilder, mb : MethodBuilder)
  {
    HtmlImpl.ToXLinq(Nemerle.Macros.ImplicitCTX(), mb)
  }

  internal module HtmlImpl
  {
    internal ToXLinq(typer : Typer, mb : MethodBuilder) : void
    {
      Macros.DefineCTX(typer);
       
      JSClass.IEnumerableType = <[ ttype : System.Collections.IEnumerable ]>;
      JSClass.StringType = <[ ttype : System.String ]>;
      JSClass.IPageType = <[ ttype: IPage ]>;
      JSClass.ObjectType = <[ ttype: System.Object ]>;
      
      match (mb.Header.body)
      {
      | FunBody.Parsed(PExpr.Sequence([PExpr.Literal(Literal.String(str)) as lit]))
      | FunBody.Parsed(PExpr.Literal(Literal.String(str)) as lit) =>
      
        if (str.IsEmpty())
        {
          Message.FatalError(
            mb.Location,
            "You must write html string.");
        }
        else
        {
          def litLoc = lit.Location;
          def loc = Location(
            litLoc.FileIndex,
            litLoc.Line,
            litLoc.Column + 2,
            litLoc.EndLine,
            litLoc.EndColumn - 2);
        
          def parser = XmlQuotParser(loc, str);
                        
          match (parser.Parse(str))
          {
          | Some(result) => 
            def transformer = XmlAstToXLinq(typer, parser);
            def res = transformer.Transform(result);
            UnitImpl.AddTemplateData(mb.DeclaringType, JSClass.GetProperName(mb.DeclaringType) + "_" + mb.Name, res);
          | _ =>
            def (pos, expected) = parser.GetMaxRollbackPosAndNames();
          
            def msg = 
              if (expected.IsEmpty()) "Unexpected character."
              else
              if (expected.Count == 1) $"Expected $(expected.Last())";
              else
              {
                assert2(false);
                $"Expected ..$(expected.Take(expected.Count -1)) $(expected.Last())";
              }
          
            Message.FatalError(parser.ToLocation(pos, pos + 1), msg)
          }
        }
      | FunBody.Abstract => Message.FatalError("Abstract method is not supported")
      | _ => Message.FatalError(mb.Header.Location, "You must return XML literal string.")
      }
    }
  }
}
