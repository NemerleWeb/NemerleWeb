using System.Collections.Generic;
using System.Linq;
using Nemerle.Macros;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Collections;
using Nemerle.Utility;
using Nemerle.Assertions;
using System.IO;
using System.Text.RegularExpressions;
using TSParser;
using NemerleWeb;

namespace NemerleWeb.Macros
{
  [Nemerle.MacroUsage(Nemerle.MacroPhase.BeforeInheritance, Nemerle.MacroTargets.Assembly)]
  macro GenerateJSApi(params options : list[PExpr])
  {
    GenerateJSApiImpl.Impl(ImplicitCTX(), options)
  }
   
  module GenerateJSApiImpl
  {
    tsParser = TSDeclarationParser();
    
    public Impl(typer : Typer, options : list[PExpr]) : void
    {      
      match(options)
      {
      | [<[ Directory = $(directory : string) ]> ] with (libPath = "", exclude = "")
      | [<[ Directory = $(directory : string) ]>,
         <[ Exclude = $(exclude : string) ]> ] with libPath = ""
      | [<[ Lib = $(libPath : string) ]>,
         <[ Directory = $(directory : string) ]> ] with exclude = ""
      | [<[ Lib = $(libPath : string) ]>,
         <[ Directory = $(directory : string) ]>,
         <[ Exclude = $(exclude : string) ]> ] =>
        DoImpl(typer, libPath, directory, exclude)
      | _ =>
        Message.Error("Specify Directory parameter and optional Lib, Exclude parameters");
      }
    }
    
    private DoImpl(typer : Typer, libPath : string, directory : string, exclude : string) : void
    {
      def projectDir = Path.GetDirectoryName(typer.Manager.Options.ProjectPath);
      
      // PreParse
      // Resolve all references
      def re = Regex(exclude);
      def isIncluded(s) { if (exclude == "") true else !re.IsMatch(s) }
      
      def fullDir = Path.Combine(projectDir, directory);
      def tsFiles = Directory.EnumerateFiles(fullDir, "*.d.ts", SearchOption.AllDirectories);

      def tsFilesToParse = HashSet();
      foreach(tsFile when isIncluded(tsFile) in tsFiles)
        PreParseTS(tsFile, tsFilesToParse);
      
      // Parsing
      
      // Parse lib if present
      when (libPath != "")
        ParseTS(typer, Path.Combine(projectDir, libPath), GetNamespaceName(directory), "");
      
      foreach(tsFile in tsFilesToParse)
      {
        // TODO: Support references outside project directory
        when (tsFile.Length < projectDir.Length || tsFile.Substring(0, projectDir.Length) != projectDir)
          Message.Error($"File $tsFile is outside directory $directory");
        
        def baseNamespace = GetNamespaceName(Path.GetDirectoryName(tsFile).Substring(projectDir.Length + 1));
        def fileName = Path.GetFileNameWithoutExtension(Path.GetFileNameWithoutExtension(tsFile));
        
        //ParseTS(typer, tsFile, baseNamespace, fileName);
      }
    }
     
    /// Parse all references
    private PreParseTS(tsFile : string, tsFilesToParse : HashSet[string]) : void
    {
      if(tsFilesToParse.Contains(tsFile)) ()
      else
        match(tsParser.TryParse(File.ReadAllText(tsFile)))
        {
        | (pos, result) when pos == tsParser.ParsingSource.OriginalText.Length =>
          // Add file
          _ = tsFilesToParse.Add(tsFile);
        
          // Check all references
          foreach(TSGlobal.ReferencePath(path) in result)
          {
            def reference = Path.GetFullPath(Path.Combine(Path.GetDirectoryName(tsFile), path));
            _ = tsFilesToParse.Add(reference);
          
            PreParseTS(reference, tsFilesToParse);
          }
        | (pos, _) =>
          // TODO: Add locations to parser and print here correct location in the file.
          def text = tsParser.ParsingSource.OriginalText;
          Message.Error(Location(tsFile, 0, 0, 0, 0), $"Failed to parse $tsFile, somewhere here: $(text.Substring(pos, 55))...");
        }
    }
    
    private ParseTS(typer : Typer, tsFile : string, baseNamespace : string, fileName : string) : void
    {
      match(tsParser.TryParse(File.ReadAllText(tsFile)))
      {
      | (pos, result) when pos == tsParser.ParsingSource.OriginalText.Length =>       
        // Root JS API namespace
        def jsApiRoot = typer.Env.EnterIntoNamespace(["JSApi"]);
        
        // Create module and namespace
        def fullRelativeApi = $"$baseNamespace.$fileName".TrimEnd('.');
        def jsApiNamespace = jsApiRoot.EnterIntoNamespace(fullRelativeApi.SplitDot());
        def jsApiModule = CreateModule(fullRelativeApi, Scope(jsApiRoot));
        
        // Generate members
        foreach(r in result) 
        {
        | Interface as i => CreateTSGlobalInterface(i, jsApiNamespace)
        | Class     as c => CreateTSGlobalClass    (c, jsApiNamespace)
        | Enum      as e => CreateTSGlobalEnum     (e, jsApiNamespace)
        | Import    as i => CreateTSGlobalImport   (i, jsApiNamespace)
        | Export    as e => CreateTSGlobalExport   (e, jsApiNamespace)
        | Module    as m => CreateTSGlobalModule   (m, jsApiNamespace)
        | _ => ()
        }
        
        foreach(r in result) 
        {
        | Variable  as v => CreateTSGlobalVariable (v, jsApiModule, jsApiNamespace)
        | Function  as f => CreateTSGlobalFunction (f, jsApiModule, jsApiNamespace)
        | Construct as c => CreateTSGlobalConstruct(c, jsApiModule)
        | _ => ()
        }
    
        when(fileName != "") jsApiModule.Compile();
        
      | (pos, _) =>
        // TODO: Add locations to parser and print here correct location in the file.
        def text = tsParser.ParsingSource.OriginalText;
        Message.Error(Location(tsFile, 0, 0, 0, 0), $"Failed to parse $tsFile, somewhere here: $(text.Substring(pos, 55))...")
      }
    }
 
    private CreateTSGlobalVariable(var : TSGlobal.Variable, jsApi : TypeBuilder, jsApiNamespace : GlobalEnv) : void
    {
      def varType = ConvertType(var.Type, jsApiNamespace);
      

        
      _ = jsApi.DefineWithSource(<[ decl: public $(var.Name : usesite) : $varType ]>);
    }
  
    private CreateTSGlobalFunction(function : TSGlobal.Function, jsApi : TypeBuilder, jsApiNamespace : GlobalEnv) : void
    {
      if (function.Name is Some(fname))
      {
        _ = jsApi.DefineWithSource(<[ decl: 
          $(fname : usesite)() : $(ConvertType(function.ReturnType, jsApiNamespace))
          {
            throw ClientCodeCalledInServerException();
          }
        ]>);
      }
      else
      {
        Message.Error("Global functions must have name");
      }
    }
  
    private CreateTSGlobalInterface(tsInterface : TSGlobal.Interface, jsApiNamespace : GlobalEnv) : void
    {
      def type =
        if (tsInterface.Extends is [])
          <[ decl: public partial interface $(tsInterface.Name : usesite) {} ]>
        else
        {
          def extends = tsInterface.Extends.Map(e => <[ $(e : usesite) ]>);
          <[ decl: public partial interface $(tsInterface.Name : usesite) : ..$extends {} ]>
        };
      jsApiNamespace.Define(type).Compile();
    }
  
    private CreateTSGlobalClass(tsClass : TSGlobal.Class, jsApiNamespace : GlobalEnv) : void
    {
      def type = 
        match((tsClass.Extends, tsClass.Implements))
        {
        | (None, []) =>
          <[ decl: public partial class $(tsClass.Name : usesite) {} ]>
        | _ =>
          def extends = if (tsClass.Extends is Some(ex)) [<[ $(ex : usesite) ]>] else [];
          def implement = tsClass.Implements.Map(e => <[ $(e : usesite) ]>);
          def inherit = extends.Append(implement);
          <[ decl: public partial class $(tsClass.Name : usesite) : ..$inherit {} ]>
        };
      jsApiNamespace.Define(type).Compile();
    }
  
    private CreateTSGlobalConstruct(c : TSGlobal.Construct, jsApi : TypeBuilder) : void
    {
      
    }
    
    private CreateTSGlobalEnum(tsEnum : TSGlobal.Enum, jsApiNamespace : GlobalEnv) : void
    {
      def type = <[ decl: public enum $(tsEnum.Name : usesite) { } ]>;
      jsApiNamespace.Define(type).Compile();
    }
  
    private CreateTSGlobalImport(i : TSGlobal.Import, jsApiNamespace : GlobalEnv) : void
    {
      
    }
  
    private CreateTSGlobalExport(e : TSGlobal.Export, jsApiNamespace : GlobalEnv) : void
    {
      
    }
  
    private CreateTSGlobalModule(tsModule : TSGlobal.Module, jsApiNamespace : GlobalEnv) : void
    {
      def moduleName = tsModule.Name.Replace('/', '.').Replace('\\', '.');
      
      // Create modules by splitting '.'
      _ = CreateModule(moduleName, Scope(jsApiNamespace));
    }

    #region Helpers
    
    private GetParamsType(parms : IEnumerable[TSParam], jsApiNamespace : GlobalEnv) : IEnumerable[PExpr]
    {
      def convertParamsType(p : TSParam)
      {
        | Required(_, type, _)
        | Option(_, _, type, _) => ConvertType(type, jsApiNamespace)
        | Rest(_, type) => ConvertType(type, jsApiNamespace)
      }
    
      def ret = parms.Select(convertParamsType);
      ret
    }
  
    private ConvertType(inputType : option[TSType], jsApiNamespace : GlobalEnv) : PExpr
    {
      match(inputType)
      {
      | Some(type) => ConvertType(type, jsApiNamespace)
      | None => <[ object ]>
      }
    }
  
    private ConvertType(inputType : TSType, jsApiNamespace : GlobalEnv) : PExpr
    {
      match(inputType)
      {
      | Array(type, 0) => <[ $(ConvertType(type, jsApiNamespace)) ]>
      | Array(type, arity) => <[ array[$(ConvertType(TSType.Array(type, arity - 1), jsApiNamespace))] ]>
      | Bool => <[ bool ]>   
      | Lambda(parms, ret) =>
        mutable lambdaParams = GetParamsType(parms, jsApiNamespace);
        def type =
          if(ret is TSType.Void())
            <[ System.Action ]>
          else
          {
            lambdaParams = lambdaParams.Concat([ConvertType(ret, jsApiNamespace)]);
            <[ System.Func ]>
          };
        
        <[ $type.[..$lambdaParams] ]>
      | Named(name) => <[ $(name : usesite) ]>
      | New => Message.Hint("new() is not supported yet"); <[ object ]>
      | Number => <[ float ]>
      | Object(members) => 
        //def anonymousClassName = var.Name + "AnonymousClass";
        //def anonymousClass = jsApiNamespace.Define(<[ decl: public sealed class $(anonymousClassName : usesite) {} ]>);
        //anonymousClass.Compile();
        
        // DefineMembers(anon, var.Members);
        
        //_ = jsApi.Define(<[ decl: public $(var.Name : usesite) : $(anonymousClass.FullName : usesite) ]>);
        <[ object ]>
      | String => <[ string ]>
      | Void => <[ void ]>
      | Any => <[ object ]>
      }
    }
         
    /// Replace path separator with dots
    private GetNamespaceName(path : string) : string
    {
      path.Replace('\\', '.').Replace('/', '.').TrimEnd('.')
    }
    
    private CreateModule(moduleName : string, outer : Scope) : TypeBuilder
    {
      CreateModule(moduleName.SplitDot(), outer)
    }    
    
    private CreateModule(parts : list[string], outer : Scope) : TypeBuilder
    {
      match (parts)
      {
      | [] => 
        if(outer.TypeBuilder != null) outer.TypeBuilder 
        else
        {
          Message.Error("List must not be empty");
          null
        }
      | [hd] =>
        def t = outer.Define(<[ decl: public partial module $(hd : usesite) {} ]>);
        t.Compile();
        t
      | hd :: tl =>
        def innerModule = outer.Define(<[ decl: public partial module $(hd : usesite) {} ]>);
        def t = CreateModule(tl, Scope(innerModule));
        innerModule.Compile();
        t
      | _ => Message.Error("Must not get there"); null
      }
    }
    
    #endregion
  }    
  
  module StringExt
  {
    public SplitDot(this s : string) : list[string]
    {
      s.Split('.').NToList()
    }
  }
  
  /// Wraps GlobalEnv or TypeBuilder for type creation
  internal sealed class Scope
  {
    public GlobalEnv : GlobalEnv { get; }
    public TypeBuilder : TypeBuilder { get; }
    
    public this([NotNull] globalEnv : GlobalEnv)
    {
      GlobalEnv = globalEnv;
    }
    
    public this([NotNull] typeBuilder : TypeBuilder)
    {
      TypeBuilder = typeBuilder;
    }
    
    public Define(typeDeclaration : ClassMember.TypeDeclaration) : TypeBuilder
    {
      if(GlobalEnv != null) GlobalEnv.Define(typeDeclaration)
      else                  TypeBuilder.DefineNestedType(typeDeclaration)
    }
  }
}
