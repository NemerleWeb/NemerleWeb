using System.Collections.Generic;
using System.Linq;
using Nemerle.Macros;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Collections;
using System.IO;
using System.Text.RegularExpressions;
using TSParser;
using NemerleWeb;

namespace NemerleWeb.Macros
{
  [Nemerle.MacroUsage(Nemerle.MacroPhase.BeforeInheritance, Nemerle.MacroTargets.Assembly)]
  macro GenerateJSApi(params options : list[PExpr])
  {
    GenerateJSApiImpl.Impl(ImplicitCTX(), options)
  }
  
  module GenerateJSApiImpl
  {
    tsParser = TSDeclarationParser();
    
    public Impl(typer : Typer, options : list[PExpr]) : void
    {      
      match(options)
      {
      | [<[ Directory = $(directory : string) ]> ] with (libPath = "", exclude = "")
      | [<[ Directory = $(directory : string) ]>,
         <[ Exclude = $(exclude : string) ]> ] with libPath = ""
      | [<[ Lib = $(libPath : string) ]>,
         <[ Directory = $(directory : string) ]> ] with exclude = ""
      | [<[ Lib = $(libPath : string) ]>,
         <[ Directory = $(directory : string) ]>,
         <[ Exclude = $(exclude : string) ]> ] =>
        DoImpl(typer, libPath, directory, exclude)
      | _ =>
        Message.Error("Specify Directory parameter and optional Lib, Exclude parameters");
      }
    }
    
    private DoImpl(typer : Typer, libPath : string, directory : string, exclude : string) : void
    {
      def projectDir = Path.GetDirectoryName(typer.Manager.Options.ProjectPath);
      
      // Parse lib if present
      when (libPath != "")
        ParseTSAndGenerate(typer, Path.Combine(projectDir, libPath), NormalizeName(directory), "");
      
      // Parse all files in directory
      def re = Regex(exclude);
      def isIncluded(s) { if (exclude == "") true else !re.IsMatch(s) }
      
      def fullDir = Path.Combine(projectDir, directory);
      def tsFiles = Directory.EnumerateFiles(fullDir, "*.d.ts", SearchOption.AllDirectories);
      
      foreach(tsFile when isIncluded(tsFile) in tsFiles)
      {
        def baseNamespace = Path.GetDirectoryName(tsFile).Substring(projectDir.Length + 1);
        def fileName = Path.GetFileNameWithoutExtension(Path.GetFileNameWithoutExtension(tsFile));
        ParseTSAndGenerate(typer, tsFile, NormalizeName(baseNamespace), fileName);
      }
    }
    
    private ParseTSAndGenerate(typer : Typer, tsFile : string, baseNamespace : string, fileName : string) : void
    {
      match(tsParser.TryParse(File.ReadAllText(tsFile)))
      {
      | (pos, result) when pos == tsParser.ParsingSource.OriginalText.Length =>
        // Root JS API namespace
        def jsApiRoot = typer.Env.EnterIntoNamespace("JSApi" :: baseNamespace.Split('.').NToList());
        
        // Create module and namespace
        def jsApiNS = jsApiRoot.EnterIntoNamespace(fileName.Split('.').NToList());
        jsApiNS.Define(<[ decl: public class Dummy {} ]>).Compile();
        
        def jsApiModule = CreateModule(fileName, jsApiRoot);
        
        Message.Hint($"$(jsApiNS)");
        Message.Hint($"$(jsApiModule)");
        
      | (pos, _) =>
        // TODO: Add locations to parser and print here correct location in the file.
        def text = tsParser.ParsingSource.OriginalText;
        Message.Error(Location(tsFile, 0, 0, 0, 0), $"Failed to parse $tsFile, somewhere here: $(text.Substring(pos, 55))...")
      }
    }
    
 
      //      def jsApiModule =
      //        if (infrastructure)
      //          jsApi
      //        else
      //        {
      //          def fileName = Path.GetFileNameWithoutExtension(Path.GetFileNameWithoutExtension(tsFile));
      //          CreateModule(fileName.Split('.').NToList(), jsApi)
      //        };
            
      //      foreach(r in result) 
      //      {
      //      //| Variable  as v => CreateTSGlobalVariable (v, jsApiModule)
      //      //| Function  as f => CreateTSGlobalFunction (f, jsApiModule)
      //      //| Interface as i => CreateTSGlobalInterface(i, jsApiModule)
      //      //| Class     as c => CreateTSGlobalClass    (c, jsApiModule)
      //      //| Construct as c => CreateTSGlobalConstruct(c, jsApiModule)
      //      //| Enum      as e => CreateTSGlobalEnum     (e, jsApiModule)
      //      //| Import    as i => CreateTSGlobalImport   (i, jsApiModule)
      //      //| Export    as e => CreateTSGlobalExport   (e, jsApiModule)
      //      //| Module    as m => CreateTSGlobalModule   (m, jsApiModule)
      //      //| ReferencePath(path) => Message.Hint($"Reference $path");
      //      //| ReferenceNoDefaultLib => Message.Hint("No default lib");
      //      | _ => ()
      //      }
            
      //      when (!infrastructure) jsApiModule.Compile();
      //    | (pos, _) => 
      //      def text = parser.ParsingSource.OriginalText;
      //      Message.Error(Location(tsFile, pos, pos, pos, pos), $"Failed to parse $tsFile, somewhere here: $(text.Substring(pos, 55))...")
      //    }
      //  }
      
      //  // Parse first the infrastructure file.
      //  def infrastructure = Path.Combine(tsDir, @"_infrastructure\tests\typescript_0.8.3\lib.d.ts");
      //  parse(infrastructure, true);
      
      //  // Parse other files
      //  foreach(tsFile when !tsFile.Contains("_infrastructure") in tsFiles)
      //    parse(tsFile, false);
          
      //  jsApi.Compile();

      
      //  | _ => Message.Error(<#Unrecognized option format, should be tuple of two strings: ("
      //  ", "Typescripts") #>)
      //}
    //}
    
    private CreateTSGlobalVariable(var : TSGlobal.Variable, jsApi : TypeBuilder) : void
    {
      def variableType = var.Name + "AnonymousClass";
      jsApi.DefineNestedType(<[ decl: public partial class $(variableType : usesite) {} ]>).Compile();
      
      // DefineMembers(anon, var.Members);
      
      //_ = jsApi.Define(<[ decl: public $(var.Name : usesite) : $(variableType : usesite) ]>);
    }
  
    private CreateTSGlobalFunction(function : TSGlobal.Function, jsApi : TypeBuilder) : void
    {
      if (function.Name is Some(fname))
      {
        jsApi.Define(<[ decl: 
          $(fname : usesite)() : $(ConvertType(function.ReturnType))
          {
            throw ClientCodeCalledInServerException();
          }
        ]>);
      }
      else
      {
        Message.Error("Global functions must have name");
      }
    }
  
    private CreateTSGlobalInterface(tsInterface : TSGlobal.Interface, jsApi : TypeBuilder) : void
    {
      def type =
        if (tsInterface.Extends is [])
          <[ decl: public partial interface $(tsInterface.Name : usesite) {} ]>
        else
        {
          def extends = tsInterface.Extends.Map(e => <[ $(e : usesite) ]>);
          <[ decl: public partial interface $(tsInterface.Name : usesite) : ..$extends {} ]>
        };
      jsApi.DefineNestedType(type).Compile();
    }
  
    private CreateTSGlobalClass(tsClass : TSGlobal.Class, jsApi : TypeBuilder) : void
    {
      def type = 
        match((tsClass.Extends, tsClass.Implements))
        {
        | (None, []) =>
          <[ decl: public partial class $(tsClass.Name : usesite) {} ]>
        | _ =>
          def extends = if (tsClass.Extends is Some(ex)) [<[ $(ex : usesite) ]>] else [];
          def implement = tsClass.Implements.Map(e => <[ $(e : usesite) ]>);
          def inherit = extends.Append(implement);
          <[ decl: public partial class $(tsClass.Name : usesite) : ..$inherit {} ]>
        };
      jsApi.DefineNestedType(type).Compile();
    }
  
    private CreateTSGlobalConstruct(c : TSGlobal.Construct, jsApi : TypeBuilder) : void
    {
      
    }
    
    private CreateTSGlobalEnum(tsEnum : TSGlobal.Enum, jsApi : TypeBuilder) : void
    {
      def type = <[ decl: public enum $(tsEnum.Name : usesite) { } ]>;
      jsApi.DefineNestedType(type).Compile();
    }
  
    private CreateTSGlobalImport(i : TSGlobal.Import, jsApi : TypeBuilder) : void
    {
      
    }
  
    private CreateTSGlobalExport(e : TSGlobal.Export, jsApi : TypeBuilder) : void
    {
      
    }
  
    private CreateTSGlobalModule(tsModule : TSGlobal.Module, jsApi : TypeBuilder) : void
    {
      def moduleName = tsModule.Name.Replace('/', '.').Replace('\\', '.');
      
      // Create modules by splitting '.'
      _ = CreateModule(moduleName, jsApi);
    }

    #region Helpers
    private GetParamsType(parms : list[TSParam], additional : option[TSType]) : list[PExpr]
    {
      def convertParamsType(p : TSParam)
      {
        | Required(_, t, _)
        | Option(_, _, t, _) => ConvertType(t)
        | Rest(_, t) => ConvertType(t)
      }
    
      def ret = 
        parms
          .Map(convertParamsType)
          .Append(if (additional is Some(t)) [ConvertType(t)] else []);
    
      ret
    }
  
    private ConvertType(inputType : option[TSType]) : PExpr
    {
      | Some(type) => ConvertType(type)
      | None => <[ object ]>
    }
  
    private ConvertType(inputType : TSType) : PExpr
    {
      | Array(type, 0) => <[ $(ConvertType(type)) ]>
      | Array(type, arity) => <[ array[$(ConvertType(TSType.Array(type, arity - 1)))] ]>
      | Bool => <[ bool ]>    
      | Lambda(parms, ret) =>
        def (type, additional) = 
          if (ret is TSType.Void()) (<[ Action ]>, None())
          else                      (<[ Func ]>, Some(ret));
        
        <[ $type.[{..$(GetParamsType(parms, additional))}] ]>
      | Named
      | New
      | Number => <[ float ]>
      | Object => Message.Hint("Object is not supported"); <[ ]>
      | String => <[ void ]>
      | Void => <[ void ]>
      | Any
      | _ => <[ object ]>
    }
        
    /// Replace path separator with dots
    private NormalizeName(path : string) : string
    {
      path.Replace('\\', '.').Replace('/', '.')
    }
    
    private CreateModule(parts : list[string], outer : TypeBuilder) : TypeBuilder
    {
      match (parts)
      {
      | [hd] =>
        def t = outer.DefineNestedType(<[ decl: public partial module $(hd : usesite) {} ]>);
        t.Compile();
        t
      | hd :: tl =>
        def innerModule = outer.DefineNestedType(<[ decl: public partial module $(hd : usesite) {} ]>);
        def t = CreateModule(tl, innerModule);
        innerModule.Compile();
        t
      }
    }
    
    private CreateModule(moduleName : string, outer : TypeBuilder) : TypeBuilder
    {
      CreateModule(moduleName.Split('.').NToList(), outer)
    }
    
    private CreateModule(moduleName : string, outer : GlobalEnv) : TypeBuilder
    {
      def parts = moduleName.Split('.').NToList();
      match (parts)
      {
      | [hd] =>
          def t = outer.Define(<[ decl: public partial module $(hd : usesite) {} ]>);
          t.Compile();
          t
      | hd :: tl =>
          def innerModule = outer.Define(<[ decl: public partial module $(hd : usesite) {} ]>);
          def t = CreateModule(tl, innerModule);
          innerModule.Compile();
          t
      }
    }
    
    #endregion
  }
}
