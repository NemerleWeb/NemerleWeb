using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace NemerleWeb
{
  macro Throttle(expr : PExpr)
  syntax ("throttle", expr)
  {
    ThrottleImpl.DoTransform(Macros.ImplicitCTX(), expr)
  }
  
  module ThrottleImpl
  {        
    public DoTransform(typer : Typer, expr : PExpr) : PExpr
    {      
      Macros.DefineCTX(typer);
      
      match(expr) 
      {
        | <[ ($(timeout : int), $code) ]> => 
          def method = typer.CurrentMethodBuilder;
          def parmTypes = string.Join("_", method.GetParameters().Select(p => p.ty.TypeInfo.Name));
          def timeoutVarName = "_timeoutVar" + method.Name + JSClass.GetProperName(parmTypes);
          typer.CurrentTypeBuilder.Define(<[ decl: mutable $(timeoutVarName : usesite) : float; ]>);
          
          def lambda = <[ () => { $code } ]>;
          
          <[ 
            NemerleWeb.TypedJS.window.clearTimeout($(timeoutVarName : usesite));
            $(timeoutVarName : usesite) = NemerleWeb.TypedJS.window.setTimeout($(lambda), $timeout, null);
          ]>
        | _ => Message.FatalError("Expecting throttle(100, { code }) syntax)");
      }      
    }
  }
}
