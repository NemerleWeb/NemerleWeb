using System.Collections.Generic;
using System.Linq;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Collections;
using System.IO;
using TSParser;
using NemerleWeb;

namespace NemerleWeb.Macros
{
  [Nemerle.MacroUsage (Nemerle.MacroPhase.BeforeInheritance,
                       Nemerle.MacroTargets.Assembly)]
  macro NemerleWebProperties(params options : list[PExpr])
  {  
    NemerleWebPropertiesImpl.Impl(Nemerle.Macros.ImplicitCTX(), options) 
  }

  module NemerleWebPropertiesImpl
  {
    public Impl(typer : Typer, options : list[PExpr]) : void
    {
      def jsApi = typer.Env.Define(<[ decl: public module JsApi {} ]>);
      
      foreach(opt in options)
      {
      | <[ (TypeScriptPath, $(path)) ]> => 
        def parser = TSDeclarationParser();
        def path = path.ToString();      
        def projectDir = Path.GetDirectoryName(typer.Manager.Options.ProjectPath);
        def tsDir = Path.Combine(projectDir, path);
        def tsFiles = Directory.EnumerateFiles(tsDir, "*.d.ts", SearchOption.AllDirectories);
                     
        //assert2(false); 
        
        def parse(tsFile, infrastructure)
        {
          match(parser.TryParse(File.ReadAllText(tsFile)))
          {
          | (pos, result) when pos == parser.ParsingSource.OriginalText.Length =>
            
            def jsApiModule =
              if (infrastructure)
                jsApi
              else
              {
                def fileName = Path.GetFileNameWithoutExtension(Path.GetFileNameWithoutExtension(tsFile));
                CreateModule(fileName.Split('.').NToList(), jsApi)
              };
            
            foreach(r in result) 
            {
            //| Variable  as v => CreateTSGlobalVariable (v, jsApiModule)
            //| Function  as f => CreateTSGlobalFunction (f, jsApiModule)
            //| Interface as i => CreateTSGlobalInterface(i, jsApiModule)
            //| Class     as c => CreateTSGlobalClass    (c, jsApiModule)
            //| Construct as c => CreateTSGlobalConstruct(c, jsApiModule)
            //| Enum      as e => CreateTSGlobalEnum     (e, jsApiModule)
            //| Import    as i => CreateTSGlobalImport   (i, jsApiModule)
            //| Export    as e => CreateTSGlobalExport   (e, jsApiModule)
            //| Module    as m => CreateTSGlobalModule   (m, jsApiModule)
            | _ => ()
            }
            
            when (!infrastructure) jsApiModule.Compile();
          | (pos, _) => 
            def text = parser.ParsingSource.OriginalText;
            Message.Error(Location(tsFile, pos, pos, pos, pos), $"Failed to parse $tsFile, somewhere here: $(text.Substring(pos, 55))...")
          }
        }
      
        // Parse first the infrastructure file.
        def infrastructure = Path.Combine(tsDir, @"_infrastructure\tests\typescript_0.8.3\lib.d.ts");
        parse(infrastructure, true);
      
        // Parse other files
        foreach(tsFile when !tsFile.Contains("_infrastructure") in tsFiles)
          parse(tsFile, false);
          
        jsApi.Compile();

      | _ => Message.Error(<#Unrecognized option format, should be tuple of two strings: ("TypeScriptPath", "Typescripts") #>)
      }
    }
    
    private CreateTSGlobalVariable(var : TSGlobal.Variable, jsApi : TypeBuilder) : void
    {
      def variableType = var.Name + "AnonymousClass";
      jsApi.DefineNestedType(<[ decl: public partial class $(variableType : usesite) {} ]>).Compile();
      
      // DefineMembers(anon, var.Members);
      
      //_ = jsApi.Define(<[ decl: public $(var.Name : usesite) : $(variableType : usesite) ]>);
    }
  
    private CreateTSGlobalFunction(function : TSGlobal.Function, jsApi : TypeBuilder) : void
    {
      if (function.Name is Some(fname))
      {
        jsApi.Define(<[ decl: 
          $(fname : usesite)() : $(ConvertType(function.ReturnType))
          {
            throw ClientCodeCalledInServerException();
          }
        ]>);
      }
      else
      {
        Message.Error("Global functions must have name");
      }
    }
  
    private CreateTSGlobalInterface(tsInterface : TSGlobal.Interface, jsApi : TypeBuilder) : void
    {
      def type =
        if (tsInterface.Extends is [])
          <[ decl: public partial interface $(tsInterface.Name : usesite) {} ]>
        else
        {
          def extends = tsInterface.Extends.Map(e => <[ $(e : usesite) ]>);
          <[ decl: public partial interface $(tsInterface.Name : usesite) : ..$extends {} ]>
        };
      jsApi.DefineNestedType(type).Compile();
    }
  
    private CreateTSGlobalClass(tsClass : TSGlobal.Class, jsApi : TypeBuilder) : void
    {
      def type = 
        match((tsClass.Extends, tsClass.Implements))
        {
        | (None, []) =>
          <[ decl: public partial class $(tsClass.Name : usesite) {} ]>
        | _ =>
          def extends = if (tsClass.Extends is Some(ex)) [<[ $(ex : usesite) ]>] else [];
          def implement = tsClass.Implements.Map(e => <[ $(e : usesite) ]>);
          def inherit = extends.Append(implement);
          <[ decl: public partial class $(tsClass.Name : usesite) : ..$inherit {} ]>
        };
      jsApi.DefineNestedType(type).Compile();
    }
  
    private CreateTSGlobalConstruct(c : TSGlobal.Construct, jsApi : TypeBuilder) : void
    {
      
    }
    
    private CreateTSGlobalEnum(tsEnum : TSGlobal.Enum, jsApi : TypeBuilder) : void
    {
      def type = <[ decl: public enum $(tsEnum.Name : usesite) { } ]>;
      jsApi.DefineNestedType(type).Compile();
    }
  
    private CreateTSGlobalImport(i : TSGlobal.Import, jsApi : TypeBuilder) : void
    {
      
    }
  
    private CreateTSGlobalExport(e : TSGlobal.Export, jsApi : TypeBuilder) : void
    {
      
    }
    
    private CreateModule(parts : list[string], outerModule : TypeBuilder) : TypeBuilder
    {
      match (parts)
      {
      | [hd] =>
        def t = outerModule.DefineNestedType(<[ decl: public partial module $(hd : usesite) {} ]>);
        t.Compile();
        t
      | hd :: tl =>
        def innerModule = outerModule.DefineNestedType(<[ decl: public partial module $(hd : usesite) {} ]>);
        def t = CreateModule(tl, innerModule);
        innerModule.Compile();
        t
      | _ => Message.Error("Must not get here"); null
      }
    }
  
    private CreateTSGlobalModule(tsModule : TSGlobal.Module, jsApi : TypeBuilder) : void
    {
      def moduleName = tsModule.Name.Replace('/', '.').Replace('\\', '.');
      
      // Create modules by splitting '.'
      _ = CreateModule(moduleName.Split('.').NToList(), jsApi);
    }
  
    private GetParamsType(parms : list[TSParam], additional : option[TSType]) : list[PExpr]
    {
      def convertParamsType(p : TSParam)
      {
        | Required(_, t, _)
        | Option(_, _, t, _) => ConvertType(t)
        | Rest(_, t) => ConvertType(t)
      }
    
      def ret = 
        parms
          .Map(convertParamsType)
          .Append(if (additional is Some(t)) [ConvertType(t)] else []);
    
      ret
    }
  
    private ConvertType(inputType : option[TSType]) : PExpr
    {
      | Some(type) => ConvertType(type)
      | None => <[ object ]>
    }
  
    private ConvertType(inputType : TSType) : PExpr
    {
      | Array(type, 0) => <[ $(ConvertType(type)) ]>
      | Array(type, arity) => <[ array[$(ConvertType(TSType.Array(type, arity - 1)))] ]>
      | Bool => <[ bool ]>    
      | Lambda(parms, ret) =>
        def (type, additional) = 
          if (ret is TSType.Void()) (<[ Action ]>, None())
          else                      (<[ Func ]>, Some(ret));
        
        <[ $type.[{..$(GetParamsType(parms, additional))}] ]>
      | Named
      | New
      | Number => <[ float ]>
      | Object => Message.Hint("Object is not supported"); <[ ]>
      | String => <[ void ]>
      | Void => <[ void ]>
      | Any
      | _ => <[ object ]>
    }
  }
}
