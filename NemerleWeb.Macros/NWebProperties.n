using System.Collections.Generic;
using System.Linq;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using System.IO;
using TypeScript;
using Nemerle.Web;

namespace Nemerle.Web.Macros
{
  [Nemerle.MacroUsage (Nemerle.MacroPhase.BeforeInheritance,
                       Nemerle.MacroTargets.Assembly)]
  macro NemerleWebProperties(params options : list[PExpr])
  {  
    NemerleWebPropertiesImpl.Impl(Nemerle.Macros.ImplicitCTX(), options) 
  }

  module NemerleWebPropertiesImpl
  {
    public Impl(typer : Typer, options : list[PExpr]) : void
    {
      foreach(opt in options)
      {
      | <[ (TypeScriptPath, $(path)) ]> => 
        def parser = TSDeclarationParser();
        def path = path.ToString();      
        def projectDir = Path.GetDirectoryName(typer.Manager.Options.ProjectPath);
        def tsDir = Path.Combine(projectDir, path);
        def tsFiles = Directory.EnumerateFiles(tsDir, "*.d.ts", SearchOption.AllDirectories);
      
        def jsApi = typer.Env;
        //assert2(false);  
      
        def parse(tsFile)
        {
          match(parser.TryParse(File.ReadAllText(tsFile)))
          {
          | (pos, result) when pos == parser.ParsingSource.OriginalText.Length =>           
            foreach(r in result) 
            {
              def res =
                match(r)
                {
                | Variable  as v => CreateTSGlobalVariable(v)
                | Function  as f => CreateTSGlobalFunction(f)
                | Interface as i => CreateTSGlobalInterface(i)
                | Class     as c => CreateTSGlobalClass(c)
                | Construct as c => CreateTSGlobalConstruct(c)
                | Enum      as e => CreateTSGlobalEnum(e)
                | Import    as i => CreateTSGlobalImport(i)
                | Export    as e => CreateTSGlobalExport(e)
                | Module    as m => CreateTSGlobalModule(m)
                };
              jsApi.Define(res).Compile();
            }
          | (pos, _) => 
            def text = parser.ParsingSource.OriginalText;
            Message.Error(Location(tsFile, pos, pos, pos, pos), $"Failed to parse $tsFile, somewhere here: $(text.Substring(pos, 55))...")
          }
        }
      
        // Parse first the infrastructure file.
        def infrastructure = Path.Combine(tsDir, @"_infrastructure\tests\typescript_0.8.3\lib.d.ts");
        parse(infrastructure);
      
        // Parse other files
        foreach(tsFile when !tsFile.Contains("_infrastructure") in tsFiles)
          parse(tsFile);

      | _ => Message.Error(<#Unrecognized option format, should be tuple of two strings: ("TypeScriptPath", "Typescripts") #>)
      }
    }
  
    private static CreateTSGlobalVariable(var : TSGlobal.Variable) : ClassMember
    {
      //def anonName = var.Name + "AnonymousClass";
      //def anon = tb.DefineNestedType(<[ decl: public class $(anonName : usesite) {} ]>);
      
      //_ = tb.DefineWithSource(<[ decl: public $(var.Name : usesite) : $(anonName : usesite) ]>);
    
      // DefineMembers(anon, var.Members);
      //anon.Compile();
      <[ decl: partial class Dummy {} ]>
    }
  
    //x : HashSet.[string] = HashSet();
  
    private static CreateTSGlobalFunction(function : TSGlobal.Function) : ClassMember
    {
      //if (function.Name is Some(fname))
      //{
      //  if (x.Contains(fname))
      //    <[ decl: partial class Dummy {} ]>
      //  else
      //  {
      //    x.Add(fname);
      //    <[ decl: $(fname : usesite)() : $(ConvertType(function.ReturnType)) { throw ClientCodeCalledInServerException(); } ]>
      //  }
      //}
      //else
      //{
        <[ decl: partial class Dummy {} ]>
      //}
    }
  
    private static CreateTSGlobalInterface(@interface : TSGlobal.Interface) : ClassMember
    {
      match (@interface.Extends)
      {
      | [] => <[ decl: public partial interface $(@interface.Name : usesite) {} ]>
      | _ =>
        def extends = @interface.Extends.Map(e => <[ $(e : usesite) ]>);
        <[ decl: public partial interface $(@interface.Name : usesite) : ..$extends {} ]>
      }
    }
  
    private static CreateTSGlobalClass(@class : TSGlobal.Class) : ClassMember
    {
      match((@class.Extends, @class.Implements))
      {
      | (None, []) => <[ decl: public partial class $(@class.Name : usesite) {} ]>;
      | _ =>
        def extends = if (@class.Extends is Some(ex)) [<[ $(ex : usesite) ]>] else [];
        def implement = @class.Implements.Map(e => <[ $(e : usesite) ]>);
        def inherit = extends.Append(implement);
        <[ decl: public partial class $(@class.Name : usesite) : ..$inherit {} ]>;
      };
    }
  
    private static CreateTSGlobalConstruct(c : TSGlobal.Construct) : ClassMember
    {
      <[ decl: partial class Dummy {} ]>
    }
  
    private static CreateTSGlobalEnum(@enum : TSGlobal.Enum) : ClassMember
    {
      <[ decl: enum $(@enum.Name : usesite) { } ]>
    }
  
    private static CreateTSGlobalImport(i : TSGlobal.Import) : ClassMember
    {
      <[ decl: partial class Dummy {} ]>
    }
  
    private static CreateTSGlobalExport(e : TSGlobal.Export) : ClassMember
    {
      <[ decl: partial class Dummy {} ]>
    }
  
    private static CreateTSGlobalModule(@module : TSGlobal.Module) : ClassMember
    {
      <[ decl: partial module $(@module.Name : usesite) {} ]>
    }
  
    private GetParamsType(parms : list[TSParam], additional : option[TSType]) : list[PExpr]
    {
      def convertParamsType(p : TSParam)
      {
        | Required(_, t, _)
        | Option(_, _, t, _) => ConvertType(t)
        | Rest(_, t) => ConvertType(t)
      }
    
      def ret = 
        parms
          .Map(convertParamsType)
          .Append(if (additional is Some(t)) [ConvertType(t)] else []);
    
      ret
    }
  
    private ConvertType(inputType : option[TSType]) : PExpr
    {
      | Some(type) => ConvertType(type)
      | None => <[ object ]>
    }
  
    private ConvertType(inputType : TSType) : PExpr
    {
      | Array(type, 0) => <[ $(ConvertType(type)) ]>
      | Array(type, arity) => <[ array[$(ConvertType(TSType.Array(type, arity - 1)))] ]>
      | Bool => <[ bool ]>    
      | Lambda(parms, ret) =>
        def (type, additional) = 
          if (ret is TSType.Void()) (<[ Action ]>, None())
          else                      (<[ Func ]>, Some(ret));
        
        <[ $type.[{..$(GetParamsType(parms, additional))}] ]>
      | Named
      | New
      | Number => <[ float ]>
      | Object => Message.Hint("Object is not supported"); <[ ]>
      | String => <[ void ]>
      | Void => <[ void ]>
      | Any
      | _ => <[ object ]>
    }
  }
}
