using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using System;
using System.Collections.Generic;
using System.Linq;

namespace NemerleWeb
{
  macro nweb_macro(expr) 
  syntax("nweb", expr)
  {
    def ctx = Macros.ImplicitCTX();
    NwebImpl.TransformNweb(expr, ctx);
  }
    
  public module NwebImpl
  {
    public TransformNweb(expr : PExpr, typer : Typer) : PExpr 
    {    
      match(expr)
      {
      | <[ $_unitName() ]> with parms = []
      | <[ $_unitName(..$parms) ]> => 
        def properName = JsClass.GetProperName(typer.TypeExpr(expr).Type.TypeInfo);        
        def serverParams = parms.Map(p => <[ paramList.Add("nweb.utils.toTypedObject(" + NWebUtils.ToJson($p) + ")") ]>);
        
        def res = <[
def allScripts = NemerleWeb.NWebData.GetAllScriptNames().Map(script => {
  def mainScript = $<# <script src="NemerleWebResource/Unit/$script.js"></script> #>;
  def lambdasScript = $<# <script src="NemerleWebResource/Lambdas/$script.js"></script> #>;
  def templatesScript = $<# <script src="NemerleWebResource/Templates/$script.js"></script> #>;
  
$<#$mainScript
$lambdasScript
$templatesScript#>  
});

def allScripts = string.Join("", allScripts);
def unitName = $(properName : string);
def paramList = List();
{..$serverParams}
def parms = string.Join(",", paramList);

$<#
<div id="nweb-start"></div>
$allScripts
<script>
$$(function() {
  nweb.go(new $unitName($parms));
});
</script>
#>
      ]>;
      res
      | _ => <[]>
      }      
    }
  }
}
