using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using System;
using System.Collections.Generic;
using System.Linq;

namespace NemerleWeb
{
  macro nweb_macro(expr) 
  syntax("nweb", expr)
  {
    def ctx = Macros.ImplicitCTX();
    NwebImpl.TransformNweb(expr, ctx);
  }
    
  public module NwebImpl
  {
    public TransformNweb(expr : PExpr, typer : Typer) : PExpr 
    {    
      CreateNemerleWebInitializer(typer);
      
      match(expr)
      {
      | <[ $_unitName() ]> with parms = []
      | <[ $_unitName(..$parms) ]> =>             
        def typedParms = parms.Map(typer.TypeExpr);
        def signature = JsAstHelper.MethodSignature(typedParms);
        
        def properName = JsClass.GetProperName(typer.TypeExpr(expr).Type.TypeInfo);        
        def serverParams = parms.Select(p => <[ paramList.Add("nweb.utils.toTypedObject(" + NWebUtils.ToJson($p) + ")") ]>);
        
        def res = <[
          NemerleWebInitializer.Initialize();
          def allScripts = NemerleWeb.NWebData.GetAllScriptNames().Select(script =>
          {
            def mainScript = $<# <script type="text/javascript" src="/NemerleWebResource/Unit/$script.js"></script> #>;
            def lambdasScript = 
              if(!string.IsNullOrEmpty(NWebData.GetLambdasScript(script)))
                $<# <script type="text/javascript" src="/NemerleWebResource/Lambdas/$script.js"></script> #>;
              else
                "";  

            $<#$mainScript
$lambdasScript#>  
          });
    
        def templates = NWebData.GetAllScriptNames().Select(script => NWebData.GetTemplatesScripts(script));
        def allScripts = string.Join("", allScripts);
        def unitName = $(properName : string);
        def paramList = List();
        paramList.Add($signature);
        {..$(serverParams.NToList())}
        def callParms = string.Join(",", paramList);

$<#
<div id="nweb-start"></div>
$allScripts
..$(templates; "\n")
<script>
$$(function() {  
  nweb.go(new $unitName($callParms));
});
</script>
#>
      ]>;
      res
      | _ => Message.Error("Correct usage: nweb ClassName(arguments)"); <[ ]>
      }      
    }
    
    CreateNemerleWebInitializer(typer : Typer) : void
    {
      def env = typer.Manager.CoreEnv;
      def typeName = "NemerleWebInitializer";
      def assemblies = typer.Manager
                            .ReferencedAssemblies
                            .Map(a =>                             
                              <[ 
                                when(!loadedAssemblies.Contains($(a.Assembly.FullName : string))) 
                                  _ = System.Reflection.Assembly.Load($(a.Assembly.FullName : string)) 
                               ]>);
      when (env.LookupType([typeName]) is None())
      {  
        env.Define(<[ decl: 
          public module $(typeName : usesite)
          {
            _locker : object = object();
            mutable _isInitialized : bool;
            
            public Initialize() : void
            {   
              lock(_locker) 
              {
                when(!_isInitialized) 
                {
                
                  def loadedAssemblies = System.AppDomain
                                               .CurrentDomain
                                               .GetAssemblies()
                                               .Select(a => a.FullName)
                                               .ToList();                                             
                  {..$assemblies;}
                  _isInitialized = true;
                }
              }
            }
          }
        ]>).Compile();
      }
    }
  } 
}
