using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Macros;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Collections;
using Nemerle.Utility;
using Nemerle.Assertions;
using System.IO;
using System.Text.RegularExpressions;
using TSParser;
using NemerleWeb;

namespace NemerleWeb
{
  /// <summary>
  /// Parses d.ts files and creates an appropriate Nemerle types and variables.
  ///
  /// Macro parameters:
  ///   Namespace: Required argument, where all classes will be generated.
  ///   Lib (optional): Where lib.d.ts file exists.
  ///   Files:
  ///     First: Directory.
  ///     Second: Exclude (optional). Do not look for this files. Specified by regular expression.  
  /// Path is relative to the project directory.
  ///
  /// Example, assuming we have all files in TS directory:
  ///   [assembly: GenerateJSApi(
  ///     Namespace = "TypedJS"
  ///     Lib = @"TS\_infrastructure\1.0\lib.d.ts",
  ///     Files =
  ///     [
  ///       ("TS", @"TS\\_infrastructure\\"),
  ///       ("UserTSD")
  ///     ]
  ///   )]
  ///
  /// The convertion:
  /// All types are generated in the given namespace.
  /// The namespace and module with corresponding name are created.  
  /// This allows to have one 'using' for global JS functions and types.
  ///
  /// First all files are preparsed to resolve all referenced files.
  /// Then all files are parsed and code is generated.
  /// Types (classes, interfaces, modules) are generated before variables and functions.
  ///
  ///
  ///
  ///
  ///
  ///
  ///
  ///
  ///
  ///
  /// </summary>
  [Nemerle.MacroUsage(Nemerle.MacroPhase.BeforeInheritance, Nemerle.MacroTargets.Assembly)]
  macro GenerateTypedJS(params options : list[PExpr])
  {
    GenerateTypedJSImpl.Impl(ImplicitCTX(), options)
  }
  
  [Record]
  class DirectoryArg
  {    
    public Directory : string { get; }
    public Exclude : string { get; }
  }
  
  [Record]
  class GenerateArgs
  {
    public Root : string { get; }
    public Lib : string { get; }
    public Args : IEnumerable[DirectoryArg] { get; }
  }
  
  module GenerateTypedJSImpl
  {
    #region Implementation
    
    tsParser = TSDeclarationParser();
    
    CallMethodName : string = "Call";
    NewMethodName : string = "New";
    
    DefaultImplementation : PExpr = <[ { throw ClientCodeCalledInServerException(); } ]>;
    
    public Impl(typer : Typer, options : list[PExpr]) : void
    {
      DefineCTX(typer);
      
      def args = ParseArgs(options);
      
      // Add assembly level attribute
      Manager().Hierarchy.AddAssemblyAttribute(
        Manager().CoreEnv,
        <[ NemerleWeb.JSApiRootAttribute($(args.Root : string)) ]>);
        
      // HACK for supporting Array typing in TypeScript 0.8
      typer.Env.Define(<[ decl: type _element = object; ]>).Compile();
      
      // Step 1: PreParse
      def projectDir = Path.GetDirectoryName(typer.Manager.Options.ProjectPath);
      def tsFilesToParse = PreParseTSAll(projectDir, args.Lib, args.Args);
      
      // Step 2: Parse
      def tsAsts = tsFilesToParse.SelectMany(ParseTS);
      
      // Step 3: Analyze
      def finalAst = AnalyzeTSAst(tsAsts);
      
      // Step 4: Generate
      GenerateCode(typer, args.Root, finalAst);
    }
    
    private ParseArgs(options : list[PExpr]) : GenerateArgs
    {
      match(options)
      {
      | [<[ Root = $(root : string) ]>, <[ Files = {..$files} ]> ] with lib = ""
      | [<[ Root = $(root : string) ]>, <[ Lib = $(lib : string) ]>, <[ Files = [..$files] ]>] =>
        // Convert PExpr sequence to regular type
        def filesArg = files.Select(
          f => match(f)
          {
          | <[ $(dir : string) ]> with exclude = ""
          | <[ ($(dir : string), $(exclude : string)) ]> => DirectoryArg(dir, exclude)
          | _ =>
            Message.Error("You must specify at most 2 arguments: directory and exclude pattern");
            null
          });
        GenerateArgs(root, lib, filesArg)
      | _ =>
        Message.Error("Specify Root, Files parameter and optional Lib");
        null
      }
    }
    
    #endregion
    
    #region PreParse
    
    private PreParseTSAll(projectDir : string, lib : string, args : IEnumerable[DirectoryArg]) : HashSet[string]
    {      
      def tsFilesToParse = HashSet();
      
      // Add lib if exists
      when(lib != "") _ = tsFilesToParse.Add(Path.Combine(projectDir, lib));
      
      // Resolve all references        
      foreach(arg in args)
      {
        def re = Regex(arg.Exclude);
        def isIncluded(s) { if (arg.Exclude == "") true else !re.IsMatch(s) }
      
        def fullDir = Path.Combine(projectDir, arg.Directory);          
        try
        {
          def tsFiles = Directory.EnumerateFiles(fullDir, "*.d.ts", SearchOption.AllDirectories);

          foreach(tsFile when isIncluded(tsFile) in tsFiles)
            PreParseTS(tsFile, tsFilesToParse);
        }
        catch
        {
          | _ => Message.Hint($"Directory \"$fullDir\" doesn't exist. Skipping.");
        }
      }
      
      tsFilesToParse
    } 
    
    private PreParseTS(tsFile : string, tsFilesToParse : HashSet[string]) : void
    {
      when (tsFilesToParse.Add(tsFile))
        match(tsParser.TryParse(File.ReadAllText(tsFile)))
        {
        | (pos, result) when pos == tsParser.ParsingSource.OriginalText.Length =>
          // Add file
          _ = tsFilesToParse.Add(tsFile);
        
          // Check all references
          foreach(TSGlobal.ReferencePath(path) in result)
          {
            def reference = Path.GetFullPath(Path.Combine(Path.GetDirectoryName(tsFile), path));
            _ = tsFilesToParse.Add(reference);
          
            PreParseTS(reference, tsFilesToParse);
          }
        | (pos, _) =>
          // TODO: Add locations to parser and print here correct location in the file.
          def text = tsParser.ParsingSource.OriginalText;
          Message.Error(Location(tsFile, 0, 0, 0, 0), $"Failed to parse $tsFile, somewhere here: $(text.Substring(pos, 55))...");
        }
    }
    
    #endregion
    
    #region Parse
    
    private ParseTS(tsFile : string) : IEnumerable[TSGlobal]
    {
      match(tsParser.TryParse(File.ReadAllText(tsFile)))
      {
      | (pos, result) when pos == tsParser.ParsingSource.OriginalText.Length =>
        result
      | (pos, _) =>
        // TODO: Add locations to parser and print here correct location in the file.
        def text = tsParser.ParsingSource.OriginalText;
        Message.Error(Location(tsFile, 0, 0, 0, 0), $"Failed to parse $tsFile, somewhere here: $(text.Substring(pos, 55))...");
        null
      }
    }
    
    #endregion
    
    #region Analyze
    
    /// <summary>
    /// Take all elements and remove duplicates
    /// </summary>
    private AnalyzeTSAst(tsAsts : IEnumerable[TSGlobal]) : IEnumerable[TSGlobal]
    {
      def filter(ast)
      {
        | TSGlobal.Variable 
        | TSGlobal.Construct
        | TSGlobal.Function
        | TSGlobal.Class 
        | TSGlobal.Interface
        | TSGlobal.Module
        | TSGlobal.Enum => true
        | TSGlobal.Import 
        | TSGlobal.Export
        | _ => false
      }
      def group(ast)
      {
        def name =
          match(ast)
          {
          | TSGlobal.Variable  as v => v.Name
          | TSGlobal.Construct      => ""
          | TSGlobal.Function  as f => f.Name ?? ""
          | TSGlobal.Class     as c => c.Name
          | TSGlobal.Interface as i => i.Name
          | TSGlobal.Module    as m => m.Name
          | TSGlobal.Enum      as e => e.Name
          | _ => throw Exception(); ""
          };
        // Group by type and name
        (ast.GetType(), name)
      }
      def select(typeAndNameGroup)
      {
        def type = typeAndNameGroup.Key[0];
        
        if(type.Equals(typeof(TSGlobal.Variable)))
        {
          // Return first variable and skip other
          [typeAndNameGroup.First()]
        }
        else
        if(type.Equals(typeof(TSGlobal.Function)))
        {
          [typeAndNameGroup.First()]
        }
        else
        {
          [typeAndNameGroup.First()]
        }
      }
      
      tsAsts.Where(filter).GroupBy(group).SelectMany(select)
    }
    
    #endregion
    
    #region Generate
    
    GenerateCode(typer : Typer, root : string, tsAst : IEnumerable[TSGlobal]) : void
    {
      def jsApiNamespace = typer.Env.EnterIntoNamespace(root.SplitDot());
      def jsApiModule = CreateModule(root.SplitDot(), Scope(typer.Env), []);
      
      GenerateGlobalElements(Scope(jsApiNamespace), jsApiModule, tsAst);
      
      jsApiModule.Compile();
    }
    
    private GenerateGlobalElements(
      typesScope : Scope,
      othersScope : TypeBuilder,
      members : IEnumerable[TSGlobal]) : void
    {
      // Generate members
      foreach(mem in members) 
      {
      | Interface as i => CreateTSGlobalInterface(i, typesScope)
      | Class     as c => CreateTSGlobalClass    (c, typesScope)
      | Enum      as e => CreateTSGlobalEnum     (e, typesScope)
      | Import    as i => CreateTSGlobalImport   (i, typesScope)
      | Export    as e => CreateTSGlobalExport   (e, typesScope)
      | Module    as m => CreateTSGlobalModule   (m, typesScope)
      | _ => ()
      }
      
      foreach(mem in members)
      {
      | Variable  as v => CreateTSGlobalVariable (v, othersScope, typesScope)
      | Function  as f => CreateTSGlobalFunction (f, othersScope, typesScope)
      | Construct as c => CreateTSGlobalConstruct(c, typesScope)
      | _ => ()
      }
    }
    
 
    private CreateTSGlobalVariable(var : TSGlobal.Variable, othersScope : TypeBuilder, typesScope : Scope) : void
    {
      def typePrefix = $"$(var.Name)_Variable";
      def varType = ConvertType(typePrefix, var.Type, typesScope);
      
      _ = othersScope.Define(<[ decl: public mutable $(var.Name : usesite) : $varType; ]>);
    }
  
    /// <summary>
    /// Creates function in module.
    /// Global function can be without a name.
    /// </summary>
    private CreateTSGlobalFunction(function : TSGlobal.Function, othersScope : TypeBuilder, typesScope : Scope) : void
    {
      def typePrefix = $"$(function.Name)_Return";
      def returnType = ConvertType(typePrefix, function.ReturnType, typesScope);
        
      def functionParams = ConvertParameters(function.Name, function.Params, typesScope);
        
      _ = othersScope.Define(<[ decl: 
        $(function.Name : usesite)(..$functionParams) : $returnType
          $DefaultImplementation
      ]>);   
    }
    
    private CreateTSGlobalInterface(tsInterface : TSGlobal.Interface, typesScope : Scope) : void
    {
      def interfaceType =
        if (tsInterface.Extends is [])
          typesScope.Define(
            <[ decl: 
              public interface $(tsInterface.Name : usesite) {}
            ]>)
        else
        {
          def extends = tsInterface.Extends.Select(e => <[ $(e : usesite) ]>);
          typesScope.Define(
            <[ decl:
              public interface $(tsInterface.Name : usesite) : ..$extends {}
            ]>)
        };
        
      foreach(member in tsInterface.Type.Members)
      {
       | Call(parms, returnType) =>
        def fullPrefix = $"$(tsInterface.Name)_Call";
        def returnTypePrefix = $"$(fullPrefix)_Return";
        def realReturnType = ConvertType(returnTypePrefix, returnType, typesScope);
        
        def functionParams = ConvertParameters(fullPrefix, parms, typesScope);
       
        _ = interfaceType.DefineWithSource(
          <[ decl:
            $(CallMethodName : usesite)(..$functionParams) : $realReturnType;
          ]>);
      | Construct(parms, type) =>
        // Since Nemerle doesn't support creating different type using constructor.
        // Unlike JavaScript where function can return anything.
        // We use special method 'New' for miming this.
        def fullPrefix = $"$(tsInterface.Name)_New";
        def typePrefix = $"$(fullPrefix)_Return";
        def realType = ConvertType(typePrefix, type, typesScope);
        
        def functionParams = ConvertParameters(fullPrefix, parms, typesScope);
          
        _ = interfaceType.DefineWithSource(
          <[ decl:
            $(NewMethodName : usesite)(..$functionParams) : $realType;
          ]>);
      | Index(paramName, paramType, returnType) =>
        def (realParamType, typeName) =
          match(paramType)
          {
          | Number => (<[ float ]>, "Number")
          | String => (<[ string ]>, "String")
          };
        
        def fullPrefix = $"$(tsInterface.Name)_$(typeName)_Index";
        def returnTypePrefix = $"$(fullPrefix)_Return";
        def realReturnType = ConvertType(returnTypePrefix, returnType, typesScope);
        
          _ = interfaceType.DefineWithSource(
          <[ decl:
            Item[$(paramName : usesite) : $realParamType] : $realReturnType
            {
              get;
              set;
            }
          ]>);
        
      | Property(name, _optional, type) =>
        // Don't pay attention to optional, always generate property
        def fullPrefix = $"$(tsInterface.Name)_$(name)";
        def typePrefix = $"$(fullPrefix)_Property";
        def propertyType = ConvertType(typePrefix, type, typesScope);
        
        _ = interfaceType.DefineWithSource(<[ decl: $(name : usesite) : $propertyType { get; set; }; ]>);
        
      | Function(name, _optional, parms, returnType) =>
        // Don't pay attention to optional, always generate property
        def fullPrefix = $"$(tsInterface.Name)_$(name)";
        def returnTypePrefix = $"$(fullPrefix)_Return";
        def realReturnType = ConvertType(returnTypePrefix, returnType, typesScope);
        
        def functionParams = ConvertParameters(fullPrefix, parms, typesScope);
        
        _ = interfaceType.DefineWithSource(<[ decl: $(name : usesite)(..$functionParams) : $realReturnType; ]>);
      }
        
      interfaceType.Compile();
    }
  
    private CreateTSGlobalClass(tsClass : TSGlobal.Class, typesScope : Scope) : void
    {
      def classType = 
        match((tsClass.Extends, tsClass.Implements))
        {
        | (None, []) =>
          typesScope.Define(<[ decl: [JSApi] public class $(tsClass.Name : usesite) {} ]>)
        | _ =>
          def extends = if (tsClass.Extends is Some(ex)) [<[ $(ex : usesite) ]>] else [];
          def implement = tsClass.Implements.Select(e => <[ $(e : usesite) ]>);
          def inherit = extends.Concat(implement);
          
          typesScope.Define(
            <[ decl:
              [JSApi] public class $(tsClass.Name : usesite) : ..$inherit {}
            ]>)
        };
      
      foreach(member in tsClass.Members)
      {
      | Constructor(parms) =>
        def fullPrefix = $"$(tsClass.Name)_Constructor";
        def functionParams = ConvertParameters(fullPrefix, parms, typesScope);
        
        _ = classType.DefineWithSource(
          <[ decl:
            public this(..$functionParams)
              $DefaultImplementation
          ]>);
      
      | Member(part, isStatic, _access) =>
        // Access is ignored.      
        // Generate private as public ones.
        match(part)
        {
        | Variable(name, type) =>
          def fullPrefix = $"$(tsClass.Name)_$(name)";
          def typePrefix = $"$(fullPrefix)_Variable";
          def variableType = ConvertType(typePrefix, type, typesScope);
          
          if(isStatic is Some(true))
            _ = classType.DefineWithSource(
              <[ decl: public static mutable $(name : usesite) : $variableType; ]>);
          else
            _ = classType.DefineWithSource(
              <[ decl: public mutable $(name : usesite) : $variableType; ]>);
          
        | Method(name, _optional, parms, returnType) =>
          // Don't pay attention to optional, always generate property
          def fullPrefix = $"$(tsClass.Name)_$(name)";
          def returnTypePrefix = $"$(fullPrefix)_Return";
          def realReturnType = ConvertType(returnTypePrefix, returnType, typesScope);
            
          def functionParams = ConvertParameters(fullPrefix, parms, typesScope);
          
          if(isStatic is Some(true))
            _ = classType.DefineWithSource(
              <[ decl: 
                public static $(name : usesite)(..$functionParams) : $realReturnType
                  $DefaultImplementation
              ]>);
          else
            _ = classType.DefineWithSource(
              <[ decl: 
                public $(name : usesite)(..$functionParams) : $realReturnType
                  $DefaultImplementation
              ]>);
        }
      }
        
      classType.Compile();
    }
  
    private CreateTSGlobalConstruct(_c : TSGlobal.Construct, _typesScope : Scope) : void
    {
      Message.Hint("TSGlobal.Construct is not supported");
    }
    
    private CreateTSGlobalEnum(tsEnum : TSGlobal.Enum, typesScope : Scope) : void
    {
      def type = <[ decl: public enum $(tsEnum.Name : usesite) { } ]>;
      typesScope.Define(type).Compile();
    }
  
    private CreateTSGlobalImport(_i : TSGlobal.Import, _typesScope : Scope) : void
    {
      Message.Hint("TSGlobal.Import is not supported");
    }
  
    private CreateTSGlobalExport(_e : TSGlobal.Export, _typesScope : Scope) : void
    {
      Message.Hint("TSGlobal.Export is not supported");
    }
  
    private CreateTSGlobalModule(tsModule : TSGlobal.Module, typesScope : Scope) : void
    {
      def moduleName = tsModule.Name.Replace('/', '.').Replace('\\', '.');

      // Create modules by splitting '.'
      def moduleType = CreateModule(moduleName.SplitDot(), typesScope, tsModule.Members);
      moduleType.Compile()
    }
    
    #endregion

    #region Helpers
    
    /// <summary>
    /// Return parameter types
    /// </summary>
    private GetParamsType(prefix : string, parms : list[TSParam], typesScope : Scope) : list[PExpr]
    {
      def makePrefix(name)
      {
        $"$(prefix)_$(name)_Parameter"
      }
      def convertParamsType(p : TSParam)
      {
        | Required(name, type, _access)
        | Option(name, _, type, _access) => ConvertType(makePrefix(name), type, typesScope)
        | Rest(name, type) => ConvertType(makePrefix(name), type, typesScope)
      }
    
      def ret = parms.Map(convertParamsType);
      ret
    }

    /// <summary>
    /// Convert function parameters
    /// </summary>
    private ConvertParameters(prefix : string, parms : IEnumerable[TSParam], typesScope : Scope) : IEnumerable[PParameter]
    {
      def makePrefix(name)
      {
        $"$(prefix)_$(name)_Parameter"
      }
      def convertParamsType(p : TSParam)
      {
        | Required(name, type, _access)
        | Option(name, _optional, type, _access) =>
          def realType = ConvertType(makePrefix(name), type, typesScope);
          <[ parameter: $(name : usesite) : $realType ]>          
        | Rest(name, type) =>
          def realType = ConvertType(makePrefix(name), type, typesScope);
          <[ parameter: params $(name : usesite) : $realType ]>
      }
    
      def ret = parms.Select(convertParamsType);
      ret
    }
    
    private CreateAnonymousType(prefix : string, members : list[TSObject], typesScope : Scope) : PExpr
    {
      def className = $"$(prefix)_AnonymousType";
      def anonClass = typesScope.Define(<[ decl:
        [JSApi] public sealed class $(className : usesite) { }
      ]>);
      
      // Add members
      foreach(member in members)
      {
      | Call(parms, returnType) =>
        def fullPrefix = $"$(className)_Call";
        def returnTypePrefix = $"$(fullPrefix)_Return";
        def realReturnType = ConvertType(returnTypePrefix, returnType, typesScope);

        def functionParams = ConvertParameters(fullPrefix, parms, typesScope);
        
        _ = anonClass.DefineWithSource(
          <[ decl:
            public $(CallMethodName : usesite)(..$functionParams) : $realReturnType
              $DefaultImplementation
          ]>);
      | Construct(parms, type) =>
        // Since Nemerle doesn't support creating different type using constructor.
        // Unlike JavaScript where function can return anything.
        // We use special method 'New' for miming this.
        def fullPrefix = $"$(className)_New";
        def typePrefix = $"$(fullPrefix)_Return";
        def realType = ConvertType(typePrefix, type, typesScope);
        
        def functionParams = ConvertParameters(fullPrefix, parms, typesScope);
          
        _ = anonClass.DefineWithSource(
          <[ decl:
            public $(NewMethodName : usesite)(..$functionParams) : $realType
              $DefaultImplementation
          ]>);
      | Index(paramName, paramType, returnType) =>
        def (realParamType, typeName) =
          match(paramType)
          {
          | Number => (<[ float ]>, "Number")
          | String => (<[ string ]>, "String")
          };
        
        def fullPrefix = $"$(className)_$(typeName)_Index";
        def returnTypePrefix = $"$(fullPrefix)_Return";
        def realReturnType = ConvertType(returnTypePrefix, returnType, typesScope);
        
        _ = anonClass.DefineWithSource(
          <[ decl:
            public Item[$(paramName : usesite) : $realParamType] : $realReturnType
            {
              get
                $DefaultImplementation;
              set
                $DefaultImplementation;
            }
          ]>);
      
      | Property(name, _optional, type)  =>
        // Don't pay attention to optional, always generate property
        def fullPrefix = $"$(className)_$(name)";
        def typePrefix = $"$(fullPrefix)_Property";
        def propertyType = ConvertType(typePrefix, type, typesScope);
        
        _ = anonClass.DefineWithSource(<[ decl: public mutable $(name : usesite) : $propertyType; ]>);
      
      | Function(name, _optional, parms, returnType) =>
        // Don't pay attention to optional, always generate property
        def fullPrefix = $"$(className)_$(name)";
        def returnTypePrefix = $"$(fullPrefix)_Return";
        def realReturnType = ConvertType(returnTypePrefix, returnType, typesScope);
        
        def functionParams = ConvertParameters(fullPrefix, parms, typesScope);
        
        _ = anonClass.DefineWithSource(
          <[ decl: 
            $(name : usesite)(..$functionParams) : $realReturnType
              $DefaultImplementation
          ]>);
      }
      
      // Finalize
      anonClass.Compile();
      <[ $(anonClass.Name : usesite) ]>
    }
  
    private ConvertType(prefix : string, inputType : option[TSType], typesScope : Scope) : PExpr
    {
      match(inputType)
      {
      | Some(type) => ConvertType(prefix, type, typesScope)
      | None => <[ object ]>
      }
    }
  
    private ConvertType(prefix : string, inputType : TSType, typesScope : Scope) : PExpr
    {
      match(inputType)
      {
      | Array(type, 0) => <[ $(ConvertType(prefix, type, typesScope)) ]>
      | Array(type, arity) => <[ array[$(ConvertType(prefix, TSType.Array(type, arity - 1), typesScope))] ]>
      | Bool => <[ bool ]>   
      | Lambda(parms, ret) =>
        mutable lambdaParams = GetParamsType(prefix, parms, typesScope);
        def type =
          if(ret is TSType.Void())
            <[ System.Action ]>
          else
          {
            lambdaParams = lambdaParams.Concat([ConvertType(prefix, ret, typesScope)]);
            <[ System.Func ]>
          };
        
        <[ $type.[..$lambdaParams] ]>
      | Named(name) => 
        // We must use fully qualified name, otherwise Nemerle compiler cannot find the type
        def fullName = $"$(typesScope.FullName).$name";
        <[ $(fullName : usesite) ]>
      | New(parms, returnType) =>
        CreateAnonymousType(prefix, [TSObject.Construct(parms, Some(returnType))], typesScope)
      | Number => <[ float ]>
      | Object(members) => CreateAnonymousType(prefix, members, typesScope)
      | String => <[ string ]>
      | Void => <[ void ]>
      | Any => <[ object ]>
      }
    }
    
    /// <summary>
    /// This method is needed because of bug in Nemerle compiler which cannot choose nearest symbol.
    /// To workaround this behaviour we always specify fully qualified name.    
    ///
    /// module A
    /// {
    ///    class X{}
    ///    module B
    ///    {
    ///       class X{}
    ///       class Q
    ///       {
    ///           x : X; // Ambibguity
    ///       }
    ///    }
    /// }
    /// </summary>
    //private GetFullyQualifiedName(name : string, typesScope : Scope) : string
    //{
    //  def lookupType(name, node)
    //  {
    //    match(node.LookupType(name.SplitDot(), 0))
    //    {
    //    | Some(t) => t.FullName
    //    | _ =>
    //      if(node.GetDisplayName() == "JSApi")
    //        name
    //      else
    //        lookupType(name, node.Parent)
    //    }
    //  }
    //  
    //  lookupType(name, typesScope.CurrentNamespace);
    //}
    
    private CreateModule(parts : list[string], outer : Scope, members : list[TSGlobal]) : TypeBuilder
    {
      match (parts)
      {
      | [] => 
        if(outer.TypeBuilder != null) outer.TypeBuilder 
        else
        {
          Message.Error("List must not be empty");
          null
        }
      | [hd] =>
        // One part means we generate members
        def moduleType = outer.Define(<[ decl: [JSApi] public module $(hd : usesite) {} ]>);
        //moduleType.Compile();
          
        // Define members
        GenerateGlobalElements(Scope(moduleType), moduleType, members);
        moduleType
      
      | hd :: tl =>
        // If module consist from more than one part, first create all needed parts,
        // and then generate all members      
        def innerModule = outer.Define(<[ decl: [JSApi] public module $(hd : usesite) {} ]>);
        def t = CreateModule(tl, Scope(innerModule), []);
        innerModule.Compile();
        t
      }
    }
    
    
    #endregion
  }
  
  internal module TypedJSStringExtensions
  {
    public SplitDot(this s : string) : list[string]
    {
      s.Split('.').NToList()
    }
  }
}
