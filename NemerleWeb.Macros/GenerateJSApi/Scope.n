using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Assertions;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using System;
using System.Collections.Generic;
using System.Linq;

namespace NemerleWeb
{
  /// <summary>
  /// Wraps GlobalEnv or TypeBuilder for type creation
  /// </summary>
  internal sealed class Scope
  {
    public GlobalEnv : GlobalEnv { get; }
    public TypeBuilder : TypeBuilder { get; }
    
    public this([NotNull] globalEnv : GlobalEnv)
    {
      GlobalEnv = globalEnv;
    }
    
    public this([NotNull] typeBuilder : TypeBuilder)
    {
      TypeBuilder = typeBuilder;
    }
    
    public Define(typeDeclaration : ClassMember.TypeDeclaration) : TypeBuilder
    {
      if(GlobalEnv != null) GlobalEnv.Define(typeDeclaration)
      else                  TypeBuilder.DefineNestedType(typeDeclaration)
    }
    
    public FullNameParts : list[string]
    {
      [Memoize]
      get
      {
        if(GlobalEnv != null) GlobalEnv.CurrentNamespace.FullName
        else                  TypeBuilder.FullName.SplitDot()
      }
    }
    
    public LookupType(qid : string) : option[PExpr]
    {
      if(IsTypeExist(qid))
        Some(FromQualifiedIdentifier(qid))
      else
        None()
    }

    public FromQualifiedIdentifier(qid : string) : PExpr
    {
      PExpr.FromQualifiedIdentifier(Manager, qid)
    }
    
    private IsTypeExist(typeName : string) : bool
    {
      if(GlobalEnv != null)
        GlobalEnv.LookupType(typeName.SplitDot()).HasValue
      else
        TypeBuilder.Manager.NameTree.LookupExactType(typeName.SplitDot()).HasValue
    }
    
    private Manager : ManagerClass
    {
      get
      {
        if(GlobalEnv != null) GlobalEnv.Manager
        else                  TypeBuilder.Manager
      }
    }
  }
}
