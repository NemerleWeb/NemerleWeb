using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace NemerleWeb
{
  macro JSCall(expr : PExpr)
  syntax("jscall", expr)
  {
    JSCallNewImpl.DoTransform(Macros.ImplicitCTX(), expr, JSApiSpecial.Call, "jscall")
  }
  
  macro JSNew(expr : PExpr)
  syntax("jsnew", expr)
  {
    JSCallNewImpl.DoTransform(Macros.ImplicitCTX(), expr, JSApiSpecial.New, "jsnew")
  }
   
  module JSCallNewImpl
  {
    public DoTransform(typer : Typer, expr : PExpr, jsMethodName : string, syntaxName : string) : PExpr
    {
      Macros.DefineCTX(typer);
      
      // A(..).B(..) => A.Method(..).B(..)
      // A(..) => A.Method(..)
      def impl(ex)
      {
      | <[ $obj.$method(..$args).$nextMethod(..$nextArgs) ]> =>
        def extractObj = impl(<[$obj.$method(..$args)]>);
        <[ $extractObj.$nextMethod(..$nextArgs) ]>
      
      | <[ $obj(..$args).$nextMethod(..$nextArgs) ]> =>
        def extractObj = impl(<[$obj(..$args)]>);
        <[ $extractObj.$nextMethod(..$nextArgs) ]>
        
      | <[ $obj.$method(..$args).$nextProp ]> =>
        def extractObj = impl(<[$obj.$method(..$args)]>);
        <[ $extractObj.$nextProp ]>
        
      | <[ $obj(..$args).$nextProp ]> =>
        def extractObj = impl(<[$obj(..$args)]>);
        <[ $extractObj.$nextProp ]>      
      
      | <[ $obj(..$args) ]> => <[ $obj.$(jsMethodName : usesite)(..$args) ]>
      
      | _ => Message.Error($"$ex is incorect expression. Use $syntaxName obj(args)"); <[ ]>
      }
      
      def ret = impl(expr);
      ret
    }
  }
}
