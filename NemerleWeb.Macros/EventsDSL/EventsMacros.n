using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using System.Text.RegularExpressions;

using System;
using System.Collections.Generic;
using System.Linq;

namespace NemerleWeb.Macros
{      
  macro HandleOnce(eventName, eventArgs, context : string, body)   
  syntax ("handle", eventName, eventArgs, context, "once", body) 
  {    
    HandleImpl.OnceImpl(eventName, eventArgs, context, body);
  }
  
  macro HandleUntil(eventName, eventArgs, context : string, untilEventName, body)   
  syntax ("handle", eventName, eventArgs, context, "until", untilEventName, body) 
  {    
    HandleImpl.UntilImpl(eventName, eventArgs, context, untilEventName, body);
  }
  
  macro Handle(eventName, eventArgs, context : string, body)   
  syntax ("handle", eventName, eventArgs, context, body) 
  {
    HandleImpl.Impl(eventName, eventArgs, context, body);
  }
  
  module HandleImpl
  {
    public Impl(eventName : PExpr, eventArgs : PExpr, context : string, body : PExpr, throttleDelay = 0 : int) : PExpr
    {      
      <[ 
        NemerleWeb.Events.Handle($(eventName.ToString() : string), $context, $eventArgs => {
          _ = $(GetBody(body, throttleDelay))
        });
      ]>
    }
    
    public UntilImpl(eventName : PExpr, eventArgs : PExpr, context : string, untilEventName : PExpr, body : PExpr, throttleDelay = 0 : int) : PExpr
    {
      <[ 
        NemerleWeb.Events.HandleUntil($(eventName.ToString() : string), $context, $(untilEventName.ToString() : string), $eventArgs => {
          _ = $(GetBody(body, throttleDelay))
        });
      ]>
    }
    
    public OnceImpl(eventName : PExpr, eventArgs : PExpr, context : string, body : PExpr) : PExpr
    {
      <[ 
        NemerleWeb.Events.HandleOnce($(eventName.ToString() : string), $context, $eventArgs => {
          _ = $(GetBody(body, 0))
        });
      ]>
    }
    
    private GetBody(body : PExpr, throttleDelay = 0 : int) : PExpr
    {
      if(throttleDelay > 0) 
        <[
          NemerleWeb.JSApi.setTimeout(() => {
            $body;
            NemerleWeb.Events.Invalidate();
          }, $throttleDelay);
        ]>
      else
        <[
          $body;
          NemerleWeb.Events.Invalidate();
        ]>
    }
  }
}
