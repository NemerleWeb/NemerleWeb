using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using System.Text.RegularExpressions;

using System;
using System.Collections.Generic;
using System.Linq;

namespace NemerleWeb
{
  macro HandleUntil(eventName, eventArgs, untilEventName, body)   
  syntax ("handle", eventName, eventArgs, "until", untilEventName, body) 
  {    
    HandleImpl.UntilImpl(eventName, eventArgs, untilEventName, body, Macros.ImplicitCTX());
  }
  
  macro HandleOnce(eventName, eventArgs, body)   
  syntax ("handle", eventName, eventArgs, "once", body) 
  {    
    HandleImpl.OnceImpl(eventName, eventArgs, body, Macros.ImplicitCTX());
  }
  
  macro Handle(eventName, eventArgs, body)   
  syntax ("handle", eventName, eventArgs, body) 
  {
    HandleImpl.Impl(eventName, eventArgs, body, Macros.ImplicitCTX());
  }
      
  module HandleImpl
  {
    public Impl(eventName : PExpr, eventArgs : PExpr, body : PExpr, typer : Typer) : PExpr
    {
      def updateUi = GetUpdateExpr(typer);
      <[ 
        NemerleWeb.Events.Handle($(eventName.ToString() : string), $eventArgs => {
          $body;
          $updateUi
        });
      ]>
    }
    
    public UntilImpl(eventName : PExpr, eventArgs : PExpr, untilEventName : PExpr, body : PExpr, typer : Typer) : PExpr
    {
      def updateUi = GetUpdateExpr(typer);
      <[ 
        NemerleWeb.Events.HandleUntil($(eventName.ToString() : string), $(untilEventName.ToString() : string), $eventArgs => {
          $body;
          $updateUi
        });
      ]>
    }
    
    public OnceImpl(eventName : PExpr, eventArgs : PExpr, body : PExpr, typer : Typer) : PExpr
    {
      def updateUi = GetUpdateExpr(typer);
      <[ 
        NemerleWeb.Events.HandleOnce($(eventName.ToString() : string), $eventArgs => {
          $body;
          $updateUi
        });
      ]>
    }
    
    private GetUpdateExpr(typer : Typer) : PExpr
    {
      <[ NemerleWeb.Events.Invalidate() ]>
    }
  }
}
