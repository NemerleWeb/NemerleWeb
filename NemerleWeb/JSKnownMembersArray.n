using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;

using System;
using System.Collections.Generic;
using System.Linq;

namespace NemerleWeb
{
  module JSKnownMembersArray
  {    
    public Register() : void
    {
      JSKnownMembers.RegisterType(typeof(Array), Handler);
    }
  
    public Handler(left : JSAst, member : IMember, parms : list[JSAst]) : option[JSAst]
    {
      (if (left is JSAst.StaticMethodRef) StaticHandler else InstanceHandler)(left, member, parms)
    }
    
    private InstanceHandler(left : JSAst, member : IMember, parms : list[JSAst]) : option[JSAst]
    { 
      match (parms)
      {
      | [] =>
        match (member.Name)
        {
        | "get_Length" => Some(JSAst.FieldRef(left, "length"))
        | "get_LongLength" => Some(JSAst.FieldRef(left, "length"))
        | _ => None()
        }
        
      | [_] =>
        match (member.Name)
        {    
        | _ => None()
        }
        
      | _ => None()
      }
    }
     
    private StaticHandler(_left : JSAst, member : IMember, parms : list[JSAst]) : option[JSAst]
    {
      match (parms)
      {
      | [arg1, arg2] =>
        match (member.Name)
        {
        // TODO: Implement real binary search
        | "BinarySearch" => Some(arg1.JSMethodCall("indexOf", [arg2]))
        | _ => None()
        }
      | _ => None()
      }
    }
  }
}
