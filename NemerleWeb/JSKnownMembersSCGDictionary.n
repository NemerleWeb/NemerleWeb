using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Typedtree;

using System;
using System.Collections.Generic;
using System.Linq;

namespace NemerleWeb
{
  module JsKnownMembersSCGDictionary
  {
    public Register() : void
    {
      JsKnownMembers.RegisterType(typeof(System.Collections.Generic.Dictionary[_, _]), Handler); 
    }
    
    internal Handler(left : JsAst, member : IMember, parms : list[JsAst]) : option[JsAst]
    {
      (if (left is JsAst.StaticMethodRef) StaticHandler else InstanceHandler)(left, member, parms)
    }
    
    private InstanceHandler(left : JsAst, member : IMember, parms : list[JsAst]) : option[JsAst]
    {
      match (parms)
      {
      | [] =>
        match (member.Name)
        {
        | "get_Count" => Some("Object".JsStaticCall("keys", [left]).Field("length"))
        | "get_Keys" => Some("Object".JsStaticCall("keys", [left]))
        | "Clear" => Some(JsAst.Assign(left, JsAst.Object([])))
        | "GetEnumerator" => Some(left.JsMethodCall(member.Name, parms))
        | _ => None()
        }
      | [arg] =>
        match (member.Name)
        {
        | "get_Item" => Some(JsAst.ArrayIndexer(left, arg))
        | "ContainsKey" => Some(left.JsMethodCall("hasOwnProperty", parms))
        | "Remove" => Some(JsAst.Delete(JsAst.ArrayIndexer(left, arg)))
        | _ => None()
        }
      | [arg1, arg2] =>
        match (member.Name)
        {
        | "set_Item" => Some(JsAst.Assign(JsAst.ArrayIndexer(left, arg1), arg2))
        | "Add" => Some(JsAst.Assign(JsAst.ArrayIndexer(left, arg1), arg2))
        | _ => None()
        }              
      | _ => None()
      }
    }
     
    private StaticHandler(_left : JsAst, member : IMember, parms : list[JsAst]) : option[JsAst]
    {
      match (parms)
      {
      | [] =>
        match (member.Name)
        {
        | ".ctor" => Some(JsAst.Object([]))
        | _ => None()
        }
      | _ => None()
      }
    }
  }
}
