using Nemerle;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Extensions;
using NemerleWeb;

using System;
using System.Text;
using System.IO;
using System.Reflection;
using System.Diagnostics;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Security.Cryptography;

namespace NemerleWeb
{
  public module NWebData
  {
    public Scripts : List[string] = List();
    public Templates = Dictionary.[string, List[(string * string)]]();   
    public CombinedScriptsFilename : string;
    public ResourcesFilename : string;
    
    public TypesToScriptFilenames = Dictionary.[string, string]();
    public StaticFieldsInitializers = Dictionary.[string, string]();
    public DependencyMap = Dictionary.[string, HashSet[string]]();
    
    this() 
    {
      def readResource(name, assembly) {        
        using (def stream = assembly.GetManifestResourceStream(name))
        using (def reader = StreamReader(stream))       
            reader.ReadToEnd();        
      }
      def datas = AppDomain.CurrentDomain
                           .GetAssemblies()
                           .SelectMany(a => a.GetTypes()
                           .Where(t => t.Name.EndsWith("NWebDataPerAssembly")));
                           
      //def staticFields = StringBuilder();
      def combinedScripts = StringBuilder();
      
      def getRelativePath(filename = "")
      {
        if(filename != "") Path.Combine("Scripts", "NemerleWeb", filename)
        else Path.Combine("Scripts", "NemerleWeb")
      }
      
      def getAbsolutePath(filename = "") 
      {
        Path.Combine(AppDomain.CurrentDomain.BaseDirectory, getRelativePath(filename))
      }
      
      def parseAndAddTypeDependencies(assembly) 
      {
        def typeDependencies = readResource("dependencies.dat", assembly).Split(array[Environment.NewLine], StringSplitOptions.None);
        def dependencyGroups = typeDependencies.Select(line => line.Split(','))
                                               .Where(split => split.Any())
                                               .Select(split => new ( key = split[0], values = split.Skip(1)));
        foreach(depGroup in dependencyGroups) 
        {
          mutable hashSet;
          def values = depGroup.values;
                    
          if(DependencyMap.TryGetValue(depGroup.key, out hashSet))
            foreach(dep in values) 
              _ = hashSet.Add(dep);
          else DependencyMap[depGroup.key] = HashSet(values);
        }
      }
      
      def scriptsDir = getAbsolutePath();
      
      when(!Directory.Exists(scriptsDir))
        _ = Directory.CreateDirectory(scriptsDir);

      foreach(f in Directory.GetFiles(getAbsolutePath()))
        File.Delete(f);
               
      foreach(dataType in datas)
      {
        def instance = Activator.CreateInstance(dataType, array[], array[]) :> NWebDataInstance;
        
        parseAndAddTypeDependencies(dataType.Assembly);
                                               
        foreach((typeName, f, _) in instance.Scripts) 
        {
          Scripts.Add(f);
          
          def filename = Path.GetFileName(f);
          def scriptContents = readResource(filename, dataType.Assembly);          
          
          File.WriteAllText(getAbsolutePath(filename), scriptContents);
          _ = combinedScripts.Append(scriptContents);
          
          TypesToScriptFilenames[typeName] = getRelativePath(filename);
        }
          
        foreach((typeName, id, path) in instance.Templates) 
        {
          when (!Templates.ContainsKey(typeName))
            Templates[typeName] = List();
            
          def filename = Path.GetFileName(path);
          def templateContents = readResource(filename, dataType.Assembly);
          
          Templates[typeName].Add(id, templateContents);
          
          File.WriteAllText(getAbsolutePath(filename), templateContents);
        }
        
        foreach((type, path) in instance.Fields) {
          def filename = Path.GetFileName(path);
          def templateContents = readResource(filename, dataType.Assembly);
          
          StaticFieldsInitializers[type] = path;
          
          File.WriteAllText(getAbsolutePath(filename), templateContents);
        }
      }
      
      def scripts =
      [
        "NemerleWeb.Scripts.json2.min.js",
        //"NemerleWeb.Scripts.jquery.signalR-1.2.0.min.js",
        "NemerleWeb.Scripts.linq.min.js",
        "NemerleWeb.Scripts.nweb.js",
      ];
              
      try
      {
        def sb = System.Text.StringBuilder();
        foreach(file in scripts)
        {
          using(stream = typeof(NemerleWeb.JSAst).Assembly.GetManifestResourceStream(file))
          {
            if(stream != null) 
            {
              using(reader = System.IO.StreamReader(stream))
              {
                _ = sb.Append(reader.ReadToEnd());
                _ = sb.AppendLine(";");
              }
            }
            else
            {
              def errorMessage = $"!!!ERROR!!! Cannot find $file!!!";
              _ = sb.Append($"\r\n// $errorMessage\r\nconsole.error($errorMessage);\r\n");
            }
          }     
          
          File.WriteAllText(getAbsolutePath("resource.js"), sb.ToString());          
        }
      }
      catch
      {
      | e => File.WriteAllText(getAbsolutePath("resource.js"), e.ToString());
      }
      
      ResourcesFilename = getRelativePath("resource.js");
    }
    
    private GetTypeDependencies(typePath : list[string]) : IEnumerable[string]
    {
      //This is to avoid recursive dependencies 
      def typeName = typePath.Head;
      
      mutable lst;
      if(DependencyMap.TryGetValue(typeName, out lst))
      {
        // Get all dependent types and reverse the result
        def types = lst
          .Concat(lst.Where(d => typePath.All(p => d != p))
          .SelectMany(d => GetTypeDependencies(d :: typePath)))
          .Reverse()
          .ToArray();
          
       // Create a list without duplicates preserving order
       def ret = List();
       def added = HashSet();
       foreach(t in types)
         when(!added.Contains(t))
         {
           _ = added.Add(t);
           ret.Add(t);
         }
          
        ret
      }
      else []
    }
    
    public GetScriptsForType(typeName : string) : IEnumerable[string]
    {
      def getTypeScriptFilenames(t) {
        mutable signalRScript;
        mutable fieldInitializers;
        
        def signal = TypesToScriptFilenames.TryGetValue(t + "_signalr", out signalRScript);
        def stat = StaticFieldsInitializers.TryGetValue(t, out fieldInitializers);
        
        match(signal, stat)
        {
        | (true, true) => [TypesToScriptFilenames[t], fieldInitializers, signalRScript]
        | (true, false) => [TypesToScriptFilenames[t], signalRScript]
        | (false, true) => [TypesToScriptFilenames[t], fieldInitializers]
        | _ => [TypesToScriptFilenames[t]]
        }
      }
      
      def typeScripts = getTypeScriptFilenames(typeName);
      def dependentTypes = GetTypeDependencies([typeName]);
      def dependentFileNames = dependentTypes.SelectMany(t => getTypeScriptFilenames(t));
      typeScripts.Concat(dependentFileNames)
                 .Select(fname => (fname, if(fname.Contains("_fields_")) 1 else 0))
                 .OrderBy((_, priority) => priority)
                 .Select(((fname, _), _) => 
      $<# <script type="text/javascript" src="/$(NormalizeUri(fname))"></script>$(Environment.NewLine)#>);
    }
    
    public GetScripts() : IEnumerable[string]
    {
      [$<#
<script type="text/javascript" src="/$(NormalizeUri(CombinedScriptsFilename))"></script> #>]      
    }
    
    public GetTemplatesForType(typeName : string) : IEnumerable[string]
    {
      def typeTemplates = Templates[typeName];
      def dependentTypes = GetTypeDependencies([typeName]);
      def dependentFileNames = dependentTypes.SelectMany(t => {
        mutable templates;
        if(Templates.TryGetValue(t, out templates)) templates
        else []
      });
        
      typeTemplates.Concat(dependentFileNames).Select(((id, content), _) => 
      $<#
<script type="text/html" id="$(id)">
$content
</script>#>);
    }
        
    public GetNemerleWebScripts() : string
    {
      $<#
<script type="text/javascript" src="/$(NormalizeUri(ResourcesFilename))"></script> #>
    }
    
    private NormalizeUri(s : string) : string
    {
      s.Replace("\\", "/")
    }
  }
  
  public class NWebDataInstance
  {
    public Scripts = List.[(string * string * int)]();
    public Templates = List.[(string * string * string)]();
    public Fields = List.[(string * string)]();    
    
    public AddScript(typeName : string, filename : string, ancestorCount : int) : void
    {
      Scripts.Add((typeName, filename, ancestorCount));
    }
    
    public AddFields(typeName : string, fields : string) : void
    {
      Fields.Add((typeName, fields));
    }
    
    public AddTemplate(typeName : string, id : string, filename : string) : void
    {
      Templates.Add((typeName, id, filename));
    }
  }
}