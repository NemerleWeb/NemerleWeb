using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Peg;
using NemerleWeb;

using System;
using System.Collections.Generic;
using System.Linq;

namespace TypeScriptInterface
{  
  [PegGrammar(Options = EmitDebugSources,
      start,
      grammar {
        newLine                     = "\r\n" / '\n' / '\r' / '\u2028' / '\u2029' / '\u0085';
        singleLineComment           = "//" (!('\n' / '\r') [Any])* newLine?;
        delimitedComment            = "/*" (!"*/" [Any])* "*/";
        comment                     = singleLineComment / delimitedComment;
        spaces : Void               = (' ' / '\t' / '\u000B' / '\u000C' / newLine / comment)*;
        letter                      = ([Lu, Ll, Lt, Lm, Lo, Nl] / '_' / '$');
        decimal_digit               = ['0'..'9'];
        hex_digit                   = ['0'..'9', 'A'..'F', 'a'..'f'];
        octal_digit                 = ['0'..'7'];

        SEMICOLON                   = ';' spaces;
        COLON                       = ':' spaces;
        DOT                         = '.' spaces;
        COMMA                       = ',' spaces;
        LPAREN                      = '(' spaces;
        RPAREN                      = ')' spaces;
        LBRACE                      = '[' spaces;
        RBRACE                      = ']' spaces;
        LFBRACE                     = '{' spaces;
        RFBRACE                     = '}' spaces;
        EQ                          = '=' spaces;
        QUEST                       = '?' spaces;
        
        identifierValue             = letter (letter / decimal_digit)*;
        identifier      : string    = identifierValue spaces;
        identifiers     : list[string] = identifier (COMMA identifiers)?;

        constructor : TypeScriptParameter     = "new" spaces LPAREN parms? RPAREN (COLON type)? SEMICOLON;
        dictionaryType : TypeScriptType       = LFBRACE LBRACE identifier COLON spaces type RBRACE COLON type SEMICOLON? RFBRACE;
        objectType : TypeScriptType           = LFBRACE parmsSemicolon? RFBRACE;
        arrayType : TypeScriptType            = nonArrayType (spaces "[" spaces "]")+;
        normalType : TypeScriptType           = identifier;
        lambdaType : TypeScriptType           = LPAREN parms? RPAREN "=>" spaces type;
        nonArrayType : TypeScriptType         = lambdaType / normalType / objectType / dictionaryType;
        type : TypeScriptType                 = arrayType / nonArrayType;
        nonOptionalParam : TypeScriptParameter          = identifier (COLON type)?;
        optionalParam : TypeScriptParameter             = identifier QUEST (COLON type)?;
        param : TypeScriptParameter                     = (constructor / optionalParam/ nonOptionalParam);
        multipleParam : TypeScriptParameter             = "..." param;
        parms : list[TypeScriptParameter]               = (param/multipleParam) (COMMA parms)?;
        parmsSemicolon : list[TypeScriptParameter]      = param (SEMICOLON parmsSemicolon)? SEMICOLON?;
        callDeclaration : TypeScriptMember              = LPAREN parms? RPAREN COLON type SEMICOLON;
        indexCallDeclaration : TypeScriptMember         = LBRACE parms? RBRACE COLON type SEMICOLON;
        methodDeclaration : TypeScriptMember            = identifier QUEST? LPAREN parms? RPAREN (COLON type)? SEMICOLON;
        propertyDeclaration : TypeScriptMember          = identifier QUEST? COLON type SEMICOLON;
        memberDeclaration : TypeScriptMember            = (propertyDeclaration / methodDeclaration / callDeclaration / indexCallDeclaration);
        interfaceBlock : list[TypeScriptMember]         = LFBRACE memberDeclaration* RFBRACE;
        // extends is reserved keyword in JS
        extends_ : list[string]                = "extends" spaces identifiers;
        _interface : TypeScriptGlobalDeclaration                = "interface" spaces identifier extends_? interfaceBlock;
        
        globalVarDeclaration : TypeScriptGlobalDeclaration = "declare" spaces "var" spaces identifier COLON interfaceBlock SEMICOLON?;
        globalVarDeclarationType : TypeScriptGlobalDeclaration = "declare" spaces "var" spaces identifier COLON type SEMICOLON?;
        globalFunctionDeclaration : TypeScriptGlobalDeclaration = "declare" spaces "function " methodDeclaration;
        
        start : list[TypeScriptGlobalDeclaration] = spaces (_interface / globalVarDeclaration / globalVarDeclarationType / globalFunctionDeclaration)*;
      }
    )]
  public class TypeScriptInterfaceParser
  {
    identifier(idValue : NToken) : string 
    {
      //System.Diagnostics.Debug.WriteLine("identifier: " + GetText(idValue));
      GetText(idValue)
    }
    
    constructor(_ : NToken, _ : NToken, lst : option[list[TypeScriptParameter]], _ : NToken, _ : option[(NToken * TypeScriptType)], _ : NToken) : TypeScriptParameter
    {
      TypeScriptParameter("ctor", TypeScriptType.Normal("void"), false, false)
    }
    
    identifiers(id : string, tail : option[NToken * list[string]]) : list[string] 
    {
      //System.Diagnostics.Debug.WriteLine("identifiers");
      match(tail) {
      | Some((_, tail)) => id :: tail
      | _ => [id]
      }
    }
    
    dictionaryType(_ : NToken, _ : NToken, _keyname : string, _ : NToken, key : TypeScriptType, _ : NToken, _ : NToken, value : TypeScriptType, _ : NToken, _ : NToken) : TypeScriptType
    {
      TypeScriptType.Dictionary(key, value)
    }
    
    objectType(_ : NToken, parms : option[list[TypeScriptParameter]], _ : NToken) : TypeScriptType
    {
      TypeScriptType.Object(if(parms is Some(parms)) parms else [])
    }
    
    arrayType(type : TypeScriptType, arity : List[NToken * NToken]) : TypeScriptType
    {
      TypeScriptType.Array(type, arity.Count)
    }

    normalType(name : string) : TypeScriptType
    {
      TypeScriptType.Normal(name)
    }

    lambdaType(_ : NToken, parms : option[list[TypeScriptParameter]], _ : NToken, _ : NToken, returnType : TypeScriptType) : TypeScriptType    
    {
      TypeScriptType.Lambda(parms, returnType)
    }
    
    nonOptionalParam(name : string, type : option[NToken * TypeScriptType]) : TypeScriptParameter
    {
      //System.Diagnostics.Debug.WriteLine("nonOptionalParm");
      TypeScriptParameter(name, getType(type), false, false)
    }
    
    optionalParam(name : string, _ : NToken, type : option[NToken * TypeScriptType]) : TypeScriptParameter
    {
      //System.Diagnostics.Debug.WriteLine("optionalParm");
      TypeScriptParameter(name, getType(type), true, false)
    }
    
    multipleParam(_ : NToken, parm : TypeScriptParameter) : TypeScriptParameter
    {
      TypeScriptParameter(parm.Name, parm.Type, parm.IsOptional, true)
    }
    
    parms(p : TypeScriptParameter, tail : option[(NToken * list[TypeScriptParameter])]) : list[TypeScriptParameter]
    {
      //System.Diagnostics.Debug.WriteLine("parms");
      match(tail)
      {
      | Some((_, tail)) => p :: tail
      | _ => [p]
      }
    }
    
    parmsSemicolon(p : TypeScriptParameter, tail : option[(NToken * list[TypeScriptParameter])], _ : NToken) : list[TypeScriptParameter]
    {
      match(tail)
      {
      | Some((_, tail)) => p :: tail
      | _ => [p]
      }
    }
    
    methodDeclaration(name : string, isNullable : NToken, _ : NToken, parms : option[list[TypeScriptParameter]], _ : NToken, type : option[(NToken * TypeScriptType)],  _ : NToken) : TypeScriptMember.Method
    {
      //System.Diagnostics.Debug.WriteLine("method");
      def type = if(type is Some((_, type))) type else null;
      TypeScriptMember.Method(name, GetText(isNullable) == "?", if(parms is Some(parms)) parms else [], type)
    }
    
    propertyDeclaration(name : string, isNullable : NToken, _ : NToken, type : TypeScriptType, _ : NToken) : TypeScriptMember.Property
    {
      //System.Diagnostics.Debug.WriteLine("prop");
      TypeScriptMember.Property(name, GetText(isNullable) == "?", type)
    }
    
    callDeclaration(_ : NToken, parms : option[list[TypeScriptParameter]], _ : NToken, _ : NToken, returnType : TypeScriptType, _ : NToken) : TypeScriptMember
    {
      TypeScriptMember.Call(parms, returnType)
    }

    indexCallDeclaration(_ : NToken, parms : option[list[TypeScriptParameter]], _ : NToken, _ : NToken, returnType : TypeScriptType, _ : NToken) : TypeScriptMember
    {
      TypeScriptMember.IndexCall(parms, returnType)
    }
    
    memberDeclaration(member : TypeScriptMember) : TypeScriptMember
    {
      //System.Diagnostics.Debug.WriteLine("decl");
      member
    }
    
    interfaceBlock(_ : NToken, declarations : List[TypeScriptMember], _ : NToken) : list[TypeScriptMember]
    {
      //System.Diagnostics.Debug.WriteLine("block");
      declarations.NToList()
    }
    
    extends_(_ : NToken, extendTypes : list[string]) : list[string]
    {
      //System.Diagnostics.Debug.WriteLine("extends");
      extendTypes
    }
    
    _interface(_ : NToken, name : string, extends_ : option[list[string]], members : list[TypeScriptMember]) : TypeScriptGlobalDeclaration
    {
      //System.Diagnostics.Debug.WriteLine("interface: " + name);
      TypeScriptGlobalDeclaration.Interface(name, extends_, members)
    }
    
    globalVarDeclaration(_ : NToken, _ : NToken, name : string, _ : NToken, members : list[TypeScriptMember], _ : NToken) : TypeScriptGlobalDeclaration
    {
      TypeScriptGlobalDeclaration.Var(name, members)
    }
    
    globalVarDeclarationType(_ : NToken, _ : NToken, name : string, _ : NToken, type : TypeScriptType, _ : NToken) : TypeScriptGlobalDeclaration
    {
      TypeScriptGlobalDeclaration.VarType(name, type)
    }
    
    globalFunctionDeclaration(_ : NToken, _ : NToken, method : TypeScriptMember) : TypeScriptGlobalDeclaration
    {
      TypeScriptGlobalDeclaration.Function(method :> TypeScriptMember.Method);
    }
    
    start(interfaces : List[TypeScriptGlobalDeclaration]) : list[TypeScriptGlobalDeclaration]
    {
      interfaces.NToList()
    }
    
    /// Return type if present or any.
    static getType(type : option[NToken * TypeScriptType]) : TypeScriptType
    {
      | Some((_, t)) => t
      | _ => TypeScriptType.Normal("any")
    }
  }
  
  public variant TypeScriptGlobalDeclaration
  {
    | Interface { Name : string; Extends : option[list[string]]; Members : list[TypeScriptMember] }
    | Var       { Name : string; Members : list[TypeScriptMember]; }
    | VarType   { Name : string; Type : TypeScriptType; }
    | Function  { Method : TypeScriptMember.Method  }
  }
    
  public variant TypeScriptMember : Located
  {
    | Property  { Name : string; IsNullable : bool; Type : TypeScriptType }
    | Method    { Name : string; IsNullable : bool; Parms : list[TypeScriptParameter]; Type : TypeScriptType }
    | Call      { Parms : option[list[TypeScriptParameter]]; ReturnType : TypeScriptType }
    | IndexCall { Parms : option[list[TypeScriptParameter]]; ReturnType : TypeScriptType }
  }
  
  [Record]
  public class TypeScriptDeclaration : Located
  {
    public Member : TypeScriptMember;
  }
  
  [Record]
  public class TypeScriptParameter
  {
    public Name : string;
    public Type : TypeScriptType;
    public IsOptional : bool;
    public IsParams : bool;
  }
    
  public variant TypeScriptType
  {
    | Object { Parms : list[TypeScriptParameter] }
    | Dictionary { Key : TypeScriptType; Value : TypeScriptType }
    | Array { Type : TypeScriptType; Arity : int; }
    | Lambda { Parms : option[list[TypeScriptParameter]]; ReturnType : TypeScriptType }
    | Normal { Name : string }
  }
}
