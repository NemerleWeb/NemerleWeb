using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Typedtree;
using Nemerle.Compiler.Parsetree;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Diagnostics;

namespace NemerleWeb
{
  public module JsAstBuilder
  {
    Build(
      expr : TExpr,
      currentScopeDefs : list[string * string],
      methodHeader : TFunHeader) : JsAst
    {
      Build(expr, currentScopeDefs, methodHeader, None())
    }
        
    Build(
      expr : TExpr,
      currentScopeDefs : list[string * string],
      methodHeader : TFunHeader,
      paramKind : option[ParmKind]) : JsAst
    {
      def build = Build(_, currentScopeDefs, methodHeader);
      def getLocalValueName(localVal : LocalValue) {        
        def isFromMainMethodParams = methodHeader.Parameters.Any(p => p.decl.Id == localVal.Id);
        if(isFromMainMethodParams) localVal.Name else localVal.Name + "_" + localVal.Id
      }
        
      match(expr) 
      {
      | Array(args, _dims)                => JsAst.Array(args.Map(build))
      | ArrayIndexer(obj, a :: _)         => JsAst.ArrayIndexer(build(obj), build(a))
      | Assign(s, TExpr.DefaultValue())   => JsAst.Assign(build(s), build(TExpr.Literal(Literal.Null())))
      | Assign(s, t)                      => JsAst.Assign(build(s), build(t))
      | Base                              => Message.Error(expr.Location, "Base not implemented"); JsAst.NotImpl("Base")
      | Block(body = body)                => build(body) 
      | Cache                             => Message.Error(expr.Location, "Cache not implemented"); JsAst.NotImpl("Cache")
      | CacheRef                          => Message.Error(expr.Location, "CacheRef not implemented"); JsAst.NotImpl("CacheRef")
      | Call as call                      => JsKnownMembers.Convert(call, Build(_, currentScopeDefs, methodHeader, _))
      | ClosureFieldOf                    => Message.Error(expr.Location, "ClosureFieldOf not implemented"); JsAst.NotImpl("ClosureFieldOf")
      | ClosureObjectOf                   => Message.Error(expr.Location, "ClosureObjectOf not implemented"); JsAst.NotImpl("ClosureObjectOf")
      | ConstantObjectRef                 => Message.Error(expr.Location, "ConstantObjectRef not implemented"); JsAst.NotImpl("ConstantObjectRef") 
      | CtorOf                            => Message.Error(expr.Location, "CtorOf not implemented"); JsAst.NotImpl("CtorOf")
      | DebugInfo(expr = expr)            => build(expr)
      | Def                               => Message.Error(expr.Location, "Def not implemented"); JsAst.NotImpl("Def")
      | DefaultValue as d                 =>       
        match(d?.Type?.TypeInfo?.FullName)
        {
        | "System.Int32" => JsAst.Literal(JsLiteral.Integer(0))
        | "System.Double" => JsAst.Literal(JsLiteral.Float(0f)); 
        | "System.Boolean" => JsAst.Literal(JsLiteral.Bool(false));         
        | "System.String" => JsAst.Literal(JsLiteral.String(""))
        | _ => JsAst.Void()
        }
      | DefFunctionsIn                    => Message.Error(expr.Location, "DefFunctionsIn not implemented"); JsAst.NotImpl("DefFunctionsIn")
      | DefValIn(name, val, body)         => 
        def newName = name.Name + "_" + name.Id;
        
        match(Build(val, currentScopeDefs, methodHeader)) 
        {
        | Seq([Seq(Pack :: _) as pack, smth, Seq(Unpack :: _) as unpack]) => 
          JsAst.Seq(pack.Items.Append([JsAst.DefValue(newName, smth)])
                              .Append(unpack.Items)
                              .Append([Build(body, (name.Name, newName) :: currentScopeDefs, methodHeader)]));
        | value => 
          JsAst.Seq([JsAst.DefValue(newName, value), 
                     Build(body, (name.Name, newName) :: currentScopeDefs, methodHeader)
                    ])
        }
      | Delayed                           => JsAst.NotImpl("Delayed")
      | Error                             => Message.Error(expr.Location, "Error not implemented"); JsAst.NotImpl("Error")
      | EventMember                       => Message.Error(expr.Location, "EventMember not implemented"); JsAst.NotImpl("EventMember")
      | FieldMember(obj, fld)             => JsKnownMembers.ConvertField(obj, fld, build)
      | FieldOf                           => Message.Error(expr.Location, "FieldOf not implemented"); JsAst.NotImpl("FieldOf")
      | Goto(target, _)                   => JsAst.Goto(target.ToString())
      | HasType(expr, type)               => JsAst.HasType(build(expr), JsClass.GetProperName(type.TypeInfo))
      | If(cond, then, els, _, _)         => JsAst.If(build(cond), build(then), build(els))
      | ImplicitValueTypeCtor             => Message.Error(expr.Location, "ImplicitValueTypeCtor not implemented"); JsAst.NotImpl("ImplicintValueTypeCtor")
      | Label(id, body)                   => JsAst.Label(id, build(body))
      | Literal(val)                      => 
          match(val)
          {
          | Null          => JsAst.Literal(JsLiteral.Null())
          | String (val)  => JsAst.Literal(JsLiteral.String(val))
          | Float (val)   => JsAst.Literal(JsLiteral.Float(val))
          | Double (val)  => JsAst.Literal(JsLiteral.Float(val))
          | Decimal (val) => JsAst.Literal(JsLiteral.Float(Convert.ToDouble(val)))
          | Char (val)    => JsAst.Literal(JsLiteral.String(val.ToString()))
          | Bool (val)    => JsAst.Literal(JsLiteral.Bool(val))
          | Integer (val, isneg, _) => JsAst.Literal(JsLiteral.Integer((val :> int) * (if(isneg) -1 else 1)))
          | Enum (val, _, _) => 
            if (val.val < int.MaxValue :> ulong)
            {
              JsAst.Literal(JsLiteral.Integer(val.val :> int))
            }  
            else
            {
              Message.Error("Enums 64bit are not supported");
              JsAst.NotImpl();
            }
          | Void => JsAst.Void()
          | _ =>
            Message.Error($"Unmatched literal $expr");
            JsAst.NotImpl();
          }
      | LocalFunRef                       => Message.Error(expr.Location, "LocalFunRef not implemented"); JsAst.NotImpl("LocalFunRef")
      | LocalRef(decl)                    =>                    
        def name = getLocalValueName(decl);
        def type = if(decl.Type.TypeInfo != null) Some(decl.Type) else None();
        
        match (decl.ValueKind)
        {
        | LocalValue.Kind.FunParm(kind) when kind == ParmKind.Ref || kind == ParmKind.Out =>
          // If ref/out passed as ref/out return it as LocalRef
          match (paramKind)
          {
          | Some(ParmKind.Ref)
          | Some(ParmKind.Out) => JsAst.LocalRef(name, type)
          | _ => JsAst.ParamRef(name, type)
          }
        | _ => JsAst.LocalRef(name, type)
        }
      | MacroEnvelope(expanded = ex, original = org, the_macro = _) => 
          match(org) { 
          /*| <[ foreach($it in $coll) $body  ]> => 
              def it = it.ToString();
              def coll = if(coll.TypedObject is TExpr) Build(coll.TypedObject :> TExpr) else JsAst.LocalRef(coll.ToString());
              def body = match(body) {
              | Sequence(h :: _) => if(h.TypedObject is TExpr) Build(h.TypedObject :> TExpr) else JsAst.Code(h.ToString());
              | pexpr => if(pexpr.TypedObject is TExpr) Build(pexpr.TypedObject :> TExpr) else JsAst.Code(pexpr.ToString());
              }
                    
              JsAst.For(it, coll, body);      */              
          | MacroCall(Name(Id = "js"), _, p :: []) => 
              match(p) {
              | SyntaxElement.Expression(Literal(Literal.String(val))) => JsAst.Code(val)
              | _ => JsAst.Code(p.ToString().Trim('\"'));
              }                    
          | _ => build(ex)
          }                
      | Match(_, _)                       => JsAst.NotImpl("Match")
      | MethodAddress                     => JsAst.Literal(JsLiteral.String(""))
      | MethodOf                          => Message.Error(expr.Location, "MethodOf not implemented"); JsAst.NotImpl("MethodOf")
      | MethodRef(obj, meth, _, _)        => JsAst.MethodRef(build(obj), meth.Name)
      | MultipleAssign(assigns)           => JsAst.Seq(assigns.Map((l, e) => JsAst.Assign(JsAst.LocalRef(getLocalValueName(l), None()), build(e))))
      | OpCode(name)                      => ConvertToJsOpCode(name)
      | PropertyMember(obj, prop)         => JsAst.PropertyGet(build(obj), prop.Name)
      | SelfTailCall                      => Message.Error(expr.Location, "SelfTailCall not implemented"); JsAst.NotImpl("SelfTailCall")
      | Sequence(e1, e2)                  => JsAst.Seq([build(e1), build(e2)])
      | StaticEventRef                    => Message.Error(expr.Location, "StaticEventRef not implemented"); JsAst.NotImpl("StaticEventRef")
      | StaticPropertyRef(from, prop)     => JsAst.PropertyGet(JsAst.LocalRef(from.tycon.Name, None()), prop.Name)
      | StaticRef(from, mem is IMethod, _) =>          
        def typeName = if(from.tycon.SystemType != null) from.tycon.SystemType.FullName else from.tycon.FrameworkTypeName;              
        match(typeName)
        {
        | _ when typeName == typeof(Nemerle.Core.list[_].Nil).FullName => JsAst.Array([])
        | _ => JsAst.StaticMethodRef(JsClass.GetProperName(from.TypeInfo), mem.Name);
        }
      | StaticRef(from, mem, _)           =>
        def typeName = if(from.tycon.SystemType != null) from.tycon.SystemType.FullName else from.tycon.FrameworkTypeName;              
        match(typeName)
        {
        | _ when typeName == typeof(Nemerle.Core.list[_].Nil).FullName => JsAst.Array([])
        | _ => JsAst.StaticRef(JsClass.GetProperName(from.TypeInfo), mem.Name);
        }
      | Switch(expr, defCase, cases)      =>
        JsAst.Switch(
          build(expr),
          cases.Map((id, ex) => JsAst.SwitchCase(id.ToString(), build(ex))),
          if(defCase.IsSome) build(defCase.Value) else JsAst.Void())
      | This                              => JsAst.This()
      | Throw(expr)                       => JsAst.Throw(build(expr))
      | Try(_, _)                         => Message.Warning("Try is not implmemented"); JsAst.NotImpl("Try");
      | TryFinally(body, handler)         => JsAst.TryFinally(build(body), build(handler))
      | Tuple(args)                       => JsAst.Tuple(args.Map(a => build(a)))
      | TupleIndexer(obj, pos, _len)      => JsAst.TupleIndexer(build(obj), pos)
      | TypeConversion(e, _, _, _)        => build(e)
      | TypeOf                            => Message.Error("TypeOf is not implemented"); JsAst.NotImpl("TypeOf")
      | Use                               => Message.Error("Use is not implemented"); JsAst.NotImpl("Use")
      | _ => Message.Error("Unmatched TExpr $expr"); JsAst.NotImpl("unmatched");
      }
    } 
      
    ConvertToJsOpCode(name : string) : JsAst
    {
      | "+.s"                       
      | "+.u"                       
      | "+.f"                       => JsAst.OpCode("+")
      | "<<.s" | "<<.f"                
      | "<<.u"                      => JsAst.OpCode("<<")
      | ">>.s" | ">>.f"             
      | ">>.u"                      => JsAst.OpCode(">>")
      | "unary.+.s"                    
      | "unary.+.u"                    
      | "unary.+.f"                 => JsAst.OpCode("+")
      | "-.s"                       
      | "-.u"                       
      | "-.f"                       
      | "unary.-.s"                 
      | "unary.-.f"                 => JsAst.OpCode("-")
      | "unary.~.u"                    
      | "unary.~.s"                 => JsAst.OpCode("~")
      | "++.i4.f"                   
      | "++.i4.s"                   
      | "++.i4.u"                   
      | "++.i4.s.i1"                
      | "++.i4.u.i1"                
      | "++.i4.s.i2"                
      | "++.i4.u.i2"                
      | "++.i8.f"                   
      | "++.i8.s"                   
      | "++.i8.u"                   
      | "++.r4.f"                   
      | "++.r8.f"                   => JsAst.OpCode("++")
      | "--.i4.f"                   
      | "--.i4.s"                   
      | "--.i4.u"                   
      | "--.i4.s.i1"                
      | "--.i4.u.i1"                
      | "--.i4.s.i2"                
      | "--.i4.u.i2"                
      | "--.i8.f"                   
      | "--.i8.s"                   
      | "--.i8.u"                   
      | "--.r4.f"                   
      | "--.r8.f"                   => JsAst.OpCode("--")
      | "unary.~.f"                 => JsAst.OpCode("~")
      | "*.s"                       
      | "*.u"                       
      | "*.f"                       => JsAst.OpCode("*")
      | "/.s" | "/.f"               
      | "/.u"                       => JsAst.OpCode("/")
      | "%.s" | "%.f"               
      | "%.u"                       => JsAst.OpCode("%")
      | "|.s" | "|.u" | "|.f" | "|" => JsAst.OpCode("|")
      | "&.s" | "&.u" | "&.f" | "&" => JsAst.OpCode("&")
      | "^.s" | "^.u" | "^.f" | "^" => JsAst.OpCode("^")
      | "bool.!"                    => JsAst.OpCode("!")
      | "==.ref" | "=="             => JsAst.OpCode("===")
      | "!=.ref" | "!="             => JsAst.OpCode("!==")
      | "<.s" | "<.f"               
      | "<.u"                       => JsAst.OpCode("<")
      | ">.s" | ">.f"               
      | ">.u"                       => JsAst.OpCode(">")
      | "<=.s"                      
      | "<=.f"                      
      | "<=.u"                      => JsAst.OpCode("<=")
      | ">=.s"                      
      | ">=.f"                      
      | ">=.u"                      => JsAst.OpCode(">=")
      | _                           => 
          Message.Error("unmatched TExpr.Opcode (" + name + ")"); 
          JsAst.NotImpl();
    }

    public BuildJsAstForSplices(expr : TExpr, methodHeader : TFunHeader) : IEnumerable[JsAst.DefValue]
    {
      def ast = JsAstBuilder.Build(expr, [], methodHeader);
      def ast = JsAstHelper.FlattenAndRemoveVoids(ast);
      JsAstHelper.IterateAST(ast)
                  .Where(a => a is JsAst.DefValue || a is JsAst.Assign)
                  .Select.[JsAst, JsAst.DefValue](j =>
                    match(j)
                    {                    
                    | JsAst.DefValue(name, Call(MethodRef(Method = "template") as template, [PropertyGet(l1, r1), PropertyGet as p2])) => 
                      JsAst.DefValue(name, JsAst.Call(template, [JsAst.FieldRef(l1, r1), p2]))
                    | JsAst.Assign(JsAst.LocalRef(name, _type), r) => JsAst.DefValue(name, r)
                    | JsAst.Assign(JsAst.FieldRef(_obj, name), r) => JsAst.DefValue(name, r)
                    | JsAst.DefValue => j :> JsAst.DefValue
                    | _ => Message.Error("Must not get here"); null
                  });
    }
      
    public BuildJsAst(expr : TExpr, shouldReturn : bool, methodHeader : TFunHeader) : JsAst
    {
      mutable ast = JsAstBuilder.Build(expr, [], methodHeader);
      
      ast = JsAstHelper.TransformBottomUp(ast);
      ast = JsAstHelper.FlattenAndRemoveVoids(ast);
      ast = JsAstHelper.RemoveEmptyBranches(ast);
        
      when(shouldReturn)
        ast = JsAstHelper.MakeReturn(ast);
          
      ast = JsAstHelper.FlattenAndRemoveVoids(ast);
      ast = JsAstHelper.GotosToSwitch(ast);
                
      match(ast)
      {
      | Seq => ast
      | _ => JsAst.Seq([ast])
      }
    }
  }
}
