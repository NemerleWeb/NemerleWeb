using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Diagnostics;
using System.IO;
using System.Text;
using System.Web;
using System.Reflection;
using System.Runtime.Serialization;
using System.Xml;

using Nemerle.Extensions;
using Nemerle.Xml;
using NemerleWeb;
using System.Xml.Linq;

using Newtonsoft.Json;

namespace NemerleWeb
{
  public module Utils
  {
    public ToJson(value : string) : string
    {
      def sb = Text.StringBuilder(value.Length + 2);
      _ = sb.Append(' ') // this char will replased later by '"'.
      .Append(value).Replace(<#"#>, <#""#>).Replace("\n", <#\n#>)
      .Append('"');      
      sb[0] = '"';      
      sb.ToString()
    }
    
    public ToJson[T](value : T) : string
    {
        JsonConvert.SerializeObject(value, JsonSerializerSettings() <- TypeNameHandling = TypeNameHandling.Objects);
    }
        
    public MakePageHtml[Page]([NotNull] page : IPage) : string
    {
        def models = page.GetType()
                         .Assembly
                         .GetTypes()
                         .Where(t => t.GetCustomAttributes(typeof(UnitAttribute), false).Any());
        def modelTemplates = string.Join(Environment.NewLine, models.Select(t => GetModelTemplates(t)));
        def modelLambdas = string.Join(Environment.NewLine, models.Select(t => GetModelLambdas(t)));
        def modelScripts = string.Join(Environment.NewLine, models.Select(t => GetModelScript(t)));
        
        def viewHTml = GetHtml(InvokeStaticMethod("____View____", page.GetType()) :> list[XElement]);
              
        def script = $<#
$modelTemplates
<script type='text/javascript'>
  $modelLambdas
  $modelScripts
  $(page.GetLambdaScript())
  $(page.GetPageScript())
</script>
      #>;
      
      viewHTml + script;
    }
    
    GetModelScript(type : Type) : string
    { 
      InvokeStaticMethod("GetModelScript", type) :> string
    }
    
    GetModelTemplates(type : Type) : string
    {
      if(!type.IsAbstract)
      {        
        string.Join(Environment.NewLine, 
                    type.GetMethods(BindingFlags.Static | BindingFlags.Public)
                        .Where(m => m.Name.StartsWith("____") && m.Name.EndsWith("____"))
                        .Select(m => CreateTemplate(GetHtml(InvokeStaticMethod(m.Name, type) :> list[XElement]), 
                                                    JsClass.GetProperName(m.DeclaringType) + m.Name)))
      }
      else
        ""
    }
    
    GetModelLambdas(type : Type) : string
    {      
      InvokeStaticMethod("GetLambdaScript", type) :> string;
    }
    
    CreateTemplate(html : string, name : string) : string
    {
        $<# 
<script type="text/html" id="$name">
  $html
</script>
        #>
    }
    
    GetHtml(xs : list[XElement]) : string
    {
      using(str = StringWriter())
      using(writer = XmlTextWriter(str))
      {
        writer.QuoteChar = '\'';
        xs.DescendantNodes().OfType.[XElement]().Where(n => n.IsEmpty).Iter(n => n.Value = string.Empty);
        xs.Iter(x => x.WriteTo(writer));
        HttpUtility.HtmlDecode(str.ToString());
      }
    }
    
    InvokeStaticMethod(method : string, type : Type) : object
    {
      def type' = if(type.ContainsGenericParameters) {
        type.MakeGenericType(type.GetGenericArguments().MapToArray(_ => typeof(object)))
      } else {
        type
      }      
      type'.GetMethod(method, BindingFlags.Static | BindingFlags.Public).Invoke(null, array[]);        
    }
  }
}
