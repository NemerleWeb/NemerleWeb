using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Diagnostics;
using System.IO;
using System.Text;
using System.Web;
using System.Reflection;
using System.Runtime.Serialization;
using System.Xml;

using Nemerle.Extensions;
using Nemerle.Xml;
using NemerleWeb;
using System.Xml.Linq;

using Newtonsoft.Json;

namespace NemerleWeb
{
  public module NWebUtils
  {
    private mutable _uniqueId : int;
    
    public GetUniqueId() : int
    {
      _uniqueId++;
      _uniqueId;
    }
    
    public ToJson(value : string) : string
    {
      def sb = Text.StringBuilder(value.Length + 2);
      _ = sb.Append(' ') // this char will replased later by '"'.
      .Append(value).Replace(<#"#>, <#""#>).Replace("\n", <#\n#>)
      .Append('"');      
      sb[0] = '"';      
      sb.ToString()
    }
    
    public ToJson[T](value : T) : string
    {
        JsonConvert.SerializeObject(value, JsonSerializerSettings() <- TypeNameHandling = TypeNameHandling.Objects);
    }
        
    public GetHtml(xs : list[XElement]) : string
    {
      using(str = StringWriter())
      using(writer = XmlTextWriter(str))
      {
        writer.QuoteChar = '\'';
        xs.DescendantNodes().OfType.[XElement]().Where(n => n.IsEmpty).Iter(n => n.Value = string.Empty);
        xs.Iter(x => x.WriteTo(writer));
        HttpUtility.HtmlDecode(str.ToString());
      }
    }    
  }
}
