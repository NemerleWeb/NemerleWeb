using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Typedtree;
using Nemerle.Imperative;

using System;
using System.Collections.Generic;
using System.Linq;

namespace NemerleWeb
{ 
  internal module JSKnownMembers
  {
    static this()
    {
      JSKnownMembersBase.Register(); 
      JSKnownMembersOperators.Register(); 
      JSKnownMembersDelegate.Register();
      JSKnownMembersObject.Register();
      JSKnownMembersString.Register();
      JSKnownMembersIDisposable.Register();
      JSKnownMembersConsole.Register();
      JSKnownMembersConvert.Register();
      
      JSKnownMembersSCGList.Register();
      JSKnownMembersSCGStack.Register();
      JSKnownMembersSCGDictionary.Register();
      JSKnownMembersIEnumerable.Register();
      JSKnownMembersEnumerator.Register();
      
      JSKnownMembersLinqEnumerable.Register();
      
      JSKnownMembersNemerleList.Register();      
      JSKnownMembersNemerleNCollectionsExtensions.Register();
      JSKnownMembersEventsDSL.Register();
      
      JSKnownMembersIntegers.Register();
      JSKnownMembersFloats.Register();
      JSKnownMembersArray.Register();
      
      JSKnownMembersMath.Register();
      JSKnownMembersNemerleOption.Register();
      JSKnownMembersTextStringBuilder.Register();
      JSKnownMembersGlobalizationCutlureInfo.Register();
      JSKnownMembersCharEnumerator.Register();
      JSKnownMembersNemerleCollectionsNList.Register();
      JSKnownMembersNemerleCollectionsHashtable.Register();
    }
    
    public Convert(
      [NotNull] call : TExpr.Call,
      [NotNull] builder : TExpr * option[ParmKind] -> JSAst) : JSAst
    {
      def builder'(expr) { builder(expr, None()) }
      def paramBuilder(p) { builder(p.expr, Some(p.kind)) }
      
      def isRefOut(p)
      {
        match (p.kind)
        {
        | ParmKind.Ref | ParmKind.Out => true
        | _ => false
        }
      }
      
      // Pack ref/out
      // x = { value: x };
      def packRefOut = call.parms
        .Where(isRefOut)
        .Select(p => builder'(p.expr))
        .Where(expr => !(expr is JSAst.ParamRef()))
        .Select(expr => JSAst.Pack(expr));
      
      def callAst =
        match (call)
        {
        | Call(MethodRef(obj = Call(MethodRef(meth = serverMeth, obj = obj), _, _), meth = meth), parms, _)
          when serverMeth.Name == "get_server" && obj is TExpr.This =>
            def parameters =
              if (parms.Length > 0) parms.Zip(meth.GetParameters()).Take(parms.Length - 1).Map((cp, mp) => (mp.name, builder'(cp.expr)))
              else [];
            def callback = if(parms.Length > 0) builder'(parms.Last().expr) else JSAst.Void();
            match(callback)
            {
            | Seq(DefValue as dv :: cb :: []) =>
              JSAst.Seq([dv, JSAst.ServerCall(meth.Name, serverMeth.DeclaringType.Name, parameters, cb)])
            | _ => JSAst.ServerCall(meth.Name, serverMeth.DeclaringType.Name, parameters, callback)
            }
        | Call(MethodRef(_, meth, _, _), [modelParm, viewParm], _) when meth.Name == "GetTemplateName" =>             
          match(modelParm, viewParm)
          {
          | (Parm(expr = TExpr.Literal(Literal.String(model))),
              Parm(expr = TExpr.Literal(Literal.String(view)))) =>
            JSAst.Code($"nweb.utils.getTemplateName(this.$model, '$view')")
          | _ => Message.FatalError("Invalid GetTemplateName call, use 'name' macro")
          }
        | Call(MethodRef(obj = o, meth = meth), parms, _) =>
          if(o.Type.TypeInfo != null)
            ConvertMethod(o.Type.TypeInfo, builder'(o), meth, parms.Map(paramBuilder));
          else
            ConvertFixedTypeMethod(o.Type.FixedValue, builder'(o), meth, parms.Map(paramBuilder))
        | Call(StaticRef(from = fromType, mem = meth) as left, parms, _) =>
          ConvertMethod(fromType.TypeInfo, builder'(left), meth, parms.Map(paramBuilder))
        | Call(OpCode as op, parms, _) => JSAst.Call(builder'(op), parms.Map(paramBuilder))
        | Call(Base(baseCtor), parms, _) =>
          // Call base constructor for Unit bases
          def declaringType = baseCtor.DeclaringType;
          if (declaringType.GetSuperTypes().Any(_.TryRequire(JSClass.IPageType)))
          {
            JSAst.Call(
              JSAst.ConstructorRef(
                JSClass.GetProperName(declaringType),
                Some(baseCtor.Header.Parameters)),
              parms.Map(paramBuilder))
          }
          else
            JSAst.Void()
        | Call(Delayed, _, _) => JSAst.Void()
        | Call(s, _, _) => Message.Error(s.Location, $"Unsupported call to $s"); JSAst.Void()          
        }
      
      // Unpack ref/out
      // x = x.value
      def unpackRefOut = call.parms
        .Where(isRefOut)
        .Select(p => builder'(p.expr))
        .Where(expr => !(expr is JSAst.ParamRef()))
        .Select(expr => JSAst.Unpack(expr));
      
      if(packRefOut.Any())
        JSAst.Seq([JSAst.Seq(packRefOut.NToList()), callAst, JSAst.Seq(unpackRefOut.NToList())])
      else
        callAst
    }
    
    #region ConvertMethod
    
    internal type ConvertTypeHandler = JSAst * IMember * list[JSAst] -> option[JSAst];
    
    // typeof().FullName -> Handler
    private static _convertTypeHandlers : Dictionary[string, ConvertTypeHandler] = Dictionary();    
    private static _convertBaseTypeHandlers : Dictionary[string, ConvertTypeHandler] = Dictionary();
    
    internal type ConvertMethodHandler = TypeInfo * JSAst * IMember * list[JSAst] -> option[JSAst];
    
    // memberName -> Handler
    private static _convertMethodHandlers : Dictionary[string, ConvertMethodHandler] = Dictionary();
    
    // Default memberName -> Handler
    private static _convertDefaultMemberHandlers : Dictionary[string, ConvertMethodHandler] = Dictionary();

    /// <summary>
    /// Convert method.
    /// Note: type can be null.
    /// </summary>
    public ConvertMethod(
      typeInfo : TypeInfo,
      [NotNull] left : JSAst,
      [NotNull] member : IMember,
      [NotNull] parms : list[JSAst]) : JSAst
    {
      // First try convert member by name
      def memberName = member.Name;
      mutable memberHandler;
      when (_convertMethodHandlers.TryGetValue(memberName, out memberHandler))
        when (memberHandler(typeInfo, left, member, parms) is Some(ast))
          return ast;
      
      // If no member handler found, try method handler
      def typeName = TypeName(typeInfo);
      mutable typeHandler;
      when (_convertTypeHandlers.TryGetValue(typeName, out typeHandler))
        when (typeHandler(left, member, parms) is Some(ast))
          return ast;
          
      // Try using just FullName if SystemType
      when (typeInfo?.SystemType != null)
        when (_convertTypeHandlers.TryGetValue(typeInfo.FullName, out typeHandler))
          when (typeHandler(left, member, parms) is Some(ast))
            return ast;
            
      // Try looking for base types
      foreach(subType in GetSubTypeList(typeInfo))
        when (subType?.SystemType != null)
          when (_convertBaseTypeHandlers.TryGetValue(subType.SystemType.FullName, out typeHandler))
            when (typeHandler(left, member, parms) is Some(ast))
              return ast;
            
      // Handle JS native calls
      when(typeInfo?.IsCustomAttributeDefined("NemerleWeb.JSApiAttribute"))
      {
        // Constructor
        if(member.IsConstructor)
          return JSAst.Call(JSAst.Constructor(JSClass.GetProperNameForJS(typeInfo), None()), parms);
        // @() operator
        else
        if(left is JSAst.StaticMethodRef && member.Name == "()")
          return parms.Head.ExternalMethodCall("", parms.Tail);
        // Static method
        else
        if(left is JSAst.StaticMethodRef)
          return JSClass.GetProperNameForJS(typeInfo).StaticCall(member, parms);        
        // JSApiSpecial.Call
        else
        if(member.Name == JSApiSpecial.Call)
            return left.ExternalMethodCall("", parms);
        // JSApiSpecial.New
        else
        if(member.Name == JSApiSpecial.New)
          return JSAst.Call(JSAst.Constructor(left.Write(), None()), parms);        
        // Instance method
        else
          return left.MethodCall(member, parms);
      }
              
      // Nothing found, try default dictionary
      mutable defaultMemberHandler;
      when (_convertDefaultMemberHandlers.TryGetValue(memberName, out defaultMemberHandler))
        when (defaultMemberHandler(typeInfo, left, member, parms) is Some(ast))
          return ast;
          
      // Process low level naming
      DefaultConvertMethod(typeInfo, left, member, parms)
    }
    
    private ConvertFixedTypeMethod(type : FixedType, left : JSAst, member : IMember, parms : list[JSAst]) : JSAst
    {
      match(type)
      {
      | FixedType.Array => 
        match(JSKnownMembersArray.Handler(left, member, parms))
        {
        | Some(ast) => ast
        | None => JSAst.NotImpl(member.Name)
        }        
      | _ => left.MethodCall(member, parms)
      }
    }
    
    private DefaultConvertMethod(typeInfo : TypeInfo, left : JSAst, member : IMember, parms : list[JSAst]) : JSAst
    {
      if (left is StaticMethodRef())
        JSAst.Call(left, parms)
      else
      {
        when (typeInfo != null &&
          !(typeInfo.IsAbstract ||
            typeInfo.IsInterface ||
            typeInfo.GetSuperTypes().Any(t => t.TryRequire(JSClass.IPageType)) ||
            member.Name == "apply" ||
            member.Name == "apply_void"))
          Message.Error(
            member.Location,
            $"Invalid method $(member.Name) in $(TypeName(typeInfo)), params: ..$parms not implemented in JS");
          
        left.MethodCall(member, parms)
      }
    }
    
    public RegisterType([NotNull] type : Type, [NotNull] handler : ConvertTypeHandler) : void
    {
      _convertTypeHandlers.Add(type.FullName, handler);
    }
    
    public RegisterType([NotNull] type : string, [NotNull] handler : ConvertTypeHandler) : void
    {
      _convertTypeHandlers.Add(type, handler);
    }
    
    public RegisterBaseType([NotNull] type : Type, [NotNull] handler : ConvertTypeHandler) : void
    {
      _convertBaseTypeHandlers.Add(type.FullName, handler);
    }
    
    public RegisterMember([NotNull] memberName : string, [NotNull] handler : ConvertMethodHandler) : void
    {
      _convertMethodHandlers.Add(memberName, handler);
    }
    
    public RegisterDefaultMember([NotNull] memberName : string, [NotNull] handler : ConvertMethodHandler) : void
    {
      _convertDefaultMemberHandlers.Add(memberName, handler);
    }
    
    public GetSubTypeList(type : TypeInfo) : list[TypeInfo]
    {
      match(type?.BaseType)
      {        
      | null => []
      | baseType => baseType :: GetSubTypeList(baseType)
      }
    }
    
    #endregion
      
    public ConvertField([NotNull] obj : TExpr, [NotNull] field : IField, [NotNull] builder : TExpr -> JSAst) : JSAst
    {
      if ((field.Name == "hd" || field.Name == "tl") &&
        field.DeclaringType.FrameworkTypeName == "Nemerle.Core.list+Cons")
        JSAst.Call(JSAst.MethodRef(builder(obj), field.Name, None()), [])        
      else
        JSAst.FieldRef(builder(obj), field.Name) 
    }
    
    #region Private helper methods
    
    private InternalTypeName(type : TypeInfo) : string
    {
      if (type.SystemType != null) type.SystemType.FullName else type.FrameworkTypeName;
    }
    
    [Memoize]
    private TypeName(type : TypeInfo) : string
    {
      if (type != null) InternalTypeName(type) else "";
    }
    
    #endregion
  }
}
