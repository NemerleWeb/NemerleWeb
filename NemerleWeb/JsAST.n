using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Typedtree;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Globalization;

namespace NemerleWeb
{
  public module StringLiteral
  {
    // HACK: Indicator to not escape string literal
    // Some string that cannot be found in code
    public static DoNotEscapeMarker = "\u0001";
  }
  
    public variant JsAst
    {           
        | Assign
          {
            Left : JsAst;
            Right : JsAst;
            
            public override Write(indent = "" : string) : string
            {
              indent + $"$(Left.Write()) = $(Right.Write())";
            }
            public override Transform() : JsAst
            {
              match(this) {
              | Assign(_, right) when !IsAllowedForAssignment(right) => 
                def varName = JsAstHelper.GetTemporaryVariableName();                
                JsAst.Seq([
                  JsAst.DefValue(varName, JsAst.Void()),
                  JsAstHelper.DelayAssignment(Right, JsAst.LocalRef(varName, None())),
                  JsAst.Assign(Left, LocalRef(varName, None()))
                ]);
              | _ => this
              }
            }
          }
        | Array          { Values : list[JsAst];
            public override Write(_ = "" : string) : string {
                def Write(el, ind) { el.Write(ind) }
                $<#[..$(Values; ","; Write(_, ""))]#>
            }
            public override Transform() : JsAst
            {
              JsAst.Array(
                Values.SelectMany(
                    x => match(x)
                    {
                    | JsAst.Array(xs2) => xs2
                    | x => [x]
                    })
                  .Where(e => !(e is StaticRef("Nemerle_Core_Nil[T]", _)))
                  .NToList())
            }
            
        }
        | ArrayIndexer    { Obj : JsAst; Index : JsAst;
            public override Write(_ = "" : string) : string {                
                $<#$(Obj.Write())[$(Index.Write())]#>
            }
        }
        | BinaryOperator { Op : string; Left : JsAst; Right : JsAst;
            public override Write(_ = "" : string) : string {
                $"$(Left.Write()) $Op $(Right.Write())"
            }
        }
        | Break          {
            public override Write(indent = "" : string) : string {
                indent + "break;"
            }
        }
        | BreakNamed     { Id : string;
            public override Write(indent = "" : string) : string {
                indent + $"break $Id;"
            }
        }
        | Call
          {
            Fun : JsAst;
            Parameters : list[JsAst];
            
            public override Write(indent = "" : string) : string
            {
              def writeParam(p) { p.Write("") }
              
              indent +
                match(this)
                {
                | Call(OpCode as op, [e1, e2])         => $<#($(e1.Write("")) $(op.Write("")) $(e2.Write("")))#>
                
                | Call(Constructor(type, None), parms) => $<#new $(type)(..$(parms; ", "; writeParam))#>
                | Call(Constructor(type, Some(paramsType)), parms) => 
                  def methodSignature = JsAstHelper.MethodSignature(paramsType);
                  def comma = if (parms is []) "" else ", ";
                  $<#new $(type)($methodSignature$comma..$(parms; ", "; writeParam))#>
                
                | Call(ConstructorRef(type, None), parms) =>
                  $<#$(type).call(..$(JsAst.This() :: parms; ", "; writeParam))#>
                | Call(ConstructorRef(type, Some(paramsType)), parms) =>
                  def methodSignature = JsAstHelper.MethodSignature(paramsType);
                  def comma = if (parms is []) "" else ", ";
                  def astThis = JsAst.This().Write();
                  $<#$(type).call($astThis, $methodSignature$comma..$(parms; ", "; writeParam))#>
                
                | Call(Indexer(obj), parms)          => $<#$(obj.Write())[..$(parms; ", "; writeParam)]#>                
                | Call(MethodRef(obj, method, Some) as f, parms) when
                  !JsAstHelper.IsSpecialMethod(method) =>
                  $<#$(f.Write()).call(..$(obj :: parms; ", "; writeParam))#>
                | Call(f, parms)                     => $<#$(f.Write())(..$(parms; ", "; writeParam))#>    
                }
            }
            
            static private Literal_Int1 : JsAst.Literal = JsAst.Literal(JsLiteral.Integer(1));
            
            public override Transform() : JsAst
            {
              // Compiler bug workaround
              def parametersNotAllowedForAssignment = Parameters.Any(p => !IsAllowedForAssignment(p));
              match(this)
              {
              | Call(OpCode("==="), something :: Literal(Bool(true)) :: []) 
              | Call(OpCode("==="), Literal(Bool(true)) :: something :: []) => something.Transform()
              | Call(OpCode as op, Call(MethodRef(Seq,  _, _), _) as call :: rest) => 
                  def varName = JsAstHelper.GetTemporaryVariableName();
                  JsAst.Seq(
                    [
                      JsAst.DefValue(varName, JsAst.Void()),
                      JsAstHelper.DelayAssignment(call, JsAst.LocalRef(varName, None())),
                      JsAst.Call(op, JsAst.LocalRef(varName, None()) :: rest)
                    ]
                  ).Transform()
              | Call(OpCode as op, head :: (Call(MethodRef(Seq,  _, _), _) as call) :: []) => 
                  def varName = JsAstHelper.GetTemporaryVariableName();
                  JsAst.Seq(
                    [
                      JsAst.DefValue(varName, JsAst.Void()),
                      JsAstHelper.DelayAssignment(call, JsAst.LocalRef(varName, None())),
                      JsAst.Call(op, [head, JsAst.LocalRef(varName, None())])
                    ]
                  ).Transform()
              | Call(OpCode("==="), something :: Literal(Null) :: []) 
              | Call(OpCode("==="), [Literal(Null), something]) => 
                  JsAst.Call(
                    JsAst.OpCode("||"), 
                    [
                      JsAst.Call(JsAst.OpCode("==="), [something, JsAst.Literal(JsLiteral.Null())]), 
                      JsAst.Call(
                        JsAst.OpCode("==="),
                        [
                          JsAst.TypeOf(something),
                          JsAst.Literal(JsLiteral.String("undefined"))
                        ])
                    ]
                  ).Transform()
                 
              // Empty list comparison
              | Call(OpCode("===") as op, [something, JsAst.Array([])])
              | Call(OpCode("===") as op, [JsAst.Array([]), something])
              | Call(OpCode("!==") as op, [something, JsAst.Array([])])
              | Call(OpCode("!==") as op, [JsAst.Array([]), something]) => 
                JsAst.Call(op, [something.Field("length"), JsAst.Literal(JsLiteral.Integer(0))])
              
              | Call(OpCode("!=="), something :: Literal(Null) :: []) 
              | Call(OpCode("!=="), [Literal(Null), something]) => 
                  JsAst.Call(
                    JsAst.OpCode("&&"), 
                    [
                      JsAst.Call(JsAst.OpCode("!=="), [something, JsAst.Literal(JsLiteral.Null())]), 
                      JsAst.Call(
                        JsAst.OpCode("!=="),
                        [
                          JsAst.TypeOf(something),
                          JsAst.Literal(JsLiteral.String("undefined"))
                        ])
                    ]
                  ).Transform()                 
                
              | Call(func, parms) when parms.OfType.[JsAst.Seq]().Any() =>
                  def newParms = parms.Select(p : JsAst => {
                      def varName = JsAstHelper.GetTemporaryVariableName();
                      match(p)
                      {
                      | xs is Seq =>
                        (JsAst.Seq(
                          [
                            JsAst.DefValue(varName, JsAst.Void()),
                            JsAstHelper.DelayAssignment(xs, JsAst.LocalRef(varName, None()))
                          ]),
                        JsAst.LocalRef(varName, None()))
                      | x => (JsAst.Void(), x)
                      }
                  }).NToList();
                  def paramInits = JsAst.Seq(newParms.Filter((i, _)=> !(i is JsAst.Void)).Map((i, _) => i));
                  def newParms = newParms.Map((_, p) => p);
                  JsAst.Seq([paramInits, JsAst.Call(func, newParms).Transform()])
              | Call(OpCode("++" as opcode), [FieldRef as field])
              | Call(OpCode("--" as opcode), [FieldRef as field]) =>
                Call(OpCode(opcode.Substring(1)), [field, Literal_Int1])
                
              | Call(OpCode("++" as opcode), [PropertyGet as property])
              | Call(OpCode("++" as opcode), [Call(MethodRef, _) as property])
              | Call(OpCode("--" as opcode), [PropertyGet as property ])
              | Call(OpCode("--" as opcode), [Call(MethodRef, _) as property]) =>
                Call(OpCode(opcode.Substring(1)), [property, Literal_Int1])
              /* TODO: _ when (() => false)() crashes compiler */              
              | Call(func, parms) when parametersNotAllowedForAssignment =>
                def varInitializations = 
                  parms.Map(p =>
                    if(!IsAllowedForAssignment(p))
                    {
                      def varName = JsAstHelper.GetTemporaryVariableName();
                      (Some(varName), [JsAst.DefValue(varName, JsAst.Void()), JsAstHelper.DelayAssignment(p, JsAst.LocalRef(varName, None()))])
                    }
                    else
                      (None(), [p]));
                      
                def varParams = varInitializations.Map(
                  v =>
                    match(v) 
                    { 
                    | (Some(name), _) => JsAst.LocalRef(name, None()) 
                    | (None, [p]) => p 
                    | _ => Message.FatalError("Shouldn't happen")
                    });
                
                JsAst.Seq(varInitializations
                  .SelectMany(
                    v => 
                      match(v) 
                      { 
                      | (Some, seq) => seq 
                      | _ => [] 
                      })
                 .Concat([JsAst.Call(func, varParams).Transform()])
                 .NToList())
              | Call(MethodRef(obj, meth, p), parms) when !IsAllowedForAssignment(obj) =>
                def varName = JsAstHelper.GetTemporaryVariableName(); 
                JsAst.Seq([
                  JsAst.DefValue(varName, JsAst.Void()),
                  JsAstHelper.DelayAssignment(obj, JsAst.LocalRef(varName, None())),
                  JsAst.Call(JsAst.MethodRef(JsAst.LocalRef(varName, None()), meth, p), parms).Transform()
                ])
              // TODO: Improve this hack for -= , *= and other
              | Call(OpCode("+="), [Call(OpCode("+="), [l1, r1]), r2]) =>                                
                  JsAst.Call(OpCode("+="), [l1, JsAst.Call(JsAst.OpCode("+"), [r1, r2])])
              | _ => this
              }
            }
          }
        | Code           { CodeString : string;
            public override Write(indent = "" : string) : string {
                indent + $"$CodeString"
            }
        }
        | Continue       { LoopName : string;
            public override Write(indent = "" : string) : string {
                indent + $"continue $LoopName"
            }
        }
        | Constructor   
          {
            Type : string;
            ParametersType : option[list[TParameter]];
          
            public override Write(_ = "" : string) : string
            {
              throw NotImplementedException("Not implemented");
            }
          }
        | ConstructorRef
          {
            Type : string;
            ParametersType : option[list[TParameter]];
          
            public override Write(_ = "" : string) : string
            {
              Type
            }
          }
        | DefFunction
          {
            Obj : JsAst;
            Parameters : list[JsAst];
            Body : JsAst;
            
            public override Write(indent = "" : string) : string
            {
$<#$(indent)function(..$(Parameters; ";"; p => p.Write(""))) { 
$(Body.Write(indent + "  ")) 
$(indent)}#>
            }
        }
        | DeclFunction {
          Name : string;
          Parameters : list[JsAst];
          Body : JsAst;
          
          public override Write(_indent = "" : string) : string
          {
$<#function $Name(..$(Parameters; ";"; p => p.Write(""))) { $(Body.Write("  ")) }#>
          }
        }
        | DefValue       { Name : string; Val : JsAst;
          public override Write(indent = "" : string) : string {
            match(this)
            {
            | DefValue(name, Void) => indent + $<#var $(name.Replace(".", "_"))#>
            | DefValue(name, val)  => indent + $<#var $(name.Replace(".", "_")) = $(val.Write())#>
            }
          }
          public override Transform() : JsAst
          {
            match(this)
            {
            | DefValue(l, r) when !IsAllowedForAssignment(r) =>
              def res = JsAst.Seq([
                JsAst.DefValue(l, JsAst.Void()),
                JsAstHelper.DelayAssignment(r, JsAst.LocalRef(l, None()))]);
              res;
            | _ => this                
            }
          }            
        }
        | For            { ItName : string; Collection : JsAst; Body : JsAst;
            public override Write(_indent = "" : string) : string {
$<#
for(var $ItName in $(Collection.Write())) {
var $ItName = $(Collection.Write())[$ItName];
$(Body.Write("  "))
}#> 
            }
        }
        | GlobalRef
          {
            Member : string;
          
            public override Write(_ = "" : string) : string
            {
                Member
            }
          }
        | Goto           { LabelId : string;
            public override Write(_ = "" : string) : string {
                "/* No goto writer implementation */"
            }
        }
        | HasType        { Obj : JsAst; TypeName : string;
          public override Write(_indent = "" : string) : string {
            $"$(Obj.Write()).constructor === $TypeName"
          }
          public override Transform() : JsAst {
            match(this) {
            | HasType(l, "Nemerle_Core_Cons_$T$__$T$_")
            | HasType(l, "Nemerle_Core_Cons_$T$_") => 
              JsAst.Call(JsAst.OpCode(">"),
                        [JsAst.FieldRef(l, "length"), JsAst.Literal(JsLiteral.Integer(0))]);
            | _ => this                
            }
          }   
        }
        | If             { Cond : JsAst; Body : JsAst; ElseBody : JsAst;
            public override Write(indent = "" : string) : string {
$<#
$(indent)if($(Cond.Write())) { 
$(Body.Write(indent + "  "))
$indent} else {
$(ElseBody.Write(indent + "  "))
$indent}#>
            }
            public override Transform() : JsAst {
                match(this) {
                | If(If(c, t, e), tt, ee)    => 
                  def varName = JsAstHelper.GetTemporaryVariableName();
                  JsAst.Seq([
                    JsAst.DefValue(varName, JsAst.If(c, t, e)).Transform(),
                    JsAst.If(JsAst.LocalRef(varName, None()), tt, ee)
                  ]).Transform();
                | If(Call(func, [something, If(c, t, e)]), then, els) => 
                  def varName = JsAstHelper.GetTemporaryVariableName();
                  JsAst.Seq([
                    JsAst.DefValue(varName, JsAst.If(c, t, e)).Transform(),
                    JsAst.If(JsAst.Call(func, [something, JsAst.LocalRef(varName, None())]), then, els)
                  ]).Transform();
                | If(Call(func, [If(c, t, e), something]), then, els) => 
                  def varName = JsAstHelper.GetTemporaryVariableName();
                  JsAst.Seq([
                    JsAst.DefValue(varName, JsAst.If(c, t, e)).Transform(),
                    JsAst.If(JsAst.Call(func, [JsAst.LocalRef(varName, None()), something]), then, els)
                  ]).Transform();
                | If(Call(OpCode as op, [Seq as seq, rest]), then, els) =>
                    def varName = JsAstHelper.GetTemporaryVariableName();
                    JsAst.Seq([JsAst.DefValue(varName, JsAst.Void()), JsAstHelper.DelayAssignment(seq, JsAst.LocalRef(varName, None())), JsAst.If(JsAst.Call(op, [JsAst.LocalRef(varName, None()), rest]), then, els)]).Transform();                           
                | If(Call(OpCode as op, [Call(MethodRef(Seq as seq, m, p), parms), rest]), then, els)  =>             
                    def varName = JsAstHelper.GetTemporaryVariableName();
                    JsAst.Seq(
                      [
                        JsAst.DefValue(varName, JsAst.Void()),
                        JsAstHelper.DelayAssignment(seq, JsAst.LocalRef(varName, None())),
                        JsAst.If(
                          JsAst.Call(op, 
                            [
                              JsAst.Call(
                                JsAst.MethodRef(JsAst.LocalRef(varName, None()), m, p),
                                parms),
                              rest
                            ]),
                          then,
                          els)])
                      .Transform();
                | If(Call(OpCode as op, [Call as call, rest]), then, els) =>             
                    def varName = JsAstHelper.GetTemporaryVariableName();
                    JsAst.Seq([JsAst.DefValue(varName, call), JsAst.If(JsAst.Call(op, [JsAst.LocalRef(varName, None()), rest]), then, els)]).Transform()
                | If(Seq as seq, then, els) => 
                    def varName = JsAstHelper.GetTemporaryVariableName();
                    JsAst.Seq([JsAst.DefValue(varName, JsAst.Void()), 
                               JsAstHelper.DelayAssignment(seq, JsAst.LocalRef(varName, None())), 
                               JsAst.If(JsAst.Call(JsAst.OpCode("==="), 
                                                   [JsAst.LocalRef(varName, None()), JsAst.Literal(JsLiteral.Bool(true))]), 
                                        then, els)])
                          .Transform();   
                | _ => this
                }
            }
        }
        | Indexer        { Obj : JsAst;
            public override Write(_ = "" : string) : string {
                "/* No Indexer writer implementation */"
            }
        }      
        | JustIf         { Cond : JsAst; Body : JsAst;
            public override Write(indent = "" : string) : string {
$<# 
$(indent)if($(Cond.Write())) { 
$(Body.Write(indent + "  "))
$(indent)}#>
            }
            public override Transform() : JsAst {
                match(this) {
                | JustIf(Call(func, [something, If(c, t, e)]), then) => 
                  def varName = JsAstHelper.GetTemporaryVariableName();
                  JsAst.Seq([
                    JsAst.DefValue(varName, JsAst.If(c, t, e)).Transform(),
                    JsAst.JustIf(JsAst.Call(func, [something, JsAst.LocalRef(varName, None())]), then)
                  ]).Transform();
                | JustIf(Call(func, [If(c, t, e), something]), then) => 
                  def varName = JsAstHelper.GetTemporaryVariableName();
                  JsAst.Seq([
                    JsAst.DefValue(varName, JsAst.If(c, t, e)).Transform(),
                    JsAst.JustIf(JsAst.Call(func, [JsAst.LocalRef(varName, None()), something]), then)
                  ]).Transform();
                | JustIf(Call(OpCode as op, Seq as seq :: rest), then) =>
                    def varName = JsAstHelper.GetTemporaryVariableName();
                    JsAst.Seq([JsAst.DefValue(varName, JsAst.Void()), JsAstHelper.DelayAssignment(seq, JsAst.LocalRef(varName, None())), JsAst.JustIf(JsAst.Call(op, JsAst.LocalRef(varName, None()) :: rest), then)]).Transform();                           
                | JustIf(Call(OpCode as op, Call(MethodRef(Seq as seq,  m, p), parms) :: rest), then)  =>             
                    def varName = JsAstHelper.GetTemporaryVariableName();
                    JsAst.Seq(
                      [
                        JsAst.DefValue(varName, JsAst.Void()),
                        JsAstHelper.DelayAssignment(seq, JsAst.LocalRef(varName, None())),
                        JsAst.JustIf(
                          JsAst.Call(
                            op,
                            JsAst.Call(
                              JsAst.MethodRef(JsAst.LocalRef(varName, None()), m, p),
                              parms) :: rest),
                          then)
                      ]
                    ).Transform();
                | JustIf(Call(OpCode as op, Call as call :: rest), then) =>             
                    def varName = JsAstHelper.GetTemporaryVariableName();
                    JsAst.Seq([JsAst.DefValue(varName, call), JsAst.JustIf(JsAst.Call(op, JsAst.LocalRef(varName, None()) :: rest), then)]).Transform()
                | JustIf(Seq as seq, then) => 
                    def varName = JsAstHelper.GetTemporaryVariableName();
                    JsAst.Seq([JsAst.DefValue(varName, JsAst.Void()), 
                               JsAstHelper.DelayAssignment(seq, JsAst.LocalRef(varName, None())), 
                               JsAst.JustIf(JsAst.Call(JsAst.OpCode("==="), 
                                                   [JsAst.LocalRef(varName, None()), JsAst.Literal(JsLiteral.Bool(true))]), then)])
                          .Transform();   
                | _ => this
                }
            }
        }               
        | Label          { Id : int; Body : JsAst;
          public override Write(indent = "" : string) : string {
            Body.Write(indent)
          }
        }
        | Lambda         { Name : string; Parameters : list[string]; Body : JsAst;
            public override Write(indent = "" : string) : string {
$<#$(indent)function(..$Parameters) {
$(Body.Write(indent + "  "))
}#>
            }
        }
        | Literal        
          {
            Value : JsLiteral;
            
            public override Write(indent = "" : string) : string
            {
              match(this)
              {
              | Literal(Null)         => indent + "null"
              | Literal(Integer(val)) => indent + $"$(val.ToString(CultureInfo.InvariantCulture))"
              | Literal(Float(val))   => indent + $"$(val.ToString(CultureInfo.InvariantCulture))"
              | Literal(String(val))  =>        
                def escaping = val.IndexOf(StringLiteral.DoNotEscapeMarker);
                def str = 
                  if(escaping != -1)
                    val.Substring(0, escaping)
                  else
                    JsAstHelper.EscapeString(val);
                    
                indent + str                
              | Literal(Bool(val))    => indent + $"$(val.ToString(CultureInfo.InvariantCulture).ToLower())"
              | Literal(Regexp(pat, mod)) => indent + $<#new RegExp($(pat.Write()), $(mod.Write()))#>
              }
            }
        }
        | LocalRef       { Name : string; Type : option[TypeVar];
            public override Write(_ = "" : string) : string {
                $<#$(Name.Replace(".", "_"))#>
            }
        }
        | ParamRef       { Name : string; Type : option[TypeVar];
            public override Write(_ = "" : string) : string {
                $<#$(Name.Replace(".", "_")).value#>
            }
        }
        | MethodRef
          { 
            Obj : JsAst; 
            Method : string;
            ParametersType : option[list[TParameter]];
            
            public override Write(_ = "" : string) : string
            {
              def delimiter = if (Obj is Literal(JsLiteral.Integer)) " " else "";
              // HACK: Lambda support
              if (Method == "apply" || Method == "apply_void")
                $"$(Obj.Write())"
              else
                $"$(Obj.Write())$delimiter.$(JsAstHelper.Method(Method, ParametersType))"
            }
          }    
        | StaticMethodRef
          {
            Type : string;
            Method : string;
            ParametersType : option[list[TParameter]];
            
            public override Write(_ = "" : string) : string
            {
              $"$Type.$(JsAstHelper.Method(Method, ParametersType))"
            }
        }
        | StaticRef
          { 
            Type : string;
            Member : string;            
            
            public override Write(_ = "" : string) : string 
            {              
                $"$Type.$Member"
            }
          }
        | FieldRef       { Obj : JsAst; Parameter : string;
            public override Write(_ = "" : string) : string {
                $"$(Obj.Write()).$Parameter"
            }
        }
        | PropertySet    
          {
            Obj : JsAst;
            PropertyName : string;
            Value : JsAst;
            
            public override Write(indent = "" : string) : string 
            {
              indent + $"$(Obj.Write()).set_$PropertyName($(Value.Write()))"
            }
            
            public override Transform() : JsAst 
            {
              JsAst.Call(JsAst.MethodRef(Obj, "set_" + PropertyName, None()), [Value]).Transform()
            }
          }
        | PropertyGet   
          {
            Obj : JsAst;
            PropertyName : string;
            
            public override Write(_ = "" : string) : string 
            {
              $"$(Obj.Write()).get_$PropertyName()"
            }
          }
        | OpCode         { Name : string;
            public override Write(_ = "" : string) : string {
                $"$Name"
            }
        }
        | Object         { Fields : list[(string * JsAst)];
            public override Write(_ = "" : string) : string {
                def fieldToObjectField((name, ast)) {
                    $"$name : $(ast.Write())"
                }
                $<#{ ..$(Fields; ", "; fieldToObjectField) }#>
            }
        }
        | Return         { Expr : JsAst;
            public override Write(indent = "" : string) : string {
                indent + $<#return $(Expr.Write(""))#>
            }
        }
        | Seq            { Items : list[JsAst];
            public override Write(indent = "" : string) : string {                
                def ss = Items.Where(i => !(i is JsAst.Void))
                              .Select(i => i.Write(indent));                
                $<#..$(ss; ";" + Environment.NewLine)#>
            }
            public override Transform() : JsAst {
                match(Items) {
                | x :: [] => x
                //| xs => JsAst.Seq(xs.Map(x => x.Transform()))
                | _ => this
                }
            }
        }
        | Switch         { Expr : JsAst; Cases : list[JsAst.SwitchCase]; DefaultExpr : JsAst;
            public override Write(indent = "" : string) : string {
$<#
$(indent)switch($(Expr.Write())) {
..$(Cases; "\n"; e => e.Write(indent + "  "))
$(indent)default:
$(DefaultExpr.Write(indent + "  "))
$(indent)}#>
            }
        }
        | SwitchCase     { Id : string; Body : JsAst;
            public override Write(indent = "" : string) : string {
$<#$(indent)case "$Id":
$(Body.Write(indent + "  "))
$(indent)break;#>
            }
        }
        | ServerCall     { MethodName : string; TypeName : string; Parameters : list[string * JsAst]; Callback : JsAst;
            public override Write(indent = "" : string) : string {                            
              def jsparms = Parameters.Map((name, val) => $"$name :' + JSON.stringify($(val.Write())) + '");
              def callback = Callback.Write().TrimEnd(';');
$<#
$(indent)$$.ajax({
$(indent)url: '/$TypeName/$MethodName',
$(indent)type: 'POST',
$(indent)dataType: 'json',
$(indent)contentType: 'application/json; charset=utf-8',
$(indent)data: '{..$jsparms}',
$(indent)success: function(result) { 
$(indent)  $(callback)(nweb.utils.toTypedObject(result));
$(indent)  nweb.invalidate();
$(indent)}
$(indent)});
#>
            }
        }    
        | Ternary        { Cond : JsAst; Body : JsAst; ElseBody : JsAst;
            public override Write(_ : string) : string {
                $"($(Cond.Write()) ? $(Body.Write()) : $(ElseBody.Write()))"
            }
        }
        | This           {
            public override Write(_ = "" : string) : string {
                "self"
            }
        }
        | Throw          { Obj : JsAst;
            public override Write(indent = "" : string) : string {
                indent + $"throw $(Obj.Write())"
            }
        }
        | Try            { Body : JsAst; Handler : JsAst;
            public override Write(indent = "" : string) : string {
$<#
$(indent)try {
$(Body.Write(indent + "  "))
$(indent)} catch {
$(Handler.Write(indent + "  "))
$(indent)}
#>
            }
        }
        | TryFinally     { Body : JsAst; Handler : JsAst;
            public override Write(indent = "" : string) : string {
$<#
$(indent)try {
$(Body.Write(indent + "  "))
$(indent)} finally {
$(Handler.Write(indent + "  "))
$(indent)}
#>
            }
        }
        | Tuple          { Args : list[JsAst];
          public override Write(_indent = "" : string) : string {
            def values = Args.MapI((i, a) => $"$i: $(a.Write())");
            $<#{..$values}#>
          }
        }
        | TupleIndexer          { Obj : JsAst; Pos : int;
          public override Write(_indent = "" : string) : string {            
            $<#$(Obj.Write())[$Pos]#>
          }
        }
        | TypeOf         { Expr : JsAst;
            public override Write(_ = "" : string) : string {
                $<#typeof $(Expr.Write())#>
            }
        }
        | Undefined      {
            public override Write(_ = "" : string) : string {
                <#"undefined"#>
            }
        }
        | UnaryOperator  { Op : string; Obj : JsAst;
            public override Write(_ = "" : string) : string {                
                $"$Op$(Obj.Write())"
            }
        }
        | Void           {
            public override Write(_ = "" : string) : string {
                ""
            }
        }
            
        | While          { Cond : JsAst; Body : JsAst;
            public override Write(indent = "" : string) : string {
$<#
$(indent)while($(Cond.Write())) {
$(Body.Write(indent + "  "))
$(indent)}
#>
            }
        }
        | WhileNamed     { Cond : JsAst; Body : JsAst; Name : string;
            public override Write(indent = "" : string) : string {
$<#
$(indent)$Name: while($(Cond.Write())) {
$(Body.Write(indent + "  "))
$(indent)}
#>  
            }
        }
        | Pack     { Expr : JsAst; 
          public override Write(indent = "" : string) : string {
            JsAst.Assign(Expr, JsAst.Object([("value", Expr)])).Write(indent)
          }
        }
        | Unpack     { Expr : JsAst; 
          public override Write(indent = "" : string) : string {
            JsAst.Assign(Expr, JsAst.FieldRef(Expr, "value")).Write(indent)
          }
        }
        | NotImpl { 
            Val : string;
            public this() {
                Val = "";
            }
            public override Write(_ = "" : string) : string {
                $<#"Not implemented: $Val "#>
            }
        }
        
        public abstract Write(_indent = "" : string) : string { string.Empty; };
        public virtual Transform() : JsAst { this }        
        public static AllowedForAssignment : HashSet[Type] =
          HashSet([
            typeof(JsAst.Call),
            typeof(JsAst.MethodRef),
            typeof(JsAst.LocalRef),            
            typeof(JsAst.ParamRef),
            typeof(JsAst.Literal), 
            typeof(JsAst.Code),
            typeof(JsAst.Void), 
            typeof(JsAst.Ternary),
            typeof(JsAst.NotImpl),
            typeof(JsAst.Lambda),
            typeof(JsAst.Array),
            typeof(JsAst.StaticRef), 
            typeof(JsAst.This), 
            typeof(JsAst.Tuple),
            typeof(JsAst.TupleIndexer), 
            typeof(JsAst.FieldRef),
            typeof(JsAst.PropertyGet),
            typeof(JsAst.ArrayIndexer),
            typeof(JsAst.Label),
            typeof(JsAst.Object),
            typeof(JsAst.Unpack),
            typeof(JsAst.GlobalRef),
            //typeof(JsAst.Goto),
          ]);
        
        public static Recurse(ast : JsAst, selector : (JsAst * int) -> JsAst, currentDepth = 0 : int, topdown : bool = true) : JsAst 
        {
            def recurse = Recurse(_, selector, currentDepth + 1, topdown);
            def ast' = if(topdown) selector(ast, currentDepth) else ast;
            
            def result = match(ast') {
            | Assign(l, r)                => JsAst.Assign(recurse(l), recurse(r))
            | Array(v)                    => JsAst.Array(v.Map(recurse))
            | ArrayIndexer(o, v)          => JsAst.ArrayIndexer(recurse(o), recurse(v))
            | BinaryOperator(o, l, r)     => JsAst.BinaryOperator(o, recurse(l), recurse(r))
            | Break                       => ast'
            | BreakNamed                  => ast'
            | Call(func, parms)           => JsAst.Call(recurse(func), parms.Map(recurse))
            | Code                        => ast'
            | Constructor                 => ast'
            | ConstructorRef              => ast'
            | Continue(loopname)          => JsAst.Continue(loopname)
            | DefFunction(obj, ps, bdy)   => JsAst.DefFunction(recurse(obj), ps.Map(recurse), recurse(bdy))
            | DeclFunction(name, ps, bdy) => JsAst.DeclFunction(name, ps.Map(recurse), recurse(bdy))
            | DefValue(name, val)         => JsAst.DefValue(name, recurse(val))
            | FieldRef(obj, parm)         => JsAst.FieldRef(recurse(obj), parm)
            | For(it, coll, body)         => JsAst.For(it, recurse(coll), recurse(body))
            | GlobalRef                   => ast'
            | Goto                        => ast'
            | HasType(obj, type)          => JsAst.HasType(recurse(obj), type)
            | If(cond, then, els)         => JsAst.If(recurse(cond), recurse(then), recurse(els))
            | Indexer(obj)                => JsAst.Indexer(recurse(obj))
            | JustIf(cond, then)          => JsAst.JustIf(recurse(cond), recurse(then))
            | Label(id, body)             => JsAst.Label(id, recurse(body))
            | Lambda(name, parms, body)   => JsAst.Lambda(name, parms, recurse(body))
            | Literal                     => ast'
            | LocalRef                    => ast'
            | MethodRef(obj, meth, parms) => JsAst.MethodRef(recurse(obj), meth, parms)
            | NotImpl                     => ast'
            | OpCode                      => ast'
            | Object(fields)              => JsAst.Object(fields.Map((name, body) => (name, recurse(body))))
            | ParamRef                    => ast'
            | PropertySet(obj, prop, val) => JsAst.PropertySet(recurse(obj), prop, recurse(val))
            | PropertyGet(obj, prop)      => JsAst.PropertyGet(recurse(obj), prop)
            | Return(expr)                => JsAst.Return(recurse(expr))
            | Seq(items)                  => JsAst.Seq(items.Map(ast => Recurse(ast, selector, currentDepth, topdown)))
            | ServerCall(meth, ty, parms, callback) => JsAst.ServerCall(meth, ty, parms.Map(p => (p[0], recurse(p[1]))), recurse(callback))
            | StaticRef as s              => s
            | StaticMethodRef as s        => s
            | Switch(expr, cases, deflt)  => JsAst.Switch(recurse(expr), cases.Select(recurse).Cast.[JsAst.SwitchCase]().NToList(), recurse(deflt))
            | SwitchCase(id, case)        => JsAst.SwitchCase(id, recurse(case))
            | Ternary(cond, then, els)    => JsAst.Ternary(recurse(cond), recurse(then), recurse(els))
            | This                        => ast'
            | Throw(obj)                  => JsAst.Throw(recurse(obj))
            | Try(body, handler)          => JsAst.Try(recurse(body), recurse(handler))
            | TryFinally(body, handler)   => JsAst.TryFinally(recurse(body), recurse(handler))
            | Tuple(args)                 => JsAst.Tuple(args.Map(recurse))
            | TupleIndexer(o, pos)        => JsAst.TupleIndexer(recurse(o), pos)
            | TypeOf(expr)                => JsAst.TypeOf(recurse(expr))
            | Undefined                   => ast'            
            | UnaryOperator(op, obj)      => JsAst.UnaryOperator(op, recurse(obj))
            | Void                        => ast'        
            | While(cond, body)           => JsAst.While(recurse(cond), recurse(body))
            | WhileNamed(cnd, bdy, nme)   => JsAst.WhileNamed(recurse(cnd), recurse(bdy), nme)
            | Pack                        => ast'
            | Unpack                      => ast'
            }
            
            if(topdown) result else selector(result, currentDepth)
        }
        
        private IsAllowedForAssignment(ast : JsAst) : bool
        {
          AllowedForAssignment.Contains(ast.GetType())
        }
    }
}
