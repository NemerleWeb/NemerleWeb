using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Typedtree;

using System;
using System.Collections.Generic;
using System.Linq;

namespace NemerleWeb
{
    public variant JsAst
    {
        | Assign         { Left : JsAst; Right : JsAst;
            public override Write(_indent = "" : string) : string {
                $"$(Left.Write()) = $(Right.Write())"
            }
            public override Transform() : JsAst {
              match(this) {
              | Assign(l, r) when !AllowedForAssignment.Any(al => al == r.GetType()) => JsAstHelper.DelayAssignment(r, l);
              | _ => this
              }
            }
        }
        | Array          { Values : list[JsAst];
            public override Write(_ = "" : string) : string {
                def Write(el, ind) { el.Write(ind) }
                $<#[..$(Values; ","; Write(_, ""))]#>
            }
            public override Transform() : JsAst {
                match(this) {
                | Array(xs) => JsAst.Array(
                    xs.Flatten(x => match(x) {
                                    | JsAst.Array(xs2) => xs2
                                    | x => [x]
                                    }).Filter(e => match(e) {
                                        | StaticRef("Nemerle_Core_Nil[T]", _) => false
                                        | _ => true
                                    }))
                }
            }
            
        }
        | ArrayIndexer    { Obj : JsAst; Index : JsAst;
            public override Write(_ = "" : string) : string {                
                $<#$(Obj.Write())[$(Index.Write())]#>
            }
        }
        | BinaryOperator { Op : string; Left : JsAst; Right : JsAst;
            public override Write(_ = "" : string) : string {
                $"$(Left.Write()) $Op $(Right.Write())"
            }
        }
        | Break          {
            public override Write(_indent = "" : string) : string {
                "break;"
            }
        }
        | Call           { Fun : JsAst; Parameters : list[JsAst];
            public override Write(_indent = "" : string) : string {
                match(this) {
                | Call(OpCode as op, e1 :: e2 :: []) => $"$(e1.Write()) $(op.Write()) $(e2.Write())"
                | Call(Constructor(type), parms)     => $<#new $(type)(..$(parms; ","; e => e.Write("")))#>
                | Call(Indexer(obj), parms)          => $<#$(obj.Write())[..$(parms; ","; e => e.Write(""))]#>    
                | Call(op, parms)                    => $<#$(op.Write())(..$(parms; ","; e => e.Write("")))#>    
                }
            }
            
            static private Literal_Int1 : JsAst.Literal = JsAst.Literal(JsLiteral.Integer(1));
            
            public override Transform() : JsAst {
                match(this) {
                | Call(OpCode("==="), something :: Literal(Bool(true)) :: []) 
                | Call(OpCode("==="), Literal(Bool(true)) :: something :: []) => something.Transform()
                | Call(OpCode as op, Call(MethodRef(Seq,  _), _) as call :: rest) => 
                    def varName = JsAstHelper.GetTemporaryVariableName();
                    JsAst.Seq([JsAst.DefValue(varName, JsAst.Void()), JsAstHelper.DelayAssignment(call, JsAst.LocalRef(varName, None())), JsAst.Call(op, JsAst.LocalRef(varName, None()) :: rest)]).Transform()
                | Call(OpCode as op, head :: (Call(MethodRef(Seq,  _), _) as call) :: []) => 
                    def varName = JsAstHelper.GetTemporaryVariableName();
                    JsAst.Seq([JsAst.DefValue(varName, JsAst.Void()), JsAstHelper.DelayAssignment(call, JsAst.LocalRef(varName, None())), JsAst.Call(op, [head, JsAst.LocalRef(varName, None())])]).Transform()
                | Call(OpCode("==="), something :: Literal(Null) :: []) 
                | Call(OpCode("==="), [Literal(Null), something]) => 
                    JsAst.Call(JsAst.OpCode("||"), 
                               [JsAst.Call(JsAst.OpCode("==="), [something, JsAst.Literal(JsLiteral.Null())]), 
                                JsAst.Call(JsAst.OpCode("==="), [JsAst.TypeOf(something), JsAst.Literal(JsLiteral.String("undefined"))])]).Transform() 
                | Call(OpCode("!=="), something :: Literal(Null) :: []) 
                | Call(OpCode("!=="), [Literal(Null), something]) => 
                    JsAst.Call(JsAst.OpCode("&&"), 
                               [JsAst.Call(JsAst.OpCode("!=="), [something, JsAst.Literal(JsLiteral.Null())]), 
                                JsAst.Call(JsAst.OpCode("!=="), [JsAst.TypeOf(something), JsAst.Literal(JsLiteral.String("undefined"))])]).Transform()                 
                
                                | Call(func, parms) when parms.OfType.[JsAst.Seq]().Any() =>
                    def newParms = parms.Select(p : JsAst => {
                        def varName = JsAstHelper.GetTemporaryVariableName();
                        match(p) {
                        | xs is Seq => (JsAst.Seq([JsAst.DefValue(varName, JsAst.Void()), JsAstHelper.DelayAssignment(xs, JsAst.LocalRef(varName, None()))]), JsAst.LocalRef(varName, None()))
                        | x => (JsAst.Void(), x)
                        }
                    }).NToList();
                    def paramInits = JsAst.Seq(newParms.Filter((i, _)=> !(i is JsAst.Void)).Map((i, _) => i));
                    def newParms = newParms.Map((_, p) => p);
                    JsAst.Seq([paramInits, JsAst.Call(func, newParms)])                    
                
                | Call(OpCode("++" as opcode), [FieldRef as field])
                | Call(OpCode("--" as opcode), [FieldRef as field]) =>
                  Call(OpCode(opcode.Substring(1)), [field, Literal_Int1])
                
                | Call(OpCode("++" as opcode), [PropertyGet as property])
                | Call(OpCode("++" as opcode), [Call(MethodRef, _) as property])
                | Call(OpCode("--" as opcode), [PropertyGet as property ])
                | Call(OpCode("--" as opcode), [Call(MethodRef, _) as property]) =>
                  Call(OpCode(opcode.Substring(1)), [property, Literal_Int1])
                  
                | _ => this
                }
            }
        }
        | Code           { CodeString : string;
            public override Write(_indent = "" : string) : string {
                $"$CodeString"
            }
        }
        | Continue       { LoopName : string;
            public override Write(_indent = "" : string) : string {
                $"continue $LoopName;"
            }
        }
        | Constructor    { Type : string;
            public override Write(_ = "" : string) : string {
                "/* TODO: implement constructor writer */"
            }
        }
        | DefFunction
          {
            Obj : JsAst;
            Parameters : list[JsAst];
            Body : JsAst;
            
            public override Write(_indent = "" : string) : string
            {
$<#function(..$(Parameters; ";"; p => p.Write(""))) { $(Body.Write("  ")) }#>
            }
        }
        | DeclFunction {
          Name : string;
          Parameters : list[JsAst];
          Body : JsAst;
          
          public override Write(_indent = "" : string) : string
          {
$<#function $Name(..$(Parameters; ";"; p => p.Write(""))) { $(Body.Write("  ")) }#>
          }
        }
        | DefValue       { Name : string; Val : JsAst;
            public override Write(_indent = "" : string) : string {
                match(this) {
                | DefValue(name, Void)                         => $<#var $(name.Replace(".", "_"))#>
                | DefValue(name, val)                          => $<#var $(name.Replace(".", "_")) = $(val.Write())#>
                }
            }
            public override Transform() : JsAst {
                match(this) {
                | DefValue(l, r) when !AllowedForAssignment.Any(al => al == r.GetType()) => JsAst.Seq([JsAst.DefValue(l, JsAst.Void()), JsAstHelper.DelayAssignment(r, JsAst.LocalRef(l, None()))]);
                | _ => this                
                }
            }            
        }
        | For            { ItName : string; Collection : JsAst; Body : JsAst;
            public override Write(_indent = "" : string) : string {
$<#
for(var $ItName in $(Collection.Write())) {
var $ItName = $(Collection.Write())[$ItName];
$(Body.Write("  "))
}#> 
            }
        }
        | Goto           { LabelId : int;
            public override Write(_ = "" : string) : string {
                "/* No goto writer implementation */"
            }
        }
        | HasType        { Obj : JsAst; TypeName : string;
          public override Write(_indent = "" : string) : string {
            $"$(Obj.Write()).constructor === $TypeName"
          }
          public override Transform() : JsAst {
            match(this) {
            | HasType(l, "Nemerle_Core_Cons[T]") => 
              JsAst.Call(JsAst.OpCode(">"),
                        [JsAst.FieldRef(l, "length", true), JsAst.Literal(JsLiteral.Integer(0))]);
            | _ => this                
            }
          }   
        }
        | If             { Cond : JsAst; Body : JsAst; ElseBody : JsAst;
            public override Write(_indent = "" : string) : string {
$<# 
if($(Cond.Write())) { 
$(Body.Write("  "))
} else {
$(ElseBody.Write("  "))
}#>
            }
            public override Transform() : JsAst {
                match(this) {
                | If(If(c, t, e), tt, ee)    => 
                  def varName = JsAstHelper.GetTemporaryVariableName();
                  JsAst.Seq([
                    JsAst.DefValue(varName, JsAst.If(c, t, e)).Transform(),
                    JsAst.If(JsAst.LocalRef(varName, None()), tt, ee)
                  ]).Transform();
                | If(Call(func, [something, If(c, t, e)]), then, els) => 
                  def varName = JsAstHelper.GetTemporaryVariableName();
                  JsAst.Seq([
                    JsAst.DefValue(varName, JsAst.If(c, t, e)).Transform(),
                    JsAst.If(JsAst.Call(func, [something, JsAst.LocalRef(varName, None())]), then, els)
                  ]).Transform();
                | If(Call(func, [If(c, t, e), something]), then, els) => 
                  def varName = JsAstHelper.GetTemporaryVariableName();
                  JsAst.Seq([
                    JsAst.DefValue(varName, JsAst.If(c, t, e)).Transform(),
                    JsAst.If(JsAst.Call(func, [JsAst.LocalRef(varName, None()), something]), then, els)
                  ]).Transform();
                | If(Call(OpCode as op, [Seq as seq, rest]), then, els) =>
                    def varName = JsAstHelper.GetTemporaryVariableName();
                    JsAst.Seq([JsAst.DefValue(varName, JsAst.Void()), JsAstHelper.DelayAssignment(seq, JsAst.LocalRef(varName, None())), JsAst.If(JsAst.Call(op, [JsAst.LocalRef(varName, None()), rest]), then, els)]).Transform();                           
                | If(Call(OpCode as op, [Call(MethodRef(Seq as seq,  m), parms), rest]), then, els)  =>             
                    def varName = JsAstHelper.GetTemporaryVariableName();
                    JsAst.Seq([JsAst.DefValue(varName, JsAst.Void()), JsAstHelper.DelayAssignment(seq, JsAst.LocalRef(varName, None())), JsAst.If(JsAst.Call(op, [JsAst.Call(JsAst.MethodRef(JsAst.LocalRef(varName, None()), m), parms), rest]), then, els)]).Transform();
                | If(Call(OpCode as op, [Call as call, rest]), then, els) =>             
                    def varName = JsAstHelper.GetTemporaryVariableName();
                    JsAst.Seq([JsAst.DefValue(varName, call), JsAst.If(JsAst.Call(op, [JsAst.LocalRef(varName, None()), rest]), then, els)]).Transform()
                | If(Seq as seq, then, els) => 
                    def varName = JsAstHelper.GetTemporaryVariableName();
                    JsAst.Seq([JsAst.DefValue(varName, JsAst.Void()), 
                               JsAstHelper.DelayAssignment(seq, JsAst.LocalRef(varName, None())), 
                               JsAst.If(JsAst.Call(JsAst.OpCode("==="), 
                                                   [JsAst.LocalRef(varName, None()), JsAst.Literal(JsLiteral.Bool(true))]), 
                                        then, els)])
                          .Transform();   
                | _ => this
                }
            }
        }
        | Indexer        { Obj : JsAst;
            public override Write(_ = "" : string) : string {
                "/* No Indexer writer implementation */"
            }
        }      
        | JustIf         { Cond : JsAst; Body : JsAst;
            public override Write(_indent = "" : string) : string {
$<# 
if($(Cond.Write())) { 
$(Body.Write("  "))
}#>
            }
            public override Transform() : JsAst {
                match(this) {
                | JustIf(Call(func, [something, If(c, t, e)]), then) => 
                  def varName = JsAstHelper.GetTemporaryVariableName();
                  JsAst.Seq([
                    JsAst.DefValue(varName, JsAst.If(c, t, e)).Transform(),
                    JsAst.JustIf(JsAst.Call(func, [something, JsAst.LocalRef(varName, None())]), then)
                  ]).Transform();
                | JustIf(Call(func, [If(c, t, e), something]), then) => 
                  def varName = JsAstHelper.GetTemporaryVariableName();
                  JsAst.Seq([
                    JsAst.DefValue(varName, JsAst.If(c, t, e)).Transform(),
                    JsAst.JustIf(JsAst.Call(func, [JsAst.LocalRef(varName, None()), something]), then)
                  ]).Transform();
                | JustIf(Call(OpCode as op, Seq as seq :: rest), then) =>
                    def varName = JsAstHelper.GetTemporaryVariableName();
                    JsAst.Seq([JsAst.DefValue(varName, JsAst.Void()), JsAstHelper.DelayAssignment(seq, JsAst.LocalRef(varName, None())), JsAst.JustIf(JsAst.Call(op, JsAst.LocalRef(varName, None()) :: rest), then)]).Transform();                           
                | JustIf(Call(OpCode as op, Call(MethodRef(Seq as seq,  m), parms) :: rest), then)  =>             
                    def varName = JsAstHelper.GetTemporaryVariableName();
                    JsAst.Seq([JsAst.DefValue(varName, JsAst.Void()), JsAstHelper.DelayAssignment(seq, JsAst.LocalRef(varName, None())), JsAst.JustIf(JsAst.Call(op, JsAst.Call(JsAst.MethodRef(JsAst.LocalRef(varName, None()), m), parms) :: rest), then)]).Transform();
                | JustIf(Call(OpCode as op, Call as call :: rest), then) =>             
                    def varName = JsAstHelper.GetTemporaryVariableName();
                    JsAst.Seq([JsAst.DefValue(varName, call), JsAst.JustIf(JsAst.Call(op, JsAst.LocalRef(varName, None()) :: rest), then)]).Transform()
                | JustIf(Seq as seq, then) => 
                    def varName = JsAstHelper.GetTemporaryVariableName();
                    JsAst.Seq([JsAst.DefValue(varName, JsAst.Void()), 
                               JsAstHelper.DelayAssignment(seq, JsAst.LocalRef(varName, None())), 
                               JsAst.JustIf(JsAst.Call(JsAst.OpCode("==="), 
                                                   [JsAst.LocalRef(varName, None()), JsAst.Literal(JsLiteral.Bool(true))]), then)])
                          .Transform();   
                | _ => this
                }
            }
        }               
        | Label          { Id : int; Body : JsAst;
            public override Write(_indent = "" : string) : string {
                $<#$(Body.Write("  "))#>
            }
        }
        | Lambda         { Name : string; Parameters : list[string]; Body : JsAst;
            public override Write(_indent = "" : string) : string {
$<#function(..$Parameters) {
$(Body.Write())
}#>
            }
        }
        | Literal        { Value : JsLiteral;
            public override Write(_ = "" : string) : string
            {
              match(this)
              {
              | Literal(Null)         => "null"
              | Literal(Integer(val)) => $"$val"
              | Literal(Float(val))   => $"$val"
              | Literal(String(val))  =>
                def escapeCharacter(c)
                {
                | '\'' => "\\\'"
                | '\"' => "\\\""
                | '\\' => "\\\\"
                | '\r' => "\\r"
                | '\n' => "\\n"
                | '\t' => "\\t"
                | '\b' => "\\b"
                | '\f' => "\\f"                
                // line separator
                | '\u2028' => "\\u2028"
                // paragraph separator
                | '\u2029' => "\\u2029"
                | '\0' => Message.Error("\\0 is not supported in JS"); ""
                | '\a' => Message.Error("\\a is not supported in JS"); ""
                | '\v' => Message.Error("\\v is not supported in JS"); ""
                | _ => c.ToString()
                }
                
                $<#"..$(val; ""; escapeCharacter)"#>;
              | Literal(Bool(val))    => $"$(val.ToString().ToLower())"
              | Literal(Regexp(pat, mod)) => $<#new RegExp($(pat.Write()), $(mod.Write()))#>
              }
            }
        }
        | LocalRef       { Name : string; Type : option[TypeVar];
            public override Write(_ = "" : string) : string {
                $<#$(Name.Replace(".", "_"))#>
            }
        }
        | MethodRef      { Obj : JsAst; Method : string;
            public override Write(_ = "" : string) : string
            {
              def delimiter = if (Obj is Literal(JsLiteral.Integer)) " " else "";
              $"$(Obj.Write())$(delimiter).$Method"
            }
        }    
        | StaticMethodRef      { Type : string; Method : string;
            public override Write(_ = "" : string) : string {
                $"$Type.$Method"
            }
        }
        | StaticRef      { Type : string; Member : string;
            public override Write(_ = "" : string) : string {
                $"$Type.$Member"
            }
        }
        | FieldRef       { Obj : JsAst; Parameter : string; IsExternal : bool;
            public override Write(_ = "" : string) : string {
                $"$(Obj.Write()).$Parameter"
            }
        }
        | PropertySet    
          {
            Obj : JsAst;
            PropertyName : string;
            Value : JsAst;
            
            public override Write(_ = "" : string) : string 
            {
              $"$(Obj.Write()).set_$PropertyName($(Value.Write()))"
            }
            
            public override Transform() : JsAst 
            {
              JsAst.Call(JsAst.MethodRef(Obj, "set_" + PropertyName), [Value]).Transform()
            }
          }
        | PropertyGet   
          {
            Obj : JsAst;
            PropertyName : string;
            
            public override Write(_ = "" : string) : string 
            {
              $"$(Obj.Write()).get_$PropertyName()"
            }
          }
        | OpCode         { Name : string;
            public override Write(_ = "" : string) : string {
                $"$Name"
            }
        }
        | Object         { Fields : list[(string * JsAst)];
            public override Write(_ = "" : string) : string {
                def fieldToObjectField((name, ast)) {
                    $"$name : $(ast.Write())"
                }
                $<#{ ..$(Fields; ", "; fieldToObjectField) }#>
            }
        }
        | Return         { Expr : JsAst;
            public override Write(_ = "" : string) : string {
                $"return $(Expr.Write())"
            }
        }
        | Seq            { Items : list[JsAst];
            public override Write(indent = "" : string) : string {
                def ss = Items.Where(i => !(i is JsAst.Void))
                              .Select(i => indent + i.Write() + ";");                
                $<#..$(ss; Environment.NewLine)#>
            }
        }
        | Switch         { Expr : JsAst; Cases : list[JsAst.SwitchCase]; DefaultExpr : JsAst;
            public override Write(_indent = "" : string) : string {
$<#switch($(Expr.Write())) {
..$(Cases; "\n"; e => e.Write("  "))
default:
  $(DefaultExpr.Write())
}#>
            }
        }
        | SwitchCase     { Id : int; Body : JsAst;
            public override Write(_indent = "" : string) : string {
$<#case $Id:
$(Body.Write("  "))
break;#>
            }
        }
        | ServerCall     { MethodName : string; TypeName : string; Parameters : list[string * JsAst]; Callback : JsAst;
            public override Write(indent = "" : string) : string {                            
              def jsparms = Parameters.Map((name, val) => $"$name :' + JSON.stringify($(val.Write())) + '");
              def callback = Callback.Write().TrimEnd(';');
$<#$$.ajax({
$(indent)url: '/$TypeName/$MethodName',
$(indent)type: 'POST',
$(indent)dataType: 'json',
$(indent)contentType: 'application/json; charset=utf-8',
$(indent)data: '{..$jsparms}',
$(indent)success: function(result) { 
  $(callback)(nweb.utils.toTypedObject(result));
  nweb.invalidate();
}
$(indent)});
#>
            }
        }    
        | Ternary        { Cond : JsAst; Body : JsAst; ElseBody : JsAst;
            public override Write(_ : string) : string {
                $"($(Cond.Write()) ? $(Body.Write()) : $(ElseBody.Write()))"
            }
        }
        | This           {
            public override Write(_ = "" : string) : string {
                "self"
            }
        }
        | Throw          { Obj : JsAst;
            public override Write(_ = "" : string) : string {
                $"throw $(Obj.Write())"
            }
        }
        | Try            { Body : JsAst; Handler : JsAst;
            public override Write(_indent = "" : string) : string {
$<#
try {
$(Body.Write("  "))
} catch {
$(Handler.Write("  "))
}#>
            }
        }
        | TryFinally     { Body : JsAst; Handler : JsAst;
            public override Write(_indent = "" : string) : string {
$<#try {
$(Body.Write("  "))
} finally {
$(Handler.Write("  "))
}#>
            }
        }
        | Tuple          { Args : list[JsAst];
          public override Write(_indent = "" : string) : string {
            def values = Args.MapI((i, a) => $"$i: $(a.Write())");
            $<#{..$values}#>
          }
        }
        | TupleIndexer          { Obj : JsAst; Pos : int;
          public override Write(_indent = "" : string) : string {            
            $<#$(Obj.Write())[$Pos]#>
          }
        }
        | TypeOf         { Expr : JsAst;
            public override Write(_ = "" : string) : string {
                $<#typeof $(Expr.Write())#>
            }
        }
        | Undefined      {
            public override Write(_ = "" : string) : string {
                <#"undefined"#>
            }
        }
        | UnaryOperator  { Op : string; Obj : JsAst;
            public override Write(_ = "" : string) : string {                
                $"$Op$(Obj.Write())"
            }
        }
        | Void           {
            public override Write(_ = "" : string) : string {
                ""
            }
        }
            
        | While          { Cond : JsAst; Body : JsAst;
            public override Write(_indent = "" : string) : string {
$<#while($(Cond.Write())) {
$(Body.Write("  "))
}#>
            }
        }
        | WhileNamed     { Cond : JsAst; Body : JsAst; Name : string;
            public override Write(_indent = "" : string) : string {
$<#$Name: while($(Cond.Write())) {
$(Body.Write("  "))
}#>  
            }
        }
        | NotImpl { 
            Val : string;
            public this() {
                Val = "";
            }
            public override Write(_ = "" : string) : string {
                $<#"Not implemented: $Val "#>
            }
        }
        
        public abstract Write(_indent = "" : string) : string { string.Empty; };
        public virtual Transform() : JsAst { this }
        public static AllowedForAssignment : list[Type] =
        [
          typeof(JsAst.Call),
          typeof(JsAst.MethodRef),
          typeof(JsAst.LocalRef),            
          typeof(JsAst.Literal), 
          typeof(JsAst.Code),
          typeof(JsAst.Void), 
          typeof(JsAst.Ternary),
          typeof(JsAst.NotImpl),
          typeof(JsAst.Lambda),
          typeof(JsAst.Array),
          typeof(JsAst.StaticRef), 
          typeof(JsAst.This), 
          typeof(JsAst.Tuple),
          typeof(JsAst.TupleIndexer), typeof(JsAst.FieldRef),
          typeof(JsAst.PropertyGet),
          typeof(JsAst.ArrayIndexer),
          typeof(JsAst.Label),
          typeof(JsAst.Goto),
        ];
                                         
        public static Recurse(ast : JsAst, selector : JsAst -> JsAst, topdown : bool = true) : JsAst 
        {
            def recurse = Recurse(_, selector, topdown);
            def ast' = if(topdown) selector(ast) else ast;
            
            def result = match(ast') {
            | Assign(l, r)                => JsAst.Assign(recurse(l), recurse(r))
            | Array(v)                    => JsAst.Array(v.Map(recurse))
            | ArrayIndexer(o, v)          => JsAst.ArrayIndexer(recurse(o), recurse(v))
            | BinaryOperator(o, l, r)     => JsAst.BinaryOperator(o, recurse(l), recurse(r))
            | Break                       => ast'
            | Call(func, parms)           => JsAst.Call(recurse(func), parms.Map(recurse))
            | Code(code)                  => JsAst.Code(code)
            | Constructor(type)           => JsAst.Constructor(type)
            | Continue(loopname)          => JsAst.Continue(loopname)
            | DefFunction(obj, ps, bdy)   => JsAst.DefFunction(recurse(obj), ps.Map(recurse), recurse(bdy))
            | DeclFunction(name, ps, bdy) => JsAst.DeclFunction(name, ps.Map(recurse), recurse(bdy))
            | DefValue(name, val)         => JsAst.DefValue(name, recurse(val))
            | FieldRef(obj, parm, ext)    => JsAst.FieldRef(recurse(obj), parm, ext)
            | For(it, coll, body)         => JsAst.For(it, recurse(coll), recurse(body))
            | Goto                        => ast'        
            | HasType(obj, type)          => JsAst.HasType(recurse(obj), type)
            | If(cond, then, els)         => JsAst.If(recurse(cond), recurse(then), recurse(els))
            | Indexer(obj)                => JsAst.Indexer(recurse(obj))
            | JustIf(cond, then)          => JsAst.JustIf(recurse(cond), recurse(then))
            | Label(id, body)             => JsAst.Label(id, recurse(body))
            | Lambda(name, parms, body)   => JsAst.Lambda(name, parms, recurse(body))
            | Literal                     => ast'
            | LocalRef                    => ast'
            | MethodRef(obj, meth)        => JsAst.MethodRef(recurse(obj), meth)
            | NotImpl                     => ast'
            | OpCode                      => ast'
            | Object(fields)              => JsAst.Object(fields.Map((name, body) => (name, recurse(body))))
            | PropertySet(obj, prop, val) => JsAst.PropertySet(recurse(obj), prop, recurse(val))
            | PropertyGet(obj, prop)      => JsAst.PropertyGet(recurse(obj), prop)
            | Return(expr)                => JsAst.Return(recurse(expr))
            | Seq(items)                  => JsAst.Seq(items.Map(recurse))
            | ServerCall(meth, ty, parms, callback) => JsAst.ServerCall(meth, ty, parms.Map(p => (p[0], recurse(p[1]))), recurse(callback))
            | StaticRef as s              => s
            | StaticMethodRef as s        => s
            | Switch(expr, cases, deflt)  => JsAst.Switch(recurse(expr), cases.Select(recurse).Cast.[JsAst.SwitchCase]().NToList(), recurse(deflt))
            | SwitchCase(id, case)        => JsAst.SwitchCase(id, recurse(case))
            | Ternary(cond, then, els)    => JsAst.Ternary(recurse(cond), recurse(then), recurse(els))
            | This                        => ast'
            | Throw(obj)                  => JsAst.Throw(recurse(obj))
            | Try(body, handler)          => JsAst.Try(recurse(body), recurse(handler))
            | TryFinally(body, handler)   => JsAst.TryFinally(recurse(body), recurse(handler))
            | Tuple(args)                 => JsAst.Tuple(args.Map(recurse))
            | TupleIndexer(o, pos)        => JsAst.TupleIndexer(recurse(o), pos)
            | TypeOf(expr)                => JsAst.TypeOf(recurse(expr))
            | Undefined                   => ast'            
            | UnaryOperator(op, obj)      => JsAst.UnaryOperator(op, recurse(obj))
            | Void                        => ast'        
            | While(cond, body)           => JsAst.While(recurse(cond), recurse(body))
            | WhileNamed(cnd, bdy, nme)   => JsAst.WhileNamed(recurse(cnd), recurse(bdy), nme)            
            }
            
            if(topdown) result else selector(result)
        }        
    }
}
