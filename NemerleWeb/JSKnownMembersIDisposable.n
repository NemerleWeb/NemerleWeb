using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Typedtree;

using System;
using System.Collections.Generic;
using System.Linq;

namespace NemerleWeb
{
  /// <summary>
  /// Description of JSKnownMembersIDisposable.
  /// </summary>
  module JSKnownMembersIDisposable
  {
    public Register() : void
    {
      JSKnownMembers.RegisterType(typeof(IDisposable), Handler);
    }
    
    private Handler(left : JSAst, member : IMember, parms : list[JSAst]) : option[JSAst]
    {
      if (left is JSAst.StaticMethodRef) None() else InstanceHandler(left, member, parms)
    }
    
    private InstanceHandler(left : JSAst, member : IMember, parms : list[JSAst]) : option[JSAst]
    {
      match (parms)
      {
      | [] when member.Name.ToUpperInvariant() == "DISPOSE" => 
      
      // if (left.dispose && typeof left.dispose == "function") left.dispose();
      // else left.Dispose();
      
        Some(
          JSAst.If
          (
            JSAst.Call
            (
              JSAst.OpCode("&&"),
              [
                JSAst.FieldRef(left, "dispose"),              
                JSAst.Call
                (
                  JSAst.OpCode("==="),
                  [
                    JSAst.TypeOf(JSAst.FieldRef(left, "dispose")),
                    JSAst.Literal(JSLiteral.String("function"))
                  ]
                )
              ]
            ),
            left.JSMethodCall("dispose", parms),
            left.ExternalMethodCall(<#Dispose[""]#>, parms)
          ))
      
      | _ => None()
      }
    }
  }
}
