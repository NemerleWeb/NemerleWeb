using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Typedtree;
using NemerleWeb.Utils;

using System;
using System.Collections.Generic;
using System.Linq;

namespace NemerleWeb
{
  module JsKnownMembersEventsDSL
  {
    public Register() : void
    {
      JsKnownMembers.RegisterType(typeof(NemerleWeb.Events), Handler);      
    }
    
    private Handler(_left : JsAst, member : IMember, parms : list[JsAst]) : option[JsAst]
    {
      match (parms)
      {
      | [eventName, JsAst.Literal(JsLiteral.String(context)), callback] =>
        match (member.Name)
        {
        | "Handle" => 
          def cb = CreateCallback(callback);
          def context = GetContext(context);
          def code = $<#$$($context).bind($(eventName.Write()), (($(cb.Write())))())#>;
          Some(JsAst.Code(code))
        | "HandleOnce" => 
          def tempVarName = JsAstHelper.GetTemporaryVariableName();
          def context = GetContext(context);
          def cb = CreateCallback(callback);
          Some(JsAst.Code($<#
            var $tempVarName = ($(cb.Write()))();
            $$($context).bind($(eventName.Write()), function(a) {
              $tempVarName(a);
              $$($context).unbind($(eventName.Write()), $tempVarName);
            });
          #>))
        | _ => None()
        }
      | [eventName, JsAst.Literal(JsLiteral.String(context)), untilName, callback] =>
        match(member.Name)
        {
        | "HandleUntil" =>
          def tempVarName = JsAstHelper.GetTemporaryVariableName();
          def eventName = eventName.Write();
          def context = GetContext(context);
          def cb = CreateCallback(callback);
          Some(JsAst.Code($<#
            var $tempVarName = ($(cb.Write()))();
            $$($context).bind($eventName, $tempVarName)
                    .bind($(untilName.Write()), function() {
              $$($context).unbind($eventName, $tempVarName);
            });
          #>))
        | _ => None();
        }
      | [] =>
        match(member.Name)
        {
        | "Invalidate" => Some(JsAst.Code("nweb.invalidate()"))
        | _ => None();
        }
      | _ => Message.FatalError("Unknown Events expression")
      }
    }
    
    private CreateCallback(ast : JsAst) : JsAst
    {
      JsAstHelper.MakeReturningFunction(ast);
    }
    
    private GetContext(context : string) : string
    {
      if(context == "this" || context == "window" || context == "document") $<#$context#> else $<#"$context"#>;
    }
  }
}
