using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace NemerleWeb
{
  public module JsAstHelper
  {     
    allowedCallTargets : list[Type] = [typeof(JsAst.LocalRef), typeof(JsAst.Literal)];
    mutable temporaryVariableCounter : int = 0;
    
    public TransformBottomUp(ast : JsAst) : JsAst
    {   
        JsAst.Recurse(ast, a => a.Transform(), false)
    }
    
    public RemoveEmptyBranches(ast : JsAst) : JsAst
    {
        JsAst.Recurse(ast, a : JsAst =>
        match(a) { 
        | While(_, Void) 
        | While(_, Undefined) => JsAst.Void()
        | If(cond, then, Undefined) 
        | If(cond, then, Void) => JsAst.JustIf(cond, then)
        | JustIf(_, Void) 
        | JustIf(_, Undefined) => JsAst.Void()        
        | _ => a
        }, false);
    }
    
    public FlattenAndRemoveVoids(ast : JsAst) : JsAst    
    {
        JsAst.Recurse(ast, a : JsAst => {
            def flatten(a' : JsAst) : JsAst {
            | Seq(s0) when s0.Any(e => e is JsAst.Seq)  => 
                def r = s0.Flatten(e => 
                    match(e) {
                    | JsAst.Seq(xs) => xs
                    | x => [x]
                });
                flatten(JsAst.Seq(r.Filter(rr => !(rr is JsAst.Void))));
            | _ => a'
            }
            flatten(a);
        });
    }
    
    public LabelsToNamedWhile(ast : JsAst) : JsAst 
    {
        def gotos = IterateAST(ast).OfType.[JsAst.Goto]().ToDictionary(k => k.LabelId);
        def r = JsAst.Recurse(ast, a : JsAst => 
        match(a) {
        | Label(id, body) when gotos.ContainsKey(id) => JsAst.WhileNamed(JsAst.Literal(JsLiteral.Bool(true)), JsAst.Seq([body, JsAst.Break()]), "l" + id.ToString()); //ConvertLabelToSwitch(l)
        | Label(_, body)  => body
        | Goto(id)        => JsAst.Continue("l" + id.ToString())
        | _ => a
        });        
        r
    }
    
    public DelayAssignment(expr : JsAst, left : JsAst) : JsAst
    {
        def delayAssignment = DelayAssignment(_, left);
        match(expr) {
        | Seq(exprs) => 
            def newExprs = match(exprs.Rev()) {
            | last :: allButLast => delayAssignment(last) :: allButLast
            | r => r
            }
            JsAst.Seq(newExprs.Rev())
        | TryFinally(body, handler) => JsAst.TryFinally(delayAssignment(body), handler)
        | Assign(l, r)     => JsAst.Assign(l, delayAssignment(r))
        | If(c, t, e)      => JsAst.If(c, delayAssignment(t), delayAssignment(e))
        | ServerCall(m, t, ps, c) => JsAst.ServerCall(m, t, ps.Map(p => (p[0], delayAssignment(p[1]))), delayAssignment(c))
        | Switch(e, cases, deflt) => JsAst.Switch(e, cases.Map(c => JsAst.SwitchCase(c.Id, delayAssignment(c.Body))), delayAssignment(deflt))
        | WhileNamed(c, b, n) => 
            def newBody = match(b) {
            | Seq(bodyItems) => 
                def newItems = match(bodyItems.Rev()) {
                | Break :: secondToLast :: rest => JsAst.Break() :: delayAssignment(secondToLast) :: rest;
                | last :: rest => delayAssignment(last) :: rest;
                | [] => []
                }
                JsAst.Seq(newItems.Rev())
            | something => JsAst.Assign(left, delayAssignment(something))
            }
            JsAst.WhileNamed(c, newBody, n)
        | e when JsAst.AllowedForAssignment.Any(al => al == e.GetType()) => JsAst.Assign(left, e)
        | Undefined
        | Void => JsAst.Void()
        | _ => expr
        }
    }
    
    public MakeReturn(ast : JsAst) : JsAst 
    {
      | Void => ast
      | _ => JsAst.Seq([JsAst.DefValue("__returnValue", JsAst.Void()), DelayAssignment(ast, JsAst.LocalRef("__returnValue", None())), JsAst.Return(JsAst.LocalRef("__returnValue", None()))])        
    }
    
    public MakeReturningFunction(ast : JsAst) : JsAst
    {
      | _ => JsAst.DefFunction(JsAst.Void(), [], MakeReturn(ast))
    }
    
    public Append(ast : JsAst, toAppend : JsAst) : JsAst
    {
      match(ast) 
      {
      | Seq(xs) => JsAst.Seq(xs.Append([toAppend]))
      | _ => JsAst.Seq([ast, toAppend])
      }
    }
    
    public GetTemporaryVariableName() : string 
    {
        temporaryVariableCounter++;
        $"_N_T_temp_var_$temporaryVariableCounter";
    }
    
    public IterateAST(ast : JsAst) : List[JsAst] 
    {
        def lst = List();
        _ = JsAst.Recurse(ast, a => {
            lst.Add(a);
            a
        });
        lst
    }
  }
}
