using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Extensions;
using Nemerle.Compiler.Typedtree;
using Nemerle.Imperative;

using System;
using System.Globalization;
using System.Collections.Generic;
using System.Linq;

namespace NemerleWeb
{
  public module JSAstHelper
  {     
    mutable temporaryVariableCounter : int = 0;
    
    public TransformBottomUp(ast : JSAst) : JSAst
    {   
        JSAst.Recurse(ast, (a, _depth) => a.Transform(), 0, false)
    }
    
    public RemoveEmptyBranches(ast : JSAst) : JSAst
    {
        JSAst.Recurse(ast, (a : JSAst, _depth) =>
        match(a) { 
        | While(_, Void) 
        | While(_, Undefined) => JSAst.Void()
        | If(cond, then, Undefined) 
        | If(cond, then, Void) => JSAst.JustIf(cond, then)
        | JustIf(_, Void) 
        | JustIf(_, Undefined) => JSAst.Void()        
        | _ => a
        }, 0, false);
    }
    
    public FlattenAndRemoveVoids(ast : JSAst) : JSAst    
    {
        JSAst.Recurse(ast, (a : JSAst, _depth) => {
            def flatten(a' : JSAst) : JSAst {
            | Seq(s0) when s0.Any(e => e is JSAst.Seq)  => 
                def r = s0.Flatten(e => 
                    match(e) {
                    | JSAst.Seq(xs) => xs
                    | x => [x]
                });
                flatten(JSAst.Seq(r.Filter(rr => !(rr is JSAst.Void))));
            | _ => a'
            }
            flatten(a);
        });
    }
    
    public LabelsToNamedWhile(ast : JSAst) : JSAst 
    {
        def gotos = IterateAST(ast).OfType.[JSAst.Goto]()
                                   .Select(k => k.LabelId)
                                   .Distinct()
                                   .ToDictionary(k => k);
      
        def r = JSAst.Recurse(ast, (a : JSAst, _depth) => 
          match(a)
          {
          | Label(id, body) when gotos.ContainsKey(id.ToString()) =>
            def functionName = "_nweb_lbl_l" + id.ToString();
            JSAst.Seq([
              JSAst.DeclFunction(functionName, [], MakeReturn(body)),
              JSAst.Call(JSAst.LocalRef(functionName, None()), [])
            ]);
            //JSAst.WhileNamed(JSAst.Literal(JSLiteral.Bool(true)), JSAst.Seq([body, JSAst.Break()]), "l" + id.ToString()); //ConvertLabelToSwitch(l)
          | Label(_, body)  => body
          | Goto(id)        => 
            def functionName = "_nweb_lbl_l" + id.ToString();
            JSAst.Call(JSAst.LocalRef(functionName, None()), [])
          | _ => a
          });        
        r
    }
        
    public GotosToSwitch(ast : JSAst) : JSAst
    {
      def anyGotos = IterateAST(ast).OfType.[JSAst.Goto]().Any();
      if(anyGotos) 
      {
        mutable exprList = [];
        def labelMap = Dictionary();
        def currentLabelVar = GetTemporaryVariableName();
        def loopName = "__gotoSwitchLoop";
        def labelIncomingCount = Dictionary.[string, int]();
        def incrementIncoming(label, inc = 1) {
          if(labelIncomingCount.ContainsKey(label))
              labelIncomingCount[label]++;
            else
              labelIncomingCount.Add(label, inc)
        }
        
        mutable labelCounter = 0;        
        
        def getNewLabel() {
          ++labelCounter;
          $"__lbl__$labelCounter"
        }
        def getGotoToLabel(label) {
          JSAst.Seq([
            JSAst.Assign(JSAst.LocalRef(currentLabelVar, None()), JSAst.Literal(JSLiteral.String("__CHECK_LABEL__" + label))),
            JSAst.Continue(loopName)
          ]);
        }
        
        def f(current : JSAst, next : option[string]) : string
        {
          match(current)
          {
          | Label(id, Seq as seq)
          | Seq as seq with id = -1 =>
            if(seq.Items.Any()) 
            {
              def seqList = seq.Items.ToList();
              def reversed = Enumerable.Reverse(seqList);
              mutable currentNext = next;
              foreach(s in reversed)
                  currentNext = Some(f(s, currentNext));
              when(!labelMap.ContainsKey(id.ToString()))
                labelMap.Add(id.ToString(), currentNext.Value);
              currentNext.Value;
            } else ""
          | Label(id, body) =>
            def label = f(body, next);
            when(!labelMap.ContainsKey(id.ToString()))
              labelMap.Add(id.ToString(), label);
            label;
          | If(cond, bdy, els) =>
            def bdyLabel = f(bdy, next);
            def elsLabel = f(els, next);
            def newExpr = JSAst.If(cond, getGotoToLabel(bdyLabel), getGotoToLabel(elsLabel));
            def newLabel = getNewLabel();
            exprList ::= new (label = newLabel, expr = newExpr, next = next, ifBlocks = Some(bdyLabel, elsLabel));
            newLabel;
          | Goto(id) =>
            def newLabel = getNewLabel();            
            exprList ::= new (label = newLabel, expr = getGotoToLabel(id), next = next, ifBlocks = None());
            incrementIncoming("__CHECK_LABEL__" + id);
            newLabel;
          | TryFinally(body, _handler) => 
            f(body, next);            
          | _ =>
            def newLabel = getNewLabel();
            exprList ::= new (label = newLabel, expr = current, next = next, ifBlocks = None());
            newLabel;
          }
        }
        
        _ = f(ast, None());
                        
        def createSwitchCase(e) {
          match(e.next)
          {
          | Some(next) => JSAst.Seq([
              e.expr,
              getGotoToLabel(next)
            ]);
          | None() => 
            JSAst.Seq([
              e.expr,
              JSAst.BreakNamed(loopName)
            ]);
          }
        }
        def labelToExprMap = Dictionary();
                
        def getIncomingCount(label) {
          mutable incomingCount = 0;
          if(labelIncomingCount.TryGetValue(label, out incomingCount))
            incomingCount
          else 0
        }
        
        foreach(a in exprList) {
          match((a.expr, a.next, a.ifBlocks)) 
          {
          | (If, _, Some((ifLbl, elseLbl))) => 
            //Always render 'if' cases
            incrementIncoming(ifLbl, 2);
            incrementIncoming(elseLbl, 2);         
          | (_, Some(nextLabel), _) => incrementIncoming(nextLabel);
          | _ => ()
          }
          labelToExprMap.Add(a.label, a);
        }
        
        def kvps = labelIncomingCount.Select(kvp => (kvp.Key, kvp.Value)).ToList();
        labelIncomingCount.Clear();
        
        def updateLabel(label)
        {
          if(label.StartsWith("__CHECK_LABEL__")) 
          {
            def label = label.Replace("__CHECK_LABEL__", "");
            if(labelMap.ContainsKey(label)) labelMap[label] else label;
          } else label;
        }
        
        foreach((key, value) in kvps)
          incrementIncoming(updateLabel(key), value);
        
        def divide(lst, first) {
          match(lst) {
          | [] => ([], [])
          | [x] => if(getIncomingCount(x.label) == 1 || first) ([x], []) else ([], [x])
          | x :: rest =>       
            if(getIncomingCount(x.label) == 1 || first) {
              def (l, r) = divide(rest, false);
              (x :: l, r) 
            } else {
              ([], lst)
            }
          }
        }    
    
        def combine(lst) {
        | [] => []
        | [x] => [x]
        | xs => 
          match(divide(xs, true))  {
          | ([], r) => combine(r)
          | ([l], r) => 
            new (label = l.label, expr = l.expr, next = l.next, ifBlocks = None()) :: combine(r)          
          | (l :: ls, r) => 
            def last = ls.LastOrDefault();
            new (label = l.label, expr = JSAst.Seq(l.expr :: ls.Map(x => x.expr)), next = last.next, ifBlocks = None()) :: combine(r)
          }       
        }
             
        def exprListCombined = combine(exprList).ToList();
        def firstLabel = if(exprListCombined.Count > 0) exprListCombined[0].label else "";
        
        def resultAst = JSAst.Seq([
          JSAst.DefValue(currentLabelVar, JSAst.Literal(JSLiteral.String(firstLabel))),
          JSAst.WhileNamed(JSAst.Literal(JSLiteral.Bool(true)), 
            JSAst.Switch(
              JSAst.LocalRef(currentLabelVar, None()),               
              exprListCombined.Select(e => JSAst.SwitchCase(e.label, createSwitchCase(e))).NToList(),
              JSAst.Void()),
            loopName)
        ]);
        def resultAst' = JSAst.Recurse(resultAst, (ast : JSAst, _) => 
          match(ast) {
          | Assign(l, Literal(JSLiteral.String(label))) 
            when label.StartsWith("__CHECK_LABEL__") => 
            def label = label.Replace("__CHECK_LABEL__", "");
            def label = if(labelMap.ContainsKey(label)) labelMap[label] else label;
            JSAst.Assign(l, JSAst.Literal(JSLiteral.String(label)))
          | _ => ast
          }
        );
        
        resultAst'
      }
      else 
        ast
    }
    
    public DelayAssignment(expr : JSAst, left : JSAst) : JSAst
    {
        def delayAssignment = DelayAssignment(_, left);
        match(expr)
        {
        | Seq(exprs) => 
            def newExprs =
              match(exprs.Rev())
              {
              | (JSAst.Unpack as u) :: (JSAst.Call as c) :: rest => u :: delayAssignment(c) :: rest
              | last :: allButLast => delayAssignment(last) :: allButLast
              | r => r
              };
            JSAst.Seq(newExprs.Rev())
        | TryFinally(body, handler) => JSAst.TryFinally(delayAssignment(body), handler)
        | Assign(l, r)     => JSAst.Assign(l, delayAssignment(r))
        | If(c, t, e)      => JSAst.If(c, delayAssignment(t), delayAssignment(e))
        | ServerCall(m, t, ps, c) => JSAst.ServerCall(m, t, ps.Map(p => (p[0], delayAssignment(p[1]))), delayAssignment(c))
        | Switch(e, cases, deflt) => JSAst.Switch(e, cases.Map(c => JSAst.SwitchCase(c.Id, delayAssignment(c.Body))), delayAssignment(deflt))
        | WhileNamed(c, b, n) => 
            def newBody =
              match(b)
              {
              | Seq(bodyItems) => 
                  def newItems =
                    match(bodyItems.Rev())
                    {
                    | Break :: secondToLast :: rest => JSAst.Break() :: delayAssignment(secondToLast) :: rest;
                    | last :: rest => delayAssignment(last) :: rest;
                    | [] => []
                    };
                  JSAst.Seq(newItems.Rev())
              | something => JSAst.Assign(left, delayAssignment(something))
              };
            JSAst.WhileNamed(c, newBody, n)
        | Label(id, body) => JSAst.Label(id, delayAssignment(body))
        | Void => JSAst.Void()
        | e when JSAst.AllowedForAssignment.Contains(e.GetType()) => JSAst.Assign(left, e)
        | Undefined
        | _ => expr
        }
    }
    
    public MakeReturn(ast : JSAst) : JSAst 
    {
      | Void => ast
      | _ =>
        JSAst.Seq([
          JSAst.DefValue("__returnValue", JSAst.Void()),
          DelayAssignment(ast, JSAst.LocalRef("__returnValue", None())),
          JSAst.Return(JSAst.LocalRef("__returnValue", None()))
        ])
    }
    
    public MakeReturningFunction(ast : JSAst) : JSAst
    {
      | _ => JSAst.DefFunction(JSAst.Void(), [], MakeReturn(ast))
    }
    
    public Append(ast : JSAst, toAppend : JSAst) : JSAst
    {
      match(ast) 
      {
      | Seq(xs) => JSAst.Seq(xs.Append([toAppend]))
      | _ => JSAst.Seq([ast, toAppend])
      }
    }
    
    // Call toString JS method with some optimization for strings.
    public JSToString(arg : JSAst) : JSAst
    {
      | JSAst.Literal(JSLiteral.String) => arg        
      | JSAst.LocalRef(_, Some(type)) when type.TryRequire(JSClass.StringType) => arg
      | _ => arg.JSMethodCall("toString", [])
    }
    
    
    
    /// Call user ToString if exist
    public CallToString(
      typeInfo : TypeInfo,
      [NotNull] left : JSAst,
      [NotNull] method : IMember,
      [NotNull] parms : list[JSAst]) : JSAst
    {
      // If type has method ToString, use it
      if (typeInfo != null && !AssemblyHelpers.IsFrameworkAssembly(typeInfo))
        left.MethodCall(method, parms);
      else
        JSAstHelper.JSToString(left)
    }
    
    public GetTemporaryVariableName() : string 
    {
        temporaryVariableCounter++;
        $"_N_T_temp_var_$temporaryVariableCounter";
    }
    
    public IterateAST(ast : JSAst) : List[JSAst] 
    {
        def lst = List();
        _ = JSAst.Recurse(ast, (a, _depth) => {
            lst.Add(a);
            a
        });
        lst
    }
    
    // HACK: Handle properties and lambda according to name
    public IsSpecialMethod(method : string) : bool
    {
      method.StartsWith("set_") || method.StartsWith("get_") || method == "apply" || method == "apply_void"
    }
    
    /// If parameters has value, use it and access method via dictionary
    public Method(method : string, parametersType : option[list[TParameter]]) : string
    {
      if (IsSpecialMethod(method))
        method
      else
        match(parametersType)
        {
        | Some(pt) => $"$method[$(MethodSignature(pt))]"
        | _ => method
        }
    }
    
    public MethodSignature(parametersType : list[TParameter]) : string
    {
      | [] => <#""#>
      | _ =>
        def typeOrTypeInfo(p)
        {
          (p.Type.TypeInfo : object ?? p.Type).ToString()
        }
      
        def functionSignature = $<#..$(parametersType; ", "; typeOrTypeInfo)#>;
        $<#"$functionSignature"#>
    }
    
    public MethodSignature(parametersType : list[TExpr]) : string
    {
      | [] => <#""#>
      | _ =>
        def typeOrTypeInfo(p)
        {
          (p.Type.TypeInfo : object ?? p.Type).ToString()
        }
      
        def functionSignature = $<#..$(parametersType; ", "; typeOrTypeInfo)#>;
        $<#"$functionSignature"#>
    }
    
    public MethodParameters(m : IMethod) : option[list[TParameter]]
    {
      if (AssemblyHelpers.IsFrameworkAssembly(m.DeclaringType) ||
          m.IsCustomAttributeDefined("NemerleWeb.IgnoreAttribute") ||
          m.DeclaringType.IsCustomAttributeDefined("NemerleWeb.JSApiAttribute"))
        None()
      else
        Some(m.Header.Parameters)
    }
    
    public EscapeString(val : string) : string
    {
      def escapeCharacter(c)
      {
      | '\'' => "\\\'"
      | '\"' => "\\\""
      | '\\' => "\\\\"
      | '\r' => "\\r"
      | '\n' => "\\n"
      | '\t' => "\\t"
      | '\b' => "\\b"
      | '\f' => "\\f"                
      // line separator
      | '\u2028' => "\\u2028"
      // paragraph separator
      | '\u2029' => "\\u2029"
      | '\0' => "\\0"
      | '\a' => "\\x07"
      | '\v' => "\\x0B"
      | _ => c.ToString(CultureInfo.InvariantCulture)
      }
                
      $<#"..$(val; ""; escapeCharacter)"#>;
    }
  }
}
