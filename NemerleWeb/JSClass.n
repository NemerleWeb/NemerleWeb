using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Globalization;
using System.Linq;
using System.Text;

namespace NemerleWeb
{
  module JSClassHelper
  {
    public HasBase(ti : TypeInfo) : bool 
    {
      ti.BaseType != null &&
      ti.BaseType.FullName != "System.Object" &&
      ti.BaseType.FullName != "Nemerle.Builtins.Function" &&
      ti.BaseType.FullName != "Nemerle.Builtins.FunctionVoid" &&
      !ti.BaseType.IsInterface
    }
  }
    
  /// Defines settings for JSclass 
  internal module JSClassSettings
  {
    public JSApiRoots : SortedSet[string] = SortedSet(InvertedComparer());
    
    private class InvertedComparer : IComparer[string]
    {
      public Compare(l : string, r : string) : int
      {
          r.CompareTo(l);
      }
    }
  }
  
  [Record(NotNull = [".*"])]
  internal class JSClass
  {
      public ClassType : TypeBuilder { get; }
      public Indent : string    { get; }      
      public Typer : Typer { get; }
      
      public static StringType : TypeVar { get; set; }
      public static IEnumerableType : TypeVar { get; set; }        
      public static IPageType : TypeVar { get; set; }
      public static ObjectType : TypeVar { get; set; }
                    
      public Fields : IEnumerable[IField]
      {
        [Memoize]
        get
        {
          ClassType.GetFields(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic)
                   .Where(f => f.Name != "server" && f.Name != "__constructorParams")
        }
      }
      
      public StaticFields : IEnumerable[IField]
      {
        get
        {
          ClassType.GetFields(BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic)
                   .Where(f => f.Name != "server" && f.Name != "__constructorParams")
        }
      }
              
      public Properties : IEnumerable[IProperty] 
      {
        [Memoize]
        get
        {
          ClassType.GetProperties(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic)
                   .Where(_ is PropertyBuilder)
                   .Where(prop =>
                     {
                       // Filter out properties not belonging to this class
                       if (!JSClassHelper.HasBase(ClassType)) true
                       else
                       {                          
                         def declaringType =
                           prop.GetGetter()?.DeclaringType ?? prop.GetSetter()?.DeclaringType;
                         
                         ClassType.FullName == declaringType.FullName
                       }
                     })
                   .Where(p => p.Name != "server")
        }
      }
      
      public StaticProperties : IEnumerable[IProperty] 
      {
        get
        {
          ClassType.GetProperties(BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic)
                    .Where(_ is PropertyBuilder)
                    .Where(p => p.Name != "server")
        }
      }      
              
      public Methods : IEnumerable[IMethod] 
      {
        [Memoize]
        get
        {            
          def methods = ClassType.GetMethods(BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic);
          FilterMethods(methods);
        }
      }
      
      public StaticMethods : IEnumerable[IMethod] 
      {
        get
        {            
          def methods = ClassType.GetMethods(BindingFlags.DeclaredOnly | BindingFlags.Static| BindingFlags.Public | BindingFlags.NonPublic);
          FilterMethods(methods);
        }
      }
      
      NestedClasses : IEnumerable[JSClass]
      {            
        get
        {
          def nested = ClassType.DeclaredNestedTypes
                                .Where(c => c.Name != "Server" && c.Name != "ServerProxy") //Not server
                                .Where(c => !c.Name.StartsWith("_N__N_")) //Not generated class
                                .Select(c => JSClass(c, Indent, Typer));
          nested
        }
      }
              
      IsPage : bool { get { !ClassType.Name.StartsWith("_N_") } }
        
      public Constructors : IEnumerable[IMethod]
      {
        get
        {
          def constructors = ClassType.GetConstructors(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);              
          constructors
        }
      }
        
      public Write() : string 
      {
        def meta = JSClassMeta();
        def properTypeName = GetProperName(ClassType);
        def parentPtr = "this";
        def bodyIndent = Indent + "  ";
        def properties = GetProperties(bodyIndent, parentPtr, meta);        
        def staticProperties = GetStaticProperties(Indent, meta);        
        def fields = GetFields(bodyIndent, parentPtr, meta);        
        def staticFields = GetStaticFields(Indent);
        def constructorsBody = GetConstructorsBody(Indent, bodyIndent);
        def callConstrutor = GetCallConstructor(bodyIndent);
        def staticConstructorBody = GetStaticConstructorBody(Indent);
        def methods = GetMethods(bodyIndent, parentPtr, true);
        def staticMethods = GetStaticMethods(Indent);
        def nestedClasses = NestedClasses.ToList();
        def nestedClassesString = GenerateNestedClasses(nestedClasses);
        
        // This is needed to make labmda object behave as regular function
        def returning = match(ClassType.BaseType?.Name)
        {
        | "Function" => bodyIndent + 
/*<#return function() {
return self.apply.apply(self, arguments);
}#>*/
<#return self.apply;#>
        | "FunctionVoid" => bodyIndent + 
/*<#return function() {
return self.apply_void.apply(self, arguments);
}#>*/
<#return self.apply_void;#>
        | _ => ""
        };

 $<#
$nestedClassesString
$(Indent)var $properTypeName$$ctor = {};
$constructorsBody
$(Indent)function $properTypeName() {
$(bodyIndent)var self = this;
$properties
$methods
$fields
$callConstrutor
$properties
$methods
{{{SignalR}}}
$(meta.WriteToJS(Indent))
$returning
$(Indent)}
$staticFields
$staticMethods
$staticProperties
$staticConstructorBody
#>
      }
      
      GenerateProperties(indent : string, parentPtr : string, properties : IEnumerable[IProperty], meta : JSClassMeta) : string 
      {
        def propStrings = properties.Select(p =>
          {
            when (p.IsIndexer)
              Message.Error(p.Location, $"Indexed properties are not supported, $p");
            
            meta.Properties.Add(JSClassMemberMeta(p.Name, p.GetModifiers()
                                                           .CustomAttributes
                                                           .Select(a => a.ToString())
                                                           .ToList()));
              
            def sb = StringBuilder();
            
            when (p.GetGetter() != null)
            {
              def getterBody = TranslateMethodBody(p.GetGetter(), indent + "  ");
              _ = sb.AppendLine(
$<#$indent$parentPtr.get_$(p.Name) = function() {
$(indent)  var self = this;
$getterBody
$indent};#>);
            }
          
            when (p.GetSetter() != null)
            {
              def setterBody = TranslateMethodBody(p.GetSetter(), indent + "  ");
              _ = sb.AppendLine(
$<#$indent$parentPtr.set_$(p.Name) = function(value) {
$(indent)  var self = this;
$setterBody
$indent};#>);
            }
            
            sb.ToString()
          });
          
        $<#..$(propStrings; "\n")#>;
      }
      
      GetProperties(indent : string, parentPtr : string, meta : JSClassMeta) : string
      {
        GenerateProperties(indent, parentPtr, Properties, meta)
      }
      
      GetStaticProperties(indent : string, meta : JSClassMeta) : string 
      {
        GenerateProperties(indent, GetProperName(ClassType), StaticProperties, meta)
      }
      
      FieldValue(field : IField) : string
      {
        def field = field :> FieldBuilder;
        if(field.Ast.Initializer != null)
        {
          def integer(v)
          {
            if (v.is_negative)
              (unchecked(v.val :> long) * -1).ToString(CultureInfo.InvariantCulture)
            else
              v.val.ToString(CultureInfo.InvariantCulture)
          }
          
          def makeInitializer(expr)
          {
          | PExpr.Literal(Literal.Bool(val)) => val.ToString(CultureInfo.InvariantCulture).ToLower()
          | PExpr.Literal(Literal.Char(val)) => val.ToString()
          | PExpr.Literal(Literal.Decimal(val)) => (val :> ulong).ToString()
          | PExpr.Literal(Literal.Double(val)) => val.ToString(CultureInfo.InvariantCulture)
          | PExpr.Literal(Literal.Enum(Integer as i, _, _)) => integer(i)
          | PExpr.Literal(Literal.Float(val)) => val.ToString(CultureInfo.InvariantCulture)
          | PExpr.Literal(Literal.Integer as i) => integer(i)
          | PExpr.Literal(Literal.String(val)) => JSAstHelper.EscapeString(val)
          | PExpr.ListLiteral(elements) => $<#[..$(elements; ", "; makeInitializer)]#>
          | PExpr.Tuple(elements) => $<#[..$(elements; ", "; makeInitializer)]#>
          | PExpr.Literal(Literal.Void)          
          | PExpr.Literal(Literal.Null)          
          | _ => "null"
          }
          
          makeInitializer(field.Ast.Initializer)
        }
        else
        {  
          def type = field.GetMemType();
          def isArray = TypeIsArray(type);
          if(isArray) 
            "null" 
          else
          {
            match(type.TypeInfo?.FullName)
            {
            | "System.Byte"
            | "System.SByte"
            | "System.Char"
            | "System.Int16"
            | "System.UInt16"
            | "System.Int32"
            | "System.UInt32"
            | "System.Int64"
            | "System.UInt64"
            | "System.Single"
            | "System.Double"
            | "System.Decimal"=> "0"
            | _ => "null"
            }
          }
        }
      }
      
      GenerateFields(indent : string, parentPtr : string, fields: IEnumerable[IField], meta : JSClassMeta) : string
      {
        def fieldStrings = fields.Select(f => {
          meta.Fields.Add(JSClassMemberMeta(f.Name, f.GetModifiers()
                                                     .GetCustomAttributes()
                                                     .Select(a => a.ToString())
                                                     .ToList()));
          $<#$indent$parentPtr.$(f.Name) = $(FieldValue(f))#>;
        });
                
        $<#..$(fieldStrings; ";\n")#>;
      }
        
      GetFields(indent : string, parentPtr : string, meta : JSClassMeta) : string 
      {
        GenerateFields(indent, parentPtr, Fields, meta)
      }
        
      GetStaticFields(indent : string) : string 
      {
        def parentPtr = GetProperName(ClassType);
        def fieldStrings = StaticFields.Select(f => 
          $<#$indent$parentPtr.$(f.Name) = $(FieldValue(f))#>);
        
        $<#..$(fieldStrings; ";\n")#>;
      }

      GetConstructorsBody(indent : string, bodyIndent : string) : string
      {
          def ctors = Constructors;
          def properTypeName = GetProperName(ClassType);
          def ctorObject = properTypeName + "$ctor";
          
          def ctorsCode = ctors.Select(
            ctor => 
            {
              def ctorBody = TranslateMethodBody(ctor, bodyIndent);              
              def ctorParameters = ctor.GetParameters().Select(p => p.Name);
              def signature = JSAstHelper.Method("", Some(ctor.Header.Parameters));
              
              def makeBody(body)
              {
                $<#
$(bodyIndent)var self = this;
$body
$indent#>
              }
              
              def writeBody =
                if(ctorBody.Trim().Length == 0)
                {
                  // Call empty base constructor if exists
                  if (ctor.Header.Parameters is [] && JSClassHelper.HasBase(ClassType))
                  {
                    def baseName = GetProperName(ClassType.BaseType.FullName);
                    makeBody($<#$bodyIndent$baseName.call(self, "");#>)
                  }
                  else
                    ""
                }
                else
                  makeBody(ctorBody);
              
              $<#$indent$ctorObject$signature = function(..$ctorParameters) {$writeBody}#>
            });
         
         $<#..$(ctorsCode; ";\n")#>
      }
      
      GetCallConstructor(indent : string) : string
      {
        def properTypeName = GetProperName(ClassType);
        def ctorObject = properTypeName + "$ctor";
          
        $"$indent$ctorObject[arguments[0]].apply(this, Array.prototype.slice.call(arguments, 1))"
      }
        
      GetStaticConstructorBody(indent : string) : string 
      {
          def ctors = ClassType.GetConstructors(BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic);
          def ctor = ctors.FirstOrDefault();
          if(ctor != null)
            TranslateMethodBody(ctor, indent)
          else
            ""
      }
      
      GenerateMethods(indent : string, parentPtr : string, hasSelf : bool, methods : IEnumerable[IMethod]) : string
      {
        def self = if(hasSelf) "" else "var self = this;";
        def methodParms(method) { method.GetParameters().Select(p => p.Name); }
        
        // Method name => signature
        def generatedMethods = Dictionary();
        
        def methodsCode = methods.Select(m =>
        {
          // Add method variable and default signature in first time
          def methodVariable =
            if (generatedMethods.ContainsKey(m.Name)) ""
            else
              $<#$(indent)$parentPtr.$(m.Name) = {};#>;
          
          def methodWithSignature = JSAstHelper.Method(m.Name, Some(m.Header.Parameters));
          
          if (generatedMethods.ContainsKey(m.Name))
          {
            // Do not add default method signature
            when (m.Header.Parameters is [])
              generatedMethods[m.Name] = None();
          }
          else
          {
            if (m.Header.Parameters is [])
              generatedMethods.Add(m.Name, None())
            else
              generatedMethods.Add(m.Name, Some(methodWithSignature))
          }
          
          if (!m.IsAbstract)
$<#$methodVariable
$(indent)$parentPtr.$methodWithSignature = function(..$(methodParms(m))) {
$(indent)  $self
$(TranslateMethodBody(m, indent + "  "))
$(indent)}#>
        else
          ""
        });
        
        // Default methods signature for first method if there are no methods without parameters
        def defaultMethodsCode = generatedMethods
          .Where(kv => kv.Value.IsSome)
          .Select(kv =>
            {
              $<#$indent$parentPtr.$(kv.Key)[""] = $parentPtr.$(kv.Value.Value)#>
            });

        $<#..$(methodsCode; "\n")
..$(defaultMethodsCode; "\n")#>
      }
        
      GetMethods(indent : string, parentPtr : string, hasSelf : bool) : string 
      {
        GenerateMethods(indent, parentPtr, hasSelf, Methods)
      }
      
      GetStaticMethods(indent : string) : string 
      {
        GenerateMethods(indent, GetProperName(ClassType), false, StaticMethods)
      }
      
      GenerateNestedClasses(nested : IEnumerable[JSClass]) : string
      {
        $"..$(nested; Environment.NewLine; _.Write())"
      }
      
      public TranslateMethodBody([NotNull] meth : IMethod, [NotNull] indent = "" : string) : string
      {
        def ast = TyperHelper.GetMethodJSAst(meth, Typer, ClassType);
        ast.Write(indent);
      }
      
      public static TypeIsArray([NotNull] typeVar : TypeVar) : bool 
      {
        typeVar.TryRequire(IEnumerableType) && !typeVar.TryRequire(StringType);
      }
      
      /// <summary>
      /// Take full name, remove prefix specified in JSClassSettings.JSApiRoots.
      /// </summary>
      public static GetProperNameForJS([NotNull] typeInfo : TypeInfo) : string
      {
        def fullName = typeInfo.FullName;
        
        // Check default, if doesn't fit, check other roots.
        def root = JSClassSettings.JSApiRoots.FirstOrDefault(root => fullName.StartsWith(root));
        
        if(root != null)
          if(fullName.Length == root.Length)
            ""
          else
            fullName.Substring(root.Length + 1)
        else
          fullName
      }
      
      public static GetProperName([NotNull] typeInfo : TypeInfo) : string 
      {
        // If type or declaring has JSApi attribute, get proper name using special method
        if(typeInfo.IsCustomAttributeDefined("NemerleWeb.JSApiAttribute") ||
           typeInfo.DeclaringType?.IsCustomAttributeDefined("NemerleWeb.JSApiAttribute"))
        {
          GetProperNameForJS(typeInfo)
        }
        else
        {
          def typeParams = if(typeInfo.Typarms.IsEmpty) "";
                           else $"[..$(typeInfo.Typarms.Select(_.ToString()))]";
          GetProperName(typeInfo.FullName + typeParams)
        }
      }
        
      public static GetProperName([NotNull] type : Type) : string 
      {
        GetProperName(type.FullName)
      }
        
      public static GetProperName([NotNull] fullName : string) : string
      {          
        fullName.Replace(" ", "")
                .Replace(".", "_")
                .Replace("+", "_")
                .Replace("[", "_$")
                .Replace("]", "$_")
                .Replace(",", "$$")
      }
        
      public static FilterMethods([NotNull] methods : IEnumerable[IMethod]) : IEnumerable[IMethod]
      {
        def pageMethods = typeof(IPage).GetMethods().Select(m => m.Name);
        methods.Where(m => !m.Name.StartsWith("get_") && !m.Name.StartsWith("set_"))
               .Where(m => !m.IsCustomAttributeDefined("NemerleWeb.IgnoreAttribute"))
               .Where(m => !m.IsConstructor)
               .Where(m => !pageMethods.Contains(m.Name))
               .Where(m => m.Name != "View")
               .Where(m => !(m.Name.StartsWith("_N__") && m.Name.EndsWith("____")))
      }
      
      public class JSClassMeta
      {
        public Properties : List[JSClassMemberMeta];
        public Fields : List[JSClassMemberMeta];
        public Methods : List[JSClassMemberMeta];
        
        public this() 
        {
          Properties = List();
          Fields = List();
          Methods = List();
        }
        
        public WriteToJS(indent : string) : string
        {
$<#$(indent)  this.__nweb_meta = {
$(indent)    properties: [..$(Properties; ","; _.Write())],
$(indent)    fields: [..$(Fields;         ","; _.Write())],
$(indent)    methods: [..$(Methods;       ","; _.Write())]
$(indent)  };#>;
        }
      }
        
      [Record]
      public class JSClassMemberMeta
      {
        Name : string { get; set; }
        Attributes : List[string] { get; set; }
                    
        public Write() : string
        {
          $<#{ name: "$Name", attrs: ['..$(Attributes; "','")'] }#>
        }
      }
  }
}
