using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Typedtree;

using System;
using System.Collections.Generic;
using System.Linq;

namespace NemerleWeb
{
  /// <summary>
  /// Description of JsKnownMembersConvert
  /// </summary>
  module JsKnownMembersConvert
  {
    public Register() : void
    {
      JsKnownMembers.RegisterType(typeof(Convert), Handler);
    }
    
    private Handler(left : JsAst, member : IMember, parms : list[JsAst]) : option[JsAst]
    {
      if (left is JsAst.StaticMethodRef) StaticHandler(left, member, parms) else None()
    }
    
    private StaticHandler(_left : JsAst, member : IMember, parms : list[JsAst]) : option[JsAst]
    {
      match (parms)
      {
      | [arg1] =>
        match(member.Name)
        {
        | "ToString" => Some(arg1.JsMethodCall("toString", []))
        | "ToDouble"
        | "ToSingle" => Some(JsAst.Call(JsAst.GlobalRef("parseFloat"), parms))
        | "ToByte"
        | "ToInt16"
        | "ToInt32"
        | "ToInt64"
        | "ToSByte"
        | "ToUInt16"
        | "ToUInt32"
        | "ToUInt64" => Some(JsAst.Call(JsAst.GlobalRef("parseInt"), parms))
        | _ => None()
        }
      | _ => None()
      }
    }
  }
}
