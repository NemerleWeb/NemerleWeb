using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;

using System;
using System.Collections.Generic;
using System.Linq;

namespace NemerleWeb
{
  /// <summary>
  /// Description of JsKnownMembersBase.
  /// </summary>
  module JsKnownMembersBase
  {
    public Register() : void
    {      
      // Constructor case
      JsKnownMembers.RegisterDefaultMember(
        ".ctor",
        (type, _, parms) => Some(JsAst.Call(JsAst.Constructor(JsClass.GetProperName(type)), parms)));
        
          
      def isFrameworkAssembly(typeInfo)
      {
        if (typeInfo.SystemType == null) false
        else
        {
          def token = typeInfo.SystemType.Assembly.GetName().GetPublicKeyToken();
        
          def msClrToken = array[0xb7 : byte, 0x7a, 0x5c, 0x56, 0x19, 0x34, 0xe0, 0x89];
          def msFxToken = array[0xb0 : byte, 0x3f, 0x5f, 0x7f, 0x11, 0xd5, 0x0a, 0x3a];
       
          token.SequenceEqual(msClrToken) || token.SequenceEqual(msFxToken);
        }
      }      
      def toString(typeInfo, left, parms)
      {
        // If type has method ToString, use it
        if (typeInfo != null && !isFrameworkAssembly(typeInfo) &&
          { 
            def members = typeInfo.GetMembers(
              BindingFlags.Instance |
              BindingFlags.Public |
              BindingFlags.NonPublic |
              BindingFlags.DeclaredOnly);
            members.Any(m => m.Name == "ToString") })
          Some(left.ExternalMethodCall("ToString", parms))
        else
          Some(left.MethodCall("toString", []))
      }
      
      JsKnownMembers.RegisterDefaultMember("ToString", toString);
        
    }
  }
}
