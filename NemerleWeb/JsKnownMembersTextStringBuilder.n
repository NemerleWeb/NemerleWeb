using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace NemerleWeb
{
  module JsKnownMembersTextStringBuilder
  {    
    public Register() : void
    {
      JsKnownMembers.RegisterType(typeof(StringBuilder), Handler);
    }
  
    public Handler(left : JsAst, member : IMember, parms : list[JsAst]) : option[JsAst]
    {
      (if (left is JsAst.StaticMethodRef) StaticHandler else ObjectHandler)(left, member, parms)
    }
    
    private ObjectHandler(left : JsAst, member : IMember, parms : list[JsAst]) : option[JsAst]
    {
      match (parms)
      {
      | [] =>
        match (member.Name)
        {        
        | "get_Length" => Some(JsAst.FieldRef(left, "length", false))
        | "ToString" => Some(left)        
        | _ => None()
        }
      | [arg] =>
        match (member.Name)
        {
        | "set_Length" =>
          Some(JsAst.Assign(
            left,
            left.MethodCall("substring", [JsAst.Literal(JsLiteral.Integer(0)), arg])))
        | "Append" => Some(JsAst.Assign(left, JsAst.Call(JsAst.OpCode("+"), [left, arg])))        
        | _ => None()
        }        
      | _ => None()
      }
    }
     
    private StaticHandler(_left : JsAst, member : IMember, parms : list[JsAst]) : option[JsAst]
    {
      match (parms)
      {
      | [] =>
        match (member.Name)
        {
        | ".ctor" => Some(JsAst.Literal(JsLiteral.String("")))
        | _ => None()
        }
      | _ => None()
      }
    }
  }
}
