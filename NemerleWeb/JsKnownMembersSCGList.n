using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Typedtree;
using NemerleWeb.Utils;

using System;
using System.Collections.Generic;
using System.Linq;

namespace NemerleWeb
{
  /// <summary>
  /// Description of JsKnownMembersSCGList.
  /// </summary>
  module JsKnownMembersSCGList
  {
    public Register() : void
    {
      JsKnownMembers.RegisterType(typeof(List[_]), Handler); 
    }
    
    private Handler(left : JsAst, member : IMember, parms : list[JsAst]) : option[JsAst]
    {
      (if (left is JsAst.StaticRef) StaticHandler else ObjectHandler)(left, member, parms)
    }
    
    private ObjectHandler(left : JsAst, member : IMember, parms : list[JsAst]) : option[JsAst]
    {
        match (parms)
        {
        | [] =>
          match (member.Name)
          {
          | "get_Count" => Some(JsAst.FieldRef(left, "length", true))
          | "GetEnumerator" => Some(left.MethodCall(member.Name, parms))
          | _ => None()
          }
        
        | [_] =>
          match (member.Name)
          {
          | "get_Item" => Some(JsAst.Call(JsAst.Indexer(left), parms))
          | "Add" => Some(JsAst.Call(JsAst.MethodRef(TypeHelper.PropertyToField(left, false), "push"), parms))
          | "Remove" => Some(JsAst.Call(JsAst.MethodRef(TypeHelper.PropertyToField(left, false), "remove"), parms))
          | _ => None()
          }
        
        | _ => None()
        }
    }
     
    private StaticHandler(_left : JsAst, member : IMember, parms : list[JsAst]) : option[JsAst]
    {
      match (parms)
      {
      | _ =>
        match (member.Name)
        {
        | ".ctor" => Some(JsAst.Array(parms.Where(p => !(p is JsAst.NotImpl())).NToList()))
        | _ => None()
        }
      }
    }
  }
}
