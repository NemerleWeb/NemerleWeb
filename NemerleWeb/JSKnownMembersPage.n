using Nemerle;
using Nemerle.Compiler;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace NemerleWeb
{
  /// <summary>
  /// Description of JSKnownMembersPage.
  /// </summary>
  module JSKnownMembersPage
  {
    public Register() : void
    {
      //JSKnownMembers.RegisterBaseType(typeof(NemerleWeb.PageBase[_]), Handler);      
    }
    
    private Handler(_left : JSAst, member : IMember, parms : list[JSAst]) : option[JSAst]
    {
      match (member.Name, parms)
      {
      | ("setTimeout", [callback, milliseconds]) => 
        def cb = JSAstHelper.MakeReturningFunction(callback);
        Some(JSAst.Code(
$<# var ___cb = ($(cb.Write()))();
 setTimeout(function() { ___cb(); nweb.invalidate() }, $(milliseconds.Write()))#>))
      | ("setInterval", [callback, milliseconds]) => 
        def cb = JSAstHelper.MakeReturningFunction(callback);
        Some(JSAst.Code(
$<# var ___cb = ($(cb.Write()))();
 setInterval(function() { 
 ___cb(); nweb.invalidate() 
}, $(milliseconds.Write()))#>))
      | ("clearTimeout", [id]) => Some(JSAst.Code($"clearTimeout($(id.Write()))"))
      | ("clearInterval", [id]) => Some(JSAst.Code($"clearInterval($(id.Write()))"))
      | ("re", [pat]) with modifiers = JSAst.Literal(JSLiteral.String(""))
      | ("re", [pat, modifiers]) =>
        Some(JSAst.Literal(JSLiteral.Regexp(pat, modifiers)))
      | _ => None()
      }
    }
  }
}
