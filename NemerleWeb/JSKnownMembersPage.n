using Nemerle;
using Nemerle.Compiler;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace NemerleWeb
{
  /// <summary>
  /// Description of JsKnownMembersPage.
  /// </summary>
  module JsKnownMembersPage
  {
    public Register() : void
    {
      //JsKnownMembers.RegisterBaseType(typeof(NemerleWeb.PageBase[_]), Handler);      
    }
    
    private Handler(_left : JsAst, member : IMember, parms : list[JsAst]) : option[JsAst]
    {
      match (member.Name, parms)
      {
      | ("setTimeout", [callback, milliseconds]) => 
        def cb = JsAstHelper.MakeReturningFunction(callback);
        Some(JsAst.Code(
$<# var ___cb = ($(cb.Write()))();
 setTimeout(function() { ___cb(); nweb.invalidate() }, $(milliseconds.Write()))#>))
      | ("setInterval", [callback, milliseconds]) => 
        def cb = JsAstHelper.MakeReturningFunction(callback);
        Some(JsAst.Code(
$<# var ___cb = ($(cb.Write()))();
 setInterval(function() { 
 ___cb(); nweb.invalidate() 
}, $(milliseconds.Write()))#>))
      | ("clearTimeout", [id]) => Some(JsAst.Code($"clearTimeout($(id.Write()))"))
      | ("clearInterval", [id]) => Some(JsAst.Code($"clearInterval($(id.Write()))"))
      | ("re", [pat]) with modifiers = JsAst.Literal(JsLiteral.String(""))
      | ("re", [pat, modifiers]) =>
        Some(JsAst.Literal(JsLiteral.Regexp(pat, modifiers)))
      | _ => None()
      }
    }
  }
}
