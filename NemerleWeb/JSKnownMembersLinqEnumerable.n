using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Typedtree;

using System;
using System.Collections.Generic;
using System.Linq;

namespace NemerleWeb
{
  internal module JSLinqExtensions
  {
    public static AsEnumerable(this seq : JSAst) : JSAst
    {
      JSAst.Call(JSAst.StaticRef("Enumerable", "from"), [seq])
    }
  }
  
  module JSKnownMembersLinqEnumerable
  {
    public Register() : void
    {
      JSKnownMembers.RegisterType(typeof(Enumerable), Handler); 
    }
    
    private Handler(left : JSAst, member : IMember, parms : list[JSAst]) : option[JSAst]
    {
      if (left is JSAst.StaticMethodRef) StaticHandler(left, member, parms) else None()
    }
    
    private StaticHandler(_left : JSAst, member : IMember, parms : list[JSAst]) : option[JSAst]
    {
      match (parms)
      {
      | [seq] =>
        match (member.Name)
        {
        | "AsEnumerable" => Some(seq.AsEnumerable())        
        | "All"
        | "Any"
        | "Average"
        | "Cast"
        | "Count"
        | "Empty"
        | "First"
        | "Last"
        | "LongCount"
        | "Max"
        | "Min"
        | "OfType"
        | "Reverse"
        | "Single"
        | "SingleOrDefault"
        | "Sum"        
        | "ToArray" => Some(seq.AsEnumerable().JSMethodCall(member.Name, []))        
        | "ToList" => Some(seq)        
        | "FirstOrDefault"
        | "LastOrDefault" =>  Some(seq.AsEnumerable().JSMethodCall(member.Name, [JSAst.Literal(JSLiteral.Null())]))
        | _ => None()
        }
       
      | [seq, arg1] =>
        match (member.Name)
        {        
        | "Aggregate"
        | "All"
        | "Any"
        | "Average"
        | "Concat"
        | "Contains"
        | "Count"
        | "DefaultIfEmpty"
        | "ElementAt"
        | "ElementAtOrDefault"
        | "Except"
        | "First"
        | "GroupBy"
        | "Intersect"
        | "Last"        
        | "LongCount"
        | "Max"
        | "Min"
        | "OrderBy"
        | "Repeat"
        | "Select"
        | "SelectMany"
        | "SequenceEqual"
        | "Single"
        | "SingleOrDefault"
        | "Skip"
        | "SkipWhile"
        | "Sum"
        | "Take"
        | "TakeWhile"
        | "ThenBy"
        | "ThenByDescending"
        | "ToDictionary"          
        | "ToLookup"
        | "Union"
        | "Where" => Some(seq.AsEnumerable().JSMethodCall(member.Name, [arg1]))
        
        | "FirstOrDefault"
        | "LastOrDefault" =>  Some(seq.AsEnumerable().JSMethodCall(member.Name, [JSAst.Literal(JSLiteral.Null()), arg1]))
                              
        // Special method
        | "Range" => Some(JSAst.Call(JSAst.StaticRef("Enumerable", "range"), [seq, arg1]))
        | _ => None()
        }
          
      | [seq, arg1, arg2] =>
        match (member.Name)
        {
        | "Aggregate"
        | "Contains"
        | "Count"
        | "Except"
        | "GroupBy"
        | "Intersect"
        | "OrderBy"
        | "SelectMany"
        | "SequenceEqual"
        | "ThenBy"
        | "ThenByDescending"
        | "ToDictionary"
        | "ToLookup"
        | "Union"
        | "Zip" => Some(seq.AsEnumerable().JSMethodCall(member.Name, [arg1, arg2]))
        | _ => None()
        }
        
      | [seq, arg1, arg2, arg3] =>
        match (member.Name)
        {
        | "Aggregate"
        | "GroupBy"
        | "ToDictionary"
        | "ToLookup" => Some(seq.AsEnumerable().JSMethodCall(member.Name, [arg1, arg2, arg3]))
        | _ => None()
        }
        
      | [seq, arg1, arg2, arg3, arg4] =>
        match (member.Name)
        {
        | "GroupBy"
        | "GroupJoin"
        | "Join" => Some(seq.AsEnumerable().JSMethodCall(member.Name, [arg1, arg2, arg3, arg4]))
        | _ => None()
        }
        
      | [seq, arg1, arg2, arg3, arg4, arg5] =>
        match (member.Name)
        {
        | "GroupJoin"
        | "Join" => Some(seq.AsEnumerable().JSMethodCall(member.Name, [arg1, arg2, arg3, arg4, arg5]))
        | _ => None()
        }
      | _ => None()
      }
    }
  }
}