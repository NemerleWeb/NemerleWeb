using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Typedtree;

using System;
using System.Collections.Generic;
using System.Linq;

namespace NemerleWeb
{
  /// <summary>
  /// Description of JsKnownMembersIDisposable.
  /// </summary>
  module JsKnownMembersIDisposable
  {
    public Register() : void
    {
      JsKnownMembers.RegisterType(typeof(IDisposable), Handler);
    }
    
    private Handler(left : JsAst, member : IMember, parms : list[JsAst]) : option[JsAst]
    {
      if (left is JsAst.StaticMethodRef) None() else ObjectHandler(left, member, parms)
    }
    
    private ObjectHandler(left : JsAst, member : IMember, parms : list[JsAst]) : option[JsAst]
    {
      match (parms)
      {
      | [] when member.Name.ToUpperInvariant() == "DISPOSE" => 
      
      // if (left.dispose && typeof left.dispose == "function") left.dispose();
      // else left.Dispose();
      
      Some(
        JsAst.If
        (
          JsAst.Call
          (
            JsAst.OpCode("&&"),
            [
              JsAst.FieldRef(left, "dispose"),              
              JsAst.Call
              (
                JsAst.OpCode("==="),
                [
                  JsAst.TypeOf(JsAst.FieldRef(left, "dispose")),
                  JsAst.Literal(JsLiteral.String("function"))
                ]
              )
            ]
          ),
          left.MethodCall("dispose", parms),
          left.ExternalMethodCall("Dispose", parms)
        ))
      
      | _ => None()
      }
    }
  }
}
