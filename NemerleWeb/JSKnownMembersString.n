using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Typedtree;

using System;
using System.Collections.Generic;
using System.Linq;

namespace NemerleWeb
{
  module JSKnownMembersString
  {
    public Register() : void
    {
      JSKnownMembers.RegisterType(typeof(string), Handler);
    }
        
    private Handler(left : JSAst, member : IMember, parms : list[JSAst]) : option[JSAst]
    {
      (if (left is JSAst.StaticMethodRef) StaticHandler else InstanceHandler)(left, member, parms)
    }
    
    private InstanceHandler(left : JSAst, member : IMember, parms : list[JSAst]) : option[JSAst]
    {
      match (parms)
      {
      | [] =>
        match (member.Name)
        {        
        | "get_Length" => Some(JSAst.FieldRef(left, "length"))
        | "Clone" => Some(left)        
        | "GetEnumerator" => Some(left.JSMethodCall(member.Name, parms))
        | "GetHashCode"
        | "GetType"
        | "GetTypeCode"        
        | "IsNormalized"
        | "Normalize"
        | "ToCharArray" => None()
        | "ToLower" => Some(left.JSMethodCall("toLowerCase", []))
        | "ToLowerInvariant" => None()
        | "ToString" => Some(JSAstHelper.JSToString(left))
        | "ToUpper" => Some(left.JSMethodCall("toUpperCase", []))
        | "ToUpperInvariant"
        | "Trim"
        | "TrimEnd"
        | "TrimStart"
        | _ => None()
        }
          
      | [arg1] =>
        match (member.Name)
        {
        | "get_Chars" => Some(JSAst.ArrayIndexer(left, arg1))
        | "Compare"
        | "CompareOrdinal"
        | "CompareTo" => None()
        | "Contains" =>
          Some(JSAst.Call(
            JSAst.OpCode("!=="),
            [
              left.JSMethodCall("indexOf", parms),
              JSAst.Literal(JSLiteral.Integer(-1))
            ]))
            
        | "EndsWith" => None()       
        | "Equals" => Some(JSAst.Call(JSAst.OpCode("==="), [left, arg1]))
        | "Format" => None()
        | "IndexOf" => Some(left.JSMethodCall("indexOf", parms))
        | "IndexOfAny"
        | "IsNormalized"        
        | "LastIndexOf"
        | "LastIndexOfAny"
        | "Normalize"
        | "PadLeft"
        | "PadRight"
        | "Remove"
        | "Split"
        | "StartsWith" => None()
        | "Substring" => Some(left.JSMethodCall("substr", parms))
        | "ToLower"
        | "ToUpper"
        | "Trim" => None()        
        | "ToString" => Some(JSAstHelper.JSToString(left))
        | _ => None()
        }
          
      | [_arg1, _arg2] =>
        match (member.Name)
        {                
        | "Compare"
        | "EndsWith"
        | "Equals"
        | "Format"
        | "IndexOf"
        | "IndexOfAny"
        | "Insert"
        | "LastIndexOf"          
        | "LastIndexOfAny"
        | "PadLeft"
        | "PadRight"
        | "Remove"
        | "Replace"
        | "Split"
        | "StartsWith" => None()
        | "Substring" => Some(left.JSMethodCall("substr", parms))
        | "ToCharArray"
        | _ => None()
        }
          
      | [_arg1, _arg2, _arg3] =>
        match (member.Name)
        {        
        | "Compare"
        | "CopyTo"
        | "Equals"
        | "Format"
        | "IndexOf"
        | "IndexOfAny"
        | "LastIndexOf"
        | "LastIndexOfAny"
        | "Split"
        | "StartsWith"
        | _ => None()
        }
        
      | [_arg1, _arg2, _arg3, _arg4] =>
        match (member.Name)
        {        
        | "Compare"
        | "CompareOrdinal"
        | "IndexOf"
        | "LastIndexOf"
        | _ => None()
        }
          
      | [_arg1, _arg2, _arg3, _arg4, _arg5] =>
        match (member.Name)
        {
        | "Compare"
        | _ => None()
        }       
      | [_arg1, _arg2, _arg3, _arg4, _arg5, _arg6] =>
        match (member.Name)
        {
        | "Compare"
        | _ => None()
        }
      | _ => None()
      }
    }
    
    EmptyString : JSAst.Literal = JSAst.Literal(JSLiteral.String(""));
    
    private StaticHandler(_left : JSAst, member : IMember, parms : list[JSAst]) : option[JSAst]
    {
      match (parms)
      {
      | [] =>
        match (member.Name)
        {
        | ".ctor" => Some(EmptyString)
        | _ => None()
        }
      | [arg1] =>
        match (member.Name)
        {
        | ".ctor" => Some(JSAst.Call(JSAst.GlobalRef("System_String"), parms))
        | "Concat" =>
          match (arg1)
          {
          | JSAst.Array(Values = values) =>
            match (values)
            {
            | [] => None()
            | [v] => Some(JSAstHelper.JSToString(v))
            | _ => Some(JSAstHelper.JSToString(values.Head).JSMethodCall("concat", values.Tail))
            }
          | LocalRef(_, Some(type)) when JSClass.TypeIsArray(type) =>
            Some(arg1.JSMethodCall("join", [JSAst.Literal(JSLiteral.String(""))]))
          | _ => Some(JSAstHelper.JSToString(arg1))
          }
        | "Copy"
        | "Intern"
        | "IsInterned" => None()
        | "IsNullOrEmpty" =>
          Some(JSAst.Call(JSAst.OpCode("||"),
              [JSAst.Call(JSAst.OpCode("==="), [arg1, JSAst.Literal(JSLiteral.Null())]),
                JSAst.Call(JSAst.OpCode("==="), [arg1, JSAst.Literal(JSLiteral.String(""))])]))                 
        | "IsNullOrWhiteSpace" => //TODO: add regex AST for / / syntax, then we can compare arg.replace(/\s/g, "") and ""
          Some(JSAst.Call(JSAst.OpCode("||"),
              [JSAst.Call(JSAst.OpCode("==="), [arg1, JSAst.Literal(JSLiteral.Null())]),
                JSAst.Call(JSAst.OpCode("==="), [arg1, JSAst.Literal(JSLiteral.String(""))])]))
        | _ => None()
        }
      | [arg1, arg2] =>
        match (member.Name)
        {
        | "Concat" => Some(JSAstHelper.JSToString(arg1).JSMethodCall("concat", [arg2]))
        | "Equals" => None()
        | "Join" => Some(arg2.JSMethodCall("join", [arg1]))
        | _ => None()
        }
      | [arg1, arg2, arg3] =>
        match (member.Name)
        {
        | "Concat" => Some(JSAstHelper.JSToString(arg1).JSMethodCall("concat", [arg2, arg3]))
        | "Equals"
        | _ => None()
        }
      | [arg1, arg2, arg3, arg4] =>
        match (member.Name)
        {
        | "Concat" => Some(JSAstHelper.JSToString(arg1).JSMethodCall("concat", [arg2, arg3, arg4]))
        | "Equals"
        | "Join"
        | _ => None()
        }
      | _ => None()
      }
    }
  }
}