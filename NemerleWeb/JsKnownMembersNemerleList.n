using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Typedtree;

using System;
using System.Collections.Generic;
using System.Linq;

namespace NemerleWeb
{
  module JsKnownMembersNemerleList
  {
    public Register() : void
    {
      JsKnownMembers.RegisterType(typeof(list[_].Cons), Handler);      
    }
    
    private Handler(left : JsAst, member : IMember, parms : list[JsAst]) : option[JsAst]
    {
      (if (left is JsAst.StaticMethodRef) StaticHandler else InstanceHandler)(left, member, parms)
    }
    
    private InstanceHandler(left : JsAst, member : IMember, parms : list[JsAst]) : option[JsAst]
    {
      match (parms)
      {
      | [arg1] =>
        match (member.Name)
        {
        | "Equals" =>
          Some(
            JsAst.Call(
              JsAst.StaticMethodRef("nweb.collection", "areArrayEqual"),
              [left, arg1]))
        | "MapToArray" => 
          Some(left.AsEnumerable().MethodCall("select", [arg1]).MethodCall("toArray", []))
        | _ => None()
        }
      | _ => None()
      }
    }
    
    private StaticHandler(_left : JsAst, member : IMember, parms : list[JsAst]) : option[JsAst]
    {
      match(parms)
      {
      | [arg1, arg2] =>
        match(member.Name)
        {
        | ".ctor" => Some(JsAst.Array([arg1]).MethodCall("concat", [arg2]))
        | _ => None()
        }
      | _ => None()
      }
    }
  }
}