using Nemerle;
using Nemerle.Compiler;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace NemerleWeb
{
  /// <summary>
  /// Description of JSKnownMembersOperators
  /// </summary>
  module JSKnownMembersOperators
  {
    public Register() : void
    {
      def opcodeAst(opcode, parms) { JSAst.Call(JSAst.OpCode(opcode), parms) }
      def registerOpcode(opcodeName, opcode)
      {
        JSKnownMembers.RegisterMember(opcodeName, (_, _, _, parms) => Some(opcodeAst(opcode, parms)));
      }
      
      registerOpcode("op_Inequality", "!==");
      registerOpcode("op_Equality", "===");
      registerOpcode("op_GreaterThan", ">");
      registerOpcode("op_GreaterThanOrEqual", ">=");
      registerOpcode("op_LessThan", "<");
      registerOpcode("op_LessThanOrEqual", "<=");
      
      registerOpcode("op_Addition", "+");
      registerOpcode("op_Subtraction", "-");
      registerOpcode("op_Multiply", "*");
      registerOpcode("op_Division", "/");      
      registerOpcode("op_Modulus", "%");
      registerOpcode("op_ExclusiveOr", "^");
      registerOpcode("op_BitwiseAnd", "&");
      registerOpcode("op_BitwiseOr", "|");
      registerOpcode("op_LogicalAnd", "&&");
      registerOpcode("op_LogicalOr", "||");
      
      registerOpcode("op_MultiplicationAssignment", "*=");
      registerOpcode("op_SubtractionAssignment", "-=");
      registerOpcode("op_ExclusiveOrAssignment", "^=");
      registerOpcode("op_LeftShiftAssignment", "<<=");
      registerOpcode("op_ModulusAssignment", "%=");
      registerOpcode("op_AdditionAssignment", "+=");
      registerOpcode("op_DivisionAssignment", "/=");
      registerOpcode("op_BitwiseAndAssignment", "&=");
      registerOpcode("op_BitwiseOrAssignment", "|=");
            
      registerOpcode("op_LeftShift", "<<");
      registerOpcode("op_RightShift", ">>");
      registerOpcode("op_UnsignedRightShift", ">>>");
      
      registerOpcode("op_Comma", ",");

      // Unary
      registerOpcode("op_Decrement", "--");
      registerOpcode("op_Increment", "++");
      registerOpcode("op_UnaryNegation", "-");
      registerOpcode("op_UnaryPlus", "+");
      registerOpcode("op_OnesComplement", "~");
      
      def registerCastOpcode(opcodeName)
      {
        JSKnownMembers.RegisterMember(
          opcodeName,
          (typeInfo, left, member, parms) =>
          {
            match (parms)
            {
            // HACK: Is there anything better ?
            | [arg] =>
              // If JSApi attribute is defined, return as is.
              if(typeInfo.IsCustomAttributeDefined("NemerleWeb.JSApiAttribute"))
                Some(arg)
              else
                match(typeInfo.FullName)
                {
                | "System.Decimal" => Some(arg)
                | "System.String" => Some(JSAstHelper.CallToString(typeInfo, left, member, parms))
                | _ => Some(JSAst.Call(left, []))
                }
            | _ => None()
            }
          });
      }
      
      registerCastOpcode("op_Implicit");
      registerCastOpcode("op_Explicit");
      
      // Unsupported
      //op_SignedRightShift
    }
  }
}
