using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Typedtree;

using System;
using System.Collections.Generic;
using System.Linq;

namespace NemerleWeb
{
  module JSKnownMembersNemerleList
  {
    public Register() : void
    {
      JSKnownMembers.RegisterType(typeof(list[_].Cons), Handler);      
    }
    
    private Handler(left : JSAst, member : IMember, parms : list[JSAst]) : option[JSAst]
    {
      (if (left is JSAst.StaticMethodRef) StaticHandler else InstanceHandler)(left, member, parms)
    }
    
    private InstanceHandler(left : JSAst, member : IMember, parms : list[JSAst]) : option[JSAst]
    {
      match (parms)
      {
      | [arg1] =>
        match (member.Name)
        {
        | "Equals" =>
          Some(
            JSAst.Call(
              JSAst.StaticMethodRef("nweb.collection", "areArrayEqual", None()),
              [left, arg1]))
        | "MapToArray" => 
          Some(left.AsEnumerable().JSMethodCall("select", [arg1]).JSMethodCall("toArray", []))
        | _ => None()
        }
      | _ => None()
      }
    }
    
    private StaticHandler(_left : JSAst, member : IMember, parms : list[JSAst]) : option[JSAst]
    {
      match(parms)
      {
      | [arg1, arg2] =>
        match(member.Name)
        {
        | ".ctor" => Some(JSAst.Array([arg1]).JSMethodCall("concat", [arg2]))
        | _ => None()
        }
      | _ => None()
      }
    }
  }
}