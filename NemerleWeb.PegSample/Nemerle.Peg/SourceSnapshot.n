using System;
using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Extensions;
using Nemerle.Utility;

namespace Nemerle.Peg
{
  public class SourceSnapshot
  {
    [Accessor] originalText : string;
    [Accessor] text : string;
    [Accessor] fileIndex : int;
    [Accessor] fileName : string;

    lineIndexes : array[int];

    protected this(originalText : string, text : string, fileIndex : int, fileName : string, lineIndexes : array[int])
    {
      this.originalText = originalText;
      this.text = text;
      this.fileName = fileName;
      this.fileIndex = fileIndex;
      this.lineIndexes = lineIndexes;
    }

    public this([NotNull] text : string, fileIndex : int = 0, fileName : string = "")
    {
      this(text, text, fileIndex, fileName, MakeLineIndexes(text));
    }
    
    public GetLinesRelocationTable() : array[int]
    {
      def newArray = array(lineIndexes.Length);
      lineIndexes.CopyTo(newArray, 0);
      newArray
    }

    [Memoize]
    internal PositionToLineColumn(pos : int) : int * int
    {
      match(Array.BinarySearch(lineIndexes, pos))
      {
        | index when index < 0 =>
          def index = ~index;
          (index, pos - lineIndexes[index - 1] + 1)
        | index =>
          (index + 1, pos - lineIndexes[index] + 1)
      }
    }

    public GetSourceLine(pos : int) : Location
    {
      def (line, col) = PositionToLineColumn(pos);
      def startPos = pos - col + 1;
      def endPos =
        if(line == lineIndexes.Length)
          text.Length
        else
          lineIndexes[line];
      Location(this, startPos, endPos)
    }

    public WithText([NotNull] text : string) : SourceSnapshot
      requires originalText.Length == text.Length
    {
      SourceSnapshot(originalText, text, fileIndex, fileName, lineIndexes);
    }

    public override ToString() : string
    {
      $<#File index: $fileIndex, File name: $fileName#>
    }

    protected static MakeLineIndexes(text : string) : array[int]
    {
      def line_indexes_buffer = SCG.List(text.Length / 25);
      line_indexes_buffer.Add(0);
      mutable pos;
      while(pos < text.Length)
      {
        match(text[pos])
        {
          | '\r' => 
            ++pos;
            when(pos < text.Length && text[pos] == '\n')
              ++pos;
            line_indexes_buffer.Add(pos);
          | '\n'
          | '\u2028'    /*  line separator       */
          | '\u2029' => /*  paragraph separator  */
            ++pos;
            line_indexes_buffer.Add(pos);
          | _ =>
            ++pos;
        }
      }
      line_indexes_buffer.ToArray()
    }
  }
}