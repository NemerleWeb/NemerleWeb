using System;
using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Extensions;
using Nemerle.Utility;

namespace Nemerle.Peg
{
  [Record]
  public struct Location
  {
    [Accessor]  private _source : SourceSnapshot;
    [Accessor]  private _startPos : int;
    [Accessor]  private _endPos   : int;

    public IsEmpty : bool { get { _startPos >= _endPos } }

    public GetText() : string { _source.OriginalText.Substring(_startPos, _endPos - _startPos) }

    public StartLineColumn  : int * int { get { _source.PositionToLineColumn(_startPos) } }
    public EndLineColumn    : int * int { get { _source.PositionToLineColumn(_endPos) } }

    public override ToString() : string 
    {
      $<#Start: $_startPos Len: $(_endPos - _startPos)#>
    }

    public Combine(other : Location) : Location
    {
      Location(
        this.Source,
        Math.Min(this.StartPos, other.StartPos),
        Math.Max(this.EndPos, other.EndPos))
    }

    public static @+(a : Location, b : Location) : Location
    {
      a.Combine(b)
    }

    public static FromToken(source : SourceSnapshot, tok : NToken) : Location
    {
      Location(source, tok.StartPos, tok.EndPos)
    }

    public static FromToken(source : SourceSnapshot, tok : IToken) : Location
    {
      Location(source, tok.StartPos, tok.EndPos)
    }

    public static FromToken(source : SourceSnapshot, a : NToken, b : NToken) : Location
    {
      Location(source, Math.Min(a.StartPos, b.StartPos), Math.Max(a.EndPos, b.EndPos))
    }

    public static FromToken(source : SourceSnapshot, a : IToken, b : IToken) : Location
    {
      Location(source, Math.Min(a.StartPos, b.StartPos), Math.Max(a.EndPos, b.EndPos))
    }
  }
}