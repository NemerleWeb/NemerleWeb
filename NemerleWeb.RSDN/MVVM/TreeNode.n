using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using NemerleWeb;
using NemerleWeb.TypedJS;

namespace NemerleWeb.Rsdn
{  
  [Unit]
  public class TreeNode
  {
    public Id : string { get; set; }
    public Caption : string { get; set; }
    public Href : string { get; set; }
    public Icon : string { get; set; }
    public Hide : bool { get; set; }
    public Depth : int { get; set; }
    public IsOpened : bool { get; set; }
    public Children : List[TreeNode] { get; set; }    
    public HasChildren : bool { get; set; }
    
    public IsSelected : bool { get; set; }    
    public IsPinned : bool { get; set; }
    
    public IconUrl : string 
    {      
      get {        
        def suffix = match(IsOpened, HasChildren) {
                      | (false, true) => "c.gif" 
                      | (true, _) => "o.gif";
                      | _ => "s.gif";
                     };
        "http://rsdn.ru/images/tree/" + Icon + suffix;
      }
    }
    
    public TogglePin() : void
    {      
      IsPinned = !IsPinned;
      
      if(IsPinned) MainPage.Instance.AddPinned(Id)
      else MainPage.Instance.RemovePinned(Id)      
    }
    
    public CaptionClick() : void
    {
      if(HasChildren) {
        if(Children == null) {
          server.LoadNodeChildren(Id, children => {
            Children = children;
            IsOpened = !IsOpened;
          });
        } else
          IsOpened = !IsOpened;
      }
      else
        MainPage.SelectedUrl = Href;
    }
    
    [Html]
    public View() : string
    {
      <#
        <div $foreach(c in Children) style-margin-left="$(c.Depth * 10)" class="node" css-selected-search-result="$(c.IsSelected)">
          <a click="$(c.CaptionClick())" attr-href="$(c.Href)" css-with-children="$(c.HasChildren)">
            <img class="node-icon" attr-src="$(c.IconUrl)" />
            <span class="node-caption">
              $(c.Caption)
            </span>
            <div $when(!c.HasChildren) click="$(c.TogglePin())" class="node-pin" css-pinned="$(c.IsPinned)" />
          </a>
          <div $when(c.IsOpened && Children != null)>
            <div template="$(template(c))" />
          </div>
        </div>
      #>
    }
    
    public class Server
    {
      public LoadNodeChildren(id : string) : List[TreeNode]
      {
        TreeLoader.LoadNodeChildren(id)
      }
    }
  }
}
