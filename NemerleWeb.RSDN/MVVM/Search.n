using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Extensions;

using System;
using System.Collections.Generic;
using System.Linq;
using NemerleWeb;
using NemerleWeb.TypedJS;

namespace NemerleWeb.Rsdn
{    
  [Unit]
  public class Search
  { 
    public IsLimited : bool { get; set; }
    public SearchResults : TreeNode;
        
    mutable _searchTerm : string;
    public SearchTerm : string { 
      get { _searchTerm; }
      set {         
        throttle(500, {
          when(_searchTerm != value) {
            _searchTerm = value;
            Search(value, true);
          }
        });
      }; 
    }
        
    public this() 
    {
      SearchResults = TreeNode() <- ( Children = List() );
    }
        
    public Search(term : string, limitedSearch : bool) : void
    {
      if(!string.IsNullOrWhiteSpace(term)) {        
        server.Search(term, limitedSearch, nodes => {
          SearchResults.Children = nodes.ToList();
          IsLimited = limitedSearch && nodes.Length == 40;
        });
      } else SearchResults.Children.Clear();
    }
    
    public static SelectNode(node : TreeNode) : void
    {
      MainPage.SelectedUrl = node.Href;
    }
        
    [Html]
    public View() : string
    {
      <#
        <div class="search-bar">
          <input id="search-input" value="$SearchTerm" />
        </div>
        <div $when(!string.IsNullOrEmpty(SearchTerm)) class="search-results">          
          <div template="$(template(SearchResults))" />          
          <div $when(IsLimited) click="$(Search(SearchTerm, false))" class="search-show-all">
            showing first 40 results, click for rest
          </div>          
        </div>
      #>
    }
    
    public class Server
    {
      public Search(term : string, limitedSearch : bool = false) : array[TreeNode]
      {
        TreeLoader.Search(term, limitedSearch)
      }
    }
  }
}
