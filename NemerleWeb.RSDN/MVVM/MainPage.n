using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Extensions;

using System;
using System.Collections.Generic;
using System.Linq;
using NemerleWeb;

namespace NemerleWeb.Rsdn
{  
  [Unit]
  public class MainPage
  {
    mutable _searchTerm : string;
    
    public mutable static SelectedUrl : string;
    
    Root : TreeNode { get; set; }
    SearchResults : IEnumerable[(TreeNode * list[string])] { get; set; }    
    
    SearchTerm : string { 
      get { _searchTerm; }
      set {
          _searchTerm = value;
          Search(value);
      }; 
    }
    
    public this() {
      LoadTopNodes();
    }
    
    public LoadTopNodes() : void
    {
      server.GetTopNodes(nodes => {
        Root = TreeNode() <- (
          Children = nodes
        );
      });
    }
    
    public Search(term : string) : void
    {
      if(string.IsNullOrWhiteSpace(term))
        LoadTopNodes();
      else {        
        server.Search(term, nodes => {
          SearchResults = nodes;
        });
      }
    }
    
    public static SelectNode(node : TreeNode) : void
    {
      SelectedUrl = node.Href;
    }
    
    [Html]
    public View() : string
    {
      <#
        <div class="page">
          <div class="left">
            <div $when(Root != null) class="root">
              <div>
                <input value="$SearchTerm" />
              </div>
              <div $when(!string.IsNullOrEmpty(SearchTerm)) class="search-results">
                <div $foreach((node, path) in SearchResults)>                       
                  <a click="$(SelectNode(node))">
                    $(node.Caption)
                  </a>              
                </div>
              </div>
              <div $when(string.IsNullOrEmpty(SearchTerm))>
                <div template="$(template(Root))" />
              </div>
            </div>
          </div>
          <div class="right">
            <iframe attr-src="$SelectedUrl" />
          </div>
        </div>
      #>
    }
    
    public class Server
    {
      public GetTopNodes() : List[TreeNode]
      {
        TreeLoader.GetTopNodes()
      }
      
      public Search(term : string) : IEnumerable[(TreeNode * list[string])]
      {
        TreeLoader.Search(term)
      }
    }
  }
}
