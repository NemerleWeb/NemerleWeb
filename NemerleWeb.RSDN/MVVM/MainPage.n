using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Extensions;

using System;
using System.Collections.Generic;
using System.Linq;
using NemerleWeb;
using NemerleWeb.TypedJS;

namespace NemerleWeb.Rsdn
{    
  [Unit]
  public class MainPage
  {    
    public mutable static Instance : MainPage;
            
    Root : TreeNode { get; set; }    
    Pinned : TreeNode { get; set; }
    MenuHeight : float { get { window.innerHeight } }
    Search : Search { get; set; }
    
    ActiveNodes : list[TreeNode] { get; set; }
    PinnedNodes : list[TreeNode] { get; set; }
    SelectedUrl : string { get; set; }    
        
    public this() 
    {
      MainPage.Instance = this;
      
      SelectedUrl = "";
                  
      LoadTopNodes();
      Pinned = TreeNode();
      Search = Search();
                       
      UpdatePinned();
    }
    
    public LoadTopNodes() : void
    {
      server.GetTopNodes(nodes => {
        Root = TreeNode() <- (
          Children = nodes
        );
      });
    }
    
    UpdatePinned() : void
    {
      server.LoadByIds(GetPinned(), nodes => {        
        Pinned.Children = nodes.ToList()
      });
    }
    
    public AddPinned(id : string) : void
    {
      def pinned = nweb.getCookie("pinned");
      
      if(pinned == null) nweb.setCookie("pinned", id, 360);
      else nweb.setCookie("pinned", pinned + "," + id, 360);
      
      UpdatePinned();
    }
    
    public RemovePinned(id : string) : void
    {
      def pinned = nweb.getCookie.[string]("pinned");
      when(pinned != null) nweb.setCookie("pinned", pinned.Replace(re (",?" + id) "g", ""), 360);
      
      UpdatePinned();
    }
    
    public GetPinned() : IEnumerable[string]
    {
      match(nweb.getCookie.[string]("pinned")) {
      | null => []
      | str => str.Split(',')
      }
    }
    
    public IsPinned(node : TreeNode) : bool
    {
      GetPinned().Any(id => id == node.Id);
    }
    
    public SelectNode(node : TreeNode) : void
    {
      def getAllParents(node : TreeNode) : list[TreeNode] {
      | _ when node.Parent != null => node.Parent :: getAllParents(node.Parent)
      | _ => [];
      };
        
      SelectedUrl = "http://www.rsdn.ru" + node.Href;
      ActiveNodes = node :: getAllParents(node);
    }
    
    public IsActiveNode(node : TreeNode) : bool 
    {
      ActiveNodes?.Any(n => n.Id == node.Id);     
    }
    
    [Html]
    public View() : string
    {
      <#
        <div class="page">
          <div class="left">          
            <div $when(Root != null) class="root">
              <div template="$(template(Search))" />
              <div $when(string.IsNullOrEmpty(Search.SearchTerm))>
                <div class="pinned-nodes">
                  <div template="$(template(Pinned))" />
                </div>
                <div template="$(template(Root))" />
              </div>
            </div>
          </div>
          <div class="right">
            <iframe attr-src="$SelectedUrl" frameborder="0" border="0" />
          </div>
        </div>
      #>
    }
    
    public class Server
    {
      public GetTopNodes() : List[TreeNode]
      {
        TreeLoader.GetTopNodes()
      }
      
      public LoadByIds(ids : IEnumerable[string]) : IEnumerable[TreeNode]
      {
        TreeLoader.LoadByIds(ids)
      }
    }
  }
}
