using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Extensions;

using System;
using System.Collections.Generic;
using System.Linq;
using NemerleWeb;
using NemerleWeb.TypedJS;

namespace NemerleWeb.Rsdn
{  
  [Unit]
  public class MainPage
  {
    mutable _searchTerm : string;
    
    public mutable static SelectedUrl : string;
    
    Root : TreeNode { get; set; }
    MenuHeight : float { get { window.innerHeight } }
    SearchResults : List[(TreeNode * list[string])] { get; set; }    
    SelectedSearchResultIndex : int { get; set; }
    
    SearchTerm : string { 
      get { _searchTerm; }
      set {
          when(_searchTerm != value) {
            _searchTerm = value;
            Search(value);
          }
      }; 
    }
  
    private static UpArrow = 38;
    private static DownArrow = 40;
    
    public this() {
      LoadTopNodes();
      SearchResults = List();
      
      _ = jscall @$(window).resize(_ => {
        nweb.invalidate();
        null
      });
      
      _ = jscall @$("body").on("keydown", "#search-input", e => {
        def e = e :> KeyboardEvent;
        if(e.ctrlKey && SearchResults.Count > 0) {
          when(e.keyCode == DownArrow && SelectedSearchResultIndex < SearchResults.Count - 2)
            SelectedSearchResultIndex++;
          when(e.keyCode == UpArrow && SelectedSearchResultIndex > 0)
            SelectedSearchResultIndex--;
          window.console.log(SelectedSearchResultIndex);
          false
        } else true      
      });
    }
    
    public LoadTopNodes() : void
    {
      server.GetTopNodes(nodes => {
        Root = TreeNode() <- (
          Children = nodes
        );
      });
    }
    
    public Search(term : string) : void
    {
      when(!string.IsNullOrWhiteSpace(term)) {        
        server.Search(term, nodes => {
          SelectedSearchResultIndex = -1;
          SearchResults = nodes.ToList();
        });
      }
    }
    
    public IsSelectedResult(node : TreeNode) : bool
    {
      false;
      if(SelectedSearchResultIndex > -1 && SelectedSearchResultIndex < SearchResults.Count)
        node.Id == SearchResults[SelectedSearchResultIndex][0].Id;
      else false
    }
    
    public static SelectNode(node : TreeNode) : void
    {
      SelectedUrl = node.Href;
    }
    
    [Html]
    public View() : string
    {
      <#
        <div class="page">
          <div class="left" style-height="$MenuHeight">
            <div $when(Root != null) class="root">
              <div class="search-bar">
                <input id="search-input" value="$SearchTerm" />
              </div>
              <div $when(!string.IsNullOrEmpty(SearchTerm)) class="search-results">
                <div $foreach((node, path) in SearchResults)>
                  <a click="$(SelectNode(node))" class="node" css-selected-search-result="$(IsSelectedResult(node))" css-selected-2="$(IsSelectedResult(node))">
                    <img attr-src="$(node.IconUrl)" />
                    <span>$(node.Caption)</span>
                  </a>              
                </div>
              </div>
              <div $when(string.IsNullOrEmpty(SearchTerm))>
                <div template="$(template(Root))" />
              </div>
            </div>
          </div>
          <div class="right">
            <iframe attr-src="$SelectedUrl" />
          </div>
        </div>
      #>
    }
    
    public class Server
    {
      public GetTopNodes() : List[TreeNode]
      {
        TreeLoader.GetTopNodes()
      }
      
      public Search(term : string) : IEnumerable[(TreeNode * list[string])]
      {
        TreeLoader.Search(term)
      }
    }
  }
}
