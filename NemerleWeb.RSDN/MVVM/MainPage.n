using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Extensions;

using System;
using System.Collections.Generic;
using System.Linq;
using NemerleWeb;
using NemerleWeb.TypedJS;

namespace NemerleWeb.Rsdn
{    
  [Unit]
  public class MainPage
  {    
    public mutable static SelectedUrl : string;
    
    Root : TreeNode { get; set; }
    MenuHeight : float { get { window.innerHeight } }
    Search : Search { get; set; }
    
    public this() 
    {
      LoadTopNodes();
      Search = Search();
      
      _ = jscall @$(window).resize(_ => {
        nweb.invalidate();
        null
      });
    }
    
    public LoadTopNodes() : void
    {
      server.GetTopNodes(nodes => {
        Root = TreeNode() <- (
          Children = nodes
        );
      });
    }
    
    public static SelectNode(node : TreeNode) : void
    {
      SelectedUrl = node.Href;
    }
    
    [Html]
    public View() : string
    {
      <#
        <div class="page">
          <div class="left" style-height="$MenuHeight">
            <div $when(Root != null) class="root">
              <div template="$(template(Search))" />
              <div $when(string.IsNullOrEmpty(Search.SearchTerm))>
                <div template="$(template(Root))" />
              </div>
            </div>
          </div>
          <div class="right">
            <iframe attr-src="$SelectedUrl" />
          </div>
        </div>
      #>
    }
    
    public class Server
    {
      public GetTopNodes() : List[TreeNode]
      {
        TreeLoader.GetTopNodes()
      }
    }
  }
}
