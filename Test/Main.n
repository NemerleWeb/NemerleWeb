using Nemerle.Collections;
using Nemerle.Xml;
using Nemerle.Extensions;
using Nemerle.ComputationExpressions;

using System;
using System.Text;
using System.Linq;
using System.Console;
using System.Collections.Generic;
using System.Xml.Linq;

using NemerleWeb;

module Program
{
  Main() : void
  {
    def result = nweb Test();
    WriteLine(result);
    _ = Console.ReadKey();
  }
}


[Unit]
public class Test
{  
  [Unit]
  class TestRefOut
  {
    public InstanceRef(s : ref string) : string
    {
      InstanceDoRef(ref s);
      s + "b"
    }
      
    private InstanceDoRef(s : ref string) : void
    {
      s = "a";
    }
      
    /*public InstanceOut(x : out int) : int
    {
      InstanceDoOut(out x);
      x + 1
    }
      
    private InstanceDoOut(x : out int) : void
    {
      x = 1;
    }
  
    public static StaticRef(s : ref string) : string
    {
      StaticDoRef(ref s);
      s + "b"
    }
      
    private static StaticDoRef(s : ref string) : void
    {
      s = "a";
    }
      
    public static StaticOut(x : out int) : int
    {
      StaticDoOut(out x);
      x + 1
    }
      
    private static StaticDoOut(x : out int) : void
    {
      x = 1;
    }*/
  }
      
  public this()
  {    
    mutable s = "x";
    def refRes = TestRefOut().InstanceRef(ref s);
        
    //mutable s2 = "x";
    //def refRes2 = TestRefOut.StaticRef(ref s2);
        
    s == "a" && refRes == "ab"
  }
    
  [Html]
  public View() : string
  {
    <# <div></div> #>
  }
}